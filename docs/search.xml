<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>获取可用端口号</title>
      <link href="/94eaf748a3fb.html"/>
      <url>/94eaf748a3fb.html</url>
      
        <content type="html"><![CDATA[<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> execSync <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token comment">/** * 获取可用端口号，如果当前端口号已被占用，则自增，直到找到可用端口号为止 */</span><span class="token keyword">const</span> <span class="token function-variable function">getAvailablePort</span> <span class="token operator">=</span> <span class="token parameter">port</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> targetPort <span class="token operator">=</span> port  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> targetPort <span class="token operator">&lt;</span> <span class="token number">9000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">netstat -aon | findStr "127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>targetPort<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      targetPort<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> targetPort    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>用法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// xx.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token function">getAvailablePort</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rollup 打包 Vue 项目</title>
      <link href="/d732fc12d0fc.html"/>
      <url>/d732fc12d0fc.html</url>
      
        <content type="html"><![CDATA[<p>用 Rollup 打包一个 Vue 项目所需的配置。</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>所需依赖：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"rollup-build-vue"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"rollup -c"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.26.0"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-babel"</span><span class="token operator">:</span> <span class="token string">"^6.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-commonjs"</span><span class="token operator">:</span> <span class="token string">"^28.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-image"</span><span class="token operator">:</span> <span class="token string">"^3.0.3"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-node-resolve"</span><span class="token operator">:</span> <span class="token string">"^16.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-replace"</span><span class="token operator">:</span> <span class="token string">"^6.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-terser"</span><span class="token operator">:</span> <span class="token string">"^0.4.4"</span><span class="token punctuation">,</span>    <span class="token property">"@rollup/plugin-url"</span><span class="token operator">:</span> <span class="token string">"^8.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"rollup"</span><span class="token operator">:</span> <span class="token string">"^4.28.1"</span><span class="token punctuation">,</span>    <span class="token property">"rollup-plugin-postcss"</span><span class="token operator">:</span> <span class="token string">"^4.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"rollup-plugin-progress"</span><span class="token operator">:</span> <span class="token string">"^1.1.2"</span><span class="token punctuation">,</span>    <span class="token property">"rollup-plugin-vue"</span><span class="token operator">:</span> <span class="token string">"^6.0.0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>入口文件：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/*  */</span><span class="token punctuation">&#125;</span></code></pre><h2 id="rollup-config-mjs"><a href="#rollup-config-mjs" class="headerlink" title="rollup.config.mjs"></a>rollup.config.mjs</h2><p>打包配置：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-node-resolve'</span><span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-commonjs'</span><span class="token keyword">import</span> babel <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-babel'</span><span class="token keyword">import</span> image <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-image'</span><span class="token keyword">import</span> replace <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-replace'</span><span class="token keyword">import</span> terser <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-terser'</span><span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-url'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'rollup-plugin-vue'</span><span class="token keyword">import</span> postcss <span class="token keyword">from</span> <span class="token string">'rollup-plugin-postcss'</span><span class="token keyword">import</span> progress <span class="token keyword">from</span> <span class="token string">'rollup-plugin-progress'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">'./index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">'public/dist.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'umd'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">babelHelpers</span><span class="token operator">:</span> <span class="token string">'bundled'</span><span class="token punctuation">,</span>      <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">terser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">postcss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token string-property property">'process.env.NODE_ENV'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'production'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">progress</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">clearLine</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">external</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Rollup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三年～</title>
      <link href="/2beab5b2e3e4.html"/>
      <url>/2beab5b2e3e4.html</url>
      
        <content type="html"><![CDATA[<p>这一年总共就写了四篇文章，啧 🤦。虽然文章写的比较少，但 “事” 没少做。</p><p><a href="https://github.com/showlotus/babel-plugin-jsx">babel-plugin-jsx</a>：去年项目要迁移新版本的框架，意味着要把之前的代码全部重构一遍。其实当时刚开始重构的时候，就有个想法：为什么不用 <code>jsx</code> 的格式来重构代码呢？这样不仅会提升代码的逻辑清晰度，嵌套层级也会极大地降低，对开发很友好。我的设想是，开发一个 <code>babel</code> 插件。结果，当时只做了一个开头，后续一直没时间，于是就搁置了。终于在某一个周末，我又重拾了这个项目，然后就做完啦！我当时也挺震惊的，这个玩意也没当时看起来那么复杂，早知道就忙里偷闲给搞搞了。然后经过一周的测试，我打算向部门内部推广。结果不是很理想，原因也提了很多。但是我感觉更大的原因是，自从提出准备重构到现在，已经过了好久了，大家都已经按照之前那种写法开发的，现在突然又要换新的写法，成本太高。这让我想起来一句话：人生就是手脚快的人赢，如果什么都不做，那就什么也得不到。有一次前端领域组织培训的时候，说要如何降代码量，我又自告奋勇地分享了一下这个插件。最后，结果还是不敬人意，架构师们没采纳这个方案。当时也挺气的，感觉是在 “对牛弹琴”。直到有一次前端架构组给了一种降代码量的方案，用一个函数去包裹这些重复的配置。当时好像就突然想明白了一个道理：代码的树形结构，无论是 <code>html</code> 这种标签嵌套式，还是单纯的 <code>js</code> 对象嵌套结构，都是树形结构的一种抽象。仔细看看，就能发现共同点：成对出现的标识符。对于 <code>html</code> 就是各种成对的头尾标签，例如 <code>&lt;div&gt;</code> 和 <code>&lt;/div&gt;</code>，而对于普通的 <code>js</code> 对象，就是各种成对的花括号（<code>&#123;</code> 和 <code>&#125;</code>）。对于函数那就是成对的圆括号（<code>(</code> 和 <code>)</code>）。这三种刚好分别对应了最开始的开发模式：<code>js</code> 对象嵌套、<code>jsx</code> 格式：标签式嵌套、函数封装：圆括号嵌套。这样再看 <code>jsx</code> 和函数嵌套，其实都是同一个问题的不同解决方案（好像说了一句废话 🤔），没有孰优孰劣，就看公司开发规范怎么规定了。</p><p><a href="https://github.com/showlotus/wordcloud-online">wordcloud-online</a>：去年元旦的时候，我把我们 “摆子群” 的聊天记录导出成一个 <code>txt</code> 文档。然后借助之前写的一个词云生成器，生成了一个年度热词的词云。今年元旦我想再复刻一下，但是觉得再用那个项目，不是很方便。于是就打算开发一个网站，每次只需要导入一个文档就能自动生成词云了。用了半个月的时间给做出来了，而且是用 <code>React</code> 开发的，对于我这个 <code>React</code> 小白来说，也算学到了不少知识点。而且从 <code>React</code> 相关的工具库中，发现了 <code>Vue</code> 的 “影子”。优秀的框架都是相互借鉴的，只是为了让开发者有更好的开发体验，并且遵循当前主流的技术设计理念。对于我这个资深的 <code>Vue2</code> 玩家，在这次上手开发 <code>React</code> 项目中，几乎没咋遇到比较严重的磕磕绊绊，还是很好上手的。</p><p><a href="https://github.com/showlotus/DouDiZhu-Register">DouDiZhu-Register</a>：有一次去朋友家玩，大家伙在打牌（斗地主），我在旁边围观。突然脑子闪过一个念头，整一个记牌器帮助参与者快速记牌。然后就开始琢磨记牌规则，设计了一套词法规则。当时设计出来的时候，我自己也惊呆了，真的很完美！对初次使用者也很友好。先开发了一个电脑端的，然后又适配手机和平板，手搓了一个键盘。好看的不得了～</p><p><a href="https://github.com/showlotus/code-inspector-plugin">code-inspector-plugin</a>：有一次看到一篇博文介绍一个很好用的插件 <a href="https://github.com/zh-lx/code-inspector">code-inspector</a>，可以快速定位组件源码的源文件位置，而且兼容目前各种主流技术栈和打包工具。然后我就加了交流群（生平第一次加这种群），问了问作者，有关实现原理的问题。于是就有一个想法：给我司的 SAAS 项目也开发一个类似的插件。因为我司的项目基于 Webpack 进行构建打包，那就开发一个 Webpack Plugin 叭。这个插件还算简单，没用多少时间。然后就是推广，在内部群里分享了一下。前端组长本来说给我推一下的（因为要动平台的代码），结果就搁置了，因为那时候我也没开发 SAAS 项目了，然后就没然后了 🤦，算是黄了。不过好在把这个项目放在了我们产品的内源项目中，算是黄了一半叭。有时候就这样，做出来的东西自我感觉很好，结果因为推不动就黄了。</p><p><a href="https://github.com/showlotus/Ti18n">Ti18n</a>：脱胎换骨后，重新出发。之前的 <em>Turboui-i18n</em> 其实和 <em>Turboui</em> 没啥关系，就是借了一个名头。然后有一次，一个同事想在我们的存量项目中也能用这个插件，问我能不能支持。经过一番考察后，发现可以做，然后我就打算重构一个新版本，新插件，脱离这个 <em>Turboui</em> 。经过一阵子倒腾，<em>Ti8n</em> 强势来袭。我最近的工作中借助它提升不少效率。有一个很巧妙的设计通过注释与插件进行交互。例如，<code>// @Ti18n prop=message</code>，蛮有意思的，其实是参考了 <code>leetcode</code> 的 <em>VS Code</em> 插件生成文件时的注释。有时候还是很庆幸自己能知道这么些东西的，涉猎的越多，知道的越多，才能知道这个能不能做，以及如何借助一些优秀的设计，站在巨人的肩膀上。</p><p><a href="https://github.com/showlotus/vue2-sub-app">vue2-sub-app</a>：因为我们部门有好多卡片项目，这些项目打包后会生成一个 <em>JS</em> 资源。使用时，需要通过以 <em>url</em> 的方式引入这个 <em>JS</em> 资源。这个 <em>JS</em> 资源其实就是一个 <em>Vue</em> 组件。由于卡片内部有时候要用到切换页面的功能，<em>v-if</em> 需要用到很多次，感觉不太优雅，想着要是能用上 <em>vue-router</em> 路径匹配组件的功能该多好。为了解决这个痛点，这个工具库应运而生。通过改写目标组件实例更新子组件列表时的 <code>push</code> 方法，获取到其所有的后代组件，这个方法真的很巧妙。本来想着发布到公司内部的镜像仓里，给大家伙分享一波，结果直接把流程卡的死死的，以我现在的工作身份根本无法发起流程，有点气人 😡。</p><p>其实还有一个项目，从 6 月底打算做，7 月初的时候，调研的差不多了，感觉用 <em>Vue</em> + <em>Vite</em> + <em>Electron</em> 可以做。之后，就一直在断断续续地开发中。本来想着 10.1 前发布的，前几天刚好又看了一个框架 <em>Tauri</em> ，比 <em>Electron</em> 更轻量，打包后的体积能减少 10 倍。毕竟 <em>Electron</em> 塞了一个浏览器内核进去，基础体积还是太大了。但是 <em>Tauri</em> 是需要用 <em>Rust</em> 进行开发的，我还没学过 🤦。何况现在的功能逻辑基本上完成的差不多了，打算先整一个 <em>Electron</em> 的版本（<code>v0.1</code>），后续再优化成 <em>Tauri</em> 的版本（<code>v0.2</code>）。希望 2024 结束前，这款应用能正式和大家见面。</p><p>聊完了今年做过的自我感觉技术能力有提升的事情，再聊聊工作和生活叭。这一年，我在努力让自己的情绪不受别人影响。尤其是别人的风言风语，或者一些他人的观点，避免这些影响到自己。我同时也在改观自己对周围人的看法，不再强求他人做我自己感觉很容易做的事，或者应该做到的事。之前，看他人做事时，总会代入自己，自己会如何去做。如果自己能做到，对方做不到，心里就对这个人有种 “鄙视” 的看法：这么简单的事，我都能做到，你居然做不到。这种想法很容易让自己难于融入周围的人，虽然我平时工作时，也是温言温语，基本上没发过脾气。就算发脾气也是自我消化了，也不会对他人显露出来。</p><p>之前有一阵子，工作很忙，总是很晚才下班，周末还要加班，一度有想要离职的想法。来西安这一年半，在工作上倒是没学到什么东西（自我感觉）。浏览器开发者工具倒是玩的很花，各种 Debug 技巧，用的很熟练。日常开发工作的完成，感觉还是老样子，需求人员那边交付每迭代的任务，然后自己看看怎么做比较好，最后就上手开发了。总感觉少了点什么。我之前一直有一个想法就是开发前，先写一个开发设计文档，具体到哪个功能怎么做，会有哪些坑需要规避，以及一些难以发现的 BUG。可是，现在的开发流程还是老样子，丝毫没有进步。并且，有时候我会在公司搞自己的事情。总会有一段时间，实在不想开发本迭代的任务，然后就去摸鱼搞自己的事情，导致剩余的开发时间就不够了，后面就火急火燎地赶进度。这个坏毛病得改！还是得把工作任务的优先级提到最高，完成后如果有空闲时间，再去搞自己的事情。有时候挺烦工作环境不能访问某些外部网站的，导致查资料的时候就很麻烦。如果要换下一份工作，我一定要换一个能访问外部网站比较自由一点的公司，在这工作天天可太憋屈了 😩。</p><p>在一次产品双周例会上，有个我的议题，让我出个方案关于项目中用的 UI 组件升级的事。我们产品是一个公共底座，有许多其他产品的页面也在我们平台访问，这也就意味着需要和其他各个产品对齐，一起推进升级。这个升级之前五月份的时候就搞过一次，因为遇到一个平台问题，以及各个产品环境参差不齐，就一直卡在那了，然后就没有然后了。直到最近，又开始提这个事。会上，我就讲了讲自己的方案，因为某些产品只有单一的测试环境，于是就打算先在本地验证，可还没讲到一半，产品经理就打断我了，说这样搞不行，直接就给 pass 掉了。说，如果其他产品没环境就让他们自己再搭一个环境，又提了一下，前几年整个系统切换的时候，给他们搭建了不少环境，怎么可能就一个环境！（这个事，我是第一次听说的，之前也没人提过，那时候就让我催着其他产品搭环境，有点无助。）然后，我又讲了讲目前的进展及阻塞点。产品经理听了又开始急了，说听不懂我讲的是啥。然后他又说了一大堆东西，主要还是觉得这个任务，我做的不好。实话实说，我也觉得自己做的不好。我不是一个擅长 push 别人的人，而且我也不想 push 别人。我觉得有些事别人能做好就做好，做不好就做不好，非要催着别人干，给别人压力，这件事我本身就很不喜欢。我也很讨厌那些 push 别人的人，尤其是某些 Owner&#x2F;TL 角色的人。来这边一年多了，也看到了某些眼里只有进度，不管员工死活的人。想起来上次看到的一个经济学的书中讲到的，某些官员被调任到地方任职时，为了政绩，大刀阔斧搞经济，反正任期满了之后就会被调离，完全不顾后面的影响（刚好最近大部门的产品经理升职调走了，这种感觉更明显了），例如，财政赤字。在公司看到的这些人让我颇有遇到这种官员的感觉。</p><p>记得一两年前时候的我，遇到工作中的问题，会和它死磕到底，直到把问题解决。然而现在的我，却很少有这种状态了，遇到问题，只想着赶紧敷衍了事，没有了当初的那种心气。于是，我在质问自己：难道是我变了吗？ 应该不是：之前的我，工作内容不是很繁重，有大把的时间可以用来钻研问题，以及做自己喜欢的事情上。而现在的我，每天能安心开发都是一个问题，有时候这件事还没做完，另一件事就已经安排进来了，让我感觉很心累。而且还时不时被拉去看用户的生产问题。有时候一天忙来忙去，等到下班后发现啥也没干，当前迭代的任务进度毫无进展。乱序无章的工作内容是一方面，其次是，开发的内容。不知道从何时开始，我开始对 B 端的产品开发失去了兴趣，可能前两年接触的太多了，公司内部的工作台项目，大体都是一样的。而且还用着比较老的技术栈（Vue2），老技术栈好处是，我已经很熟悉了，丝毫不担心该如何实现的问题。但缺点就是，这样会让我觉得止步不前，从公司项目中学到的微乎极微，那就要在私下里提升自己，无论是看书还是开发自己的项目，对于我来说，能提升自己的都是好的。这一年，也没咋看书，看了几本闲书，技术相关的也看了一点。倒是买了不少书，有时候过节，部门发经费让选礼物，我都选择买书，所以攒了好多还没看的书。今年有空都给看看。未来一年我打算好好学学 Rust，最好再用它做一个小项目。</p><p>国庆假期结束，回来的路上我在想要不要明天换一份工作，或者试着面面试，感觉这一年有点松懈了（想较于 23 年）。因为至少我能确定的是，西安不是我长久的归宿，我也不是很喜欢在这边待着，也没个朋友啥的，周末就很枯燥。一个人在家学学习，或者看剧啥的，也挺没意思的。有时候也想出门走走看看，但总是因为自己一个人而望而却步。今年年初的时候，家里介绍了一个女生给我认识，在宁波工作。我俩也聊了蛮久的，但是我是没法接受异地恋的。也不可能让人家跑到西安来，如果想进一步发展的话，就只能我去浙江，大概率是杭州。其实我俩接触的也比较少，只是家里人比较喜欢，我对她也不反感，也不抵触，如果以后真在一个城市发展的话，感觉可以试一试。我对我下一份工作的期望是，要能长久地干下去，毕竟是第三份工作了。要么工作内容很感兴趣（比如，做 C 端的产品，或者搞前端基础建设啥的），要么找一个轻松一点的工作（不咋加班，工资少点也能接受），可以有更多的空闲时间做自己的事情。我得给我换工作找个理由，而不能全是因为那个女生。杭州也挺好的，刚好我姐姐在温州，以后每逢周末有时间就可以去找她玩了。而且也有一些朋友在杭州，相比西安确实好不少。我也有想过公司内部内转，但是在目前的公司内转到杭州大概率不太可能，只能换工作了。况且我想跳出这个工作环境，找一个自由一点的公司。那就跳槽叭！首先，先看看能不能在日常工作中，做点比较拿得出手的工作写在简历上，把简历丰富一下。刚好也三年了，找下一份工作，应该也不是很难。给自己一年的时间，等到明年十月份的时候，看看能不能换到杭州工作。《“假期”结束，开始“苦难”》。</p><p>下一年寄语：</p><ol><li>处事不惊：能时刻保持情绪稳定，有自己的判断力，不受旁人旁物的影响。</li><li>井然有序：面对工作上杂七杂八的任务，合理划分优先级，能游刃有余地处理。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Omit | Pick | PickAndOmit</title>
      <link href="/3b6191ac9bf6.html"/>
      <url>/3b6191ac9bf6.html</url>
      
        <content type="html"><![CDATA[<p>最新在开发功能的时候需要用到 <em>lodash</em> 中类似 <code>pick</code> 和 <code>omit</code> 的功能，但是只是用到这两个小功能，实在不想把这个库也下载下来，于是就自己实现了一下。而且既然都用到 <em>TypeScript</em> 了，那就完善一下类型叭。本来想着参考 <em>lodash</em> 里类型是如何实现的，结果发现源代码里虽然是用 <em>TypeScript</em> 写的，但是类型是一点都没写，只能自己琢磨了。最后的版本如下：</p><details open><summary>ts</summary><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">omit</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>  obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>  <span class="token operator">...</span>keys<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">pick</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>  obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>  <span class="token operator">...</span>keys<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>以及 <code>pick</code> 和 <code>omit</code> 的结合版方法 <code>pickAndOmit</code> :</p><details open><summary>ts</summary><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">pickAndOmit</span><span class="token generic class-name"><span class="token operator">&lt;</span>  <span class="token constant">T</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span>  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span>keys<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">pick</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">omit</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>keys<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>竞态函数过期</title>
      <link href="/835ff34dd8d8.html"/>
      <url>/835ff34dd8d8.html</url>
      
        <content type="html"><![CDATA[<p><img src="/835ff34dd8d8/intro.excalidraw.png" alt="intro.png"></p><p>如上图所示，点击不同的 <code>Tab</code> 页签，<code>Table</code> 中展示不同的数据，这是一个很常见的页面交互逻辑。</p><p>设想一下，当前的处理逻辑是：有三个 <code>Tab</code> 页签和一个 <code>Table</code>，每点击 <code>Tab</code> 后，都会发起一个请求，然后请求成功后，会对 <code>Table</code> 重新赋值。也即，不同的 <code>Tab</code> 切换，都会对这个唯一的 <code>Table</code> 进行重新赋值。</p><p><img src="/835ff34dd8d8/update.excalidraw.png" alt="update.png"></p><p>仔细想一下，这会有问题吗？</p><p>有的，这里隐藏着一个 “竞态” 问题。当点击 <code>Tab</code> 页签的操作过于频繁时，能保证当前 <code>Table</code> 里展示的数据是最后一次点击的 <code>Tab</code> 对应的数据吗？</p><p><img src="/835ff34dd8d8/update-unclear.excalidraw.png" alt="update-unclear.png"></p><p>一顿操作之后，<code>Table</code> 的数据究竟来自哪个 <code>Tab</code> 页签，估计没一个人能说的清楚。如何解决这个问题呢？先来分析一下问题出现的原因。</p><ul><li>首先，因为发起请求是异步，不能保证请求一定是按照触发的顺序依次返回对应的结果，从而导致了数据的不确定性；</li><li>其次，每次发起新请求后，之前的历史请求都已经 “过期” 了，不应该再用历史请求获取到的数据去更新表格，这是历史请求所带来的 “副作用”。</li></ul><p>解决问题的关键就是如何消除这种 “副作用”：<em>怎么让历史请求不再更新 <code>Table</code> 中的数据</em> 。</p><blockquote><p>规避这一问题还有一个更简单的方法：拆分数据。就是定义 3 个变量分别用来记录不同页签返回的数据，根据当前点击的 <code>Tab</code> 展示对应的数据。而在实际开发中，是采用拆分数据，还是共用同一份数据，需要依据具体场景具体分析。在这里，采用共用同一份数据的方式，作为解决竞态问题的前提，其他暂不考虑。</p></blockquote><p>按照这个解决思路，每当有新请求发起时，就给历史请求打上 “过期” 的标记，等当前请求成功后判断是否过期，只有未过期的请求才去更新 <code>Table</code>。那么如何将一个历史请求标记为 “过期” 呢？不妨借鉴一下 <em>Vue</em> 中 <code>onCleanup</code> 的原理来实现。</p><p><em>Vue3</em> 中 <code>watch</code> 方法的回调函数 <code>WatchCallback</code>，相较于以往的 <code>newValue</code> 和 <code>oldValue</code>，新增了一个参数 <code>onCleanup</code>，用以清理过期的回调函数，<a href="https://github.com/vuejs/core/blob/cf8cd1d97ec1de139a68ba9adfb207625cd2fe2d/packages/runtime-core/src/apiWatch.ts#L358">👉 源码地址</a>。每次 <code>WatchCallback</code> 执行时，都会先执行 <code>onCleanup</code> 里的回调函数。用法如下：</p><details open><summary>js</summary><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">watch</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">,</span> onCleanup</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用一个标识记录当前回调是否过期</span>  <span class="token keyword">let</span> expired <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment">// cleanup 执行时，将标识置为 true</span>  <span class="token function">onCleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    expired <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/xxx/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token comment">// 判断当前回调是否过期，未过期才会打印 data</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>expired<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></details><p>上述代码是如何运作的：</p><ul><li><code>watch</code> 内部执行 <code>WatchCallback</code> 时会先判断是否有 <code>cleanup</code>，若有则执行，随后再执行 <code>WatchCallback</code> 内部的逻辑。首次执行 <code>WatchCallback</code> 时，<code>cleanup</code> 为空；</li><li>每次 <code>WatchCallback</code> 执行时，都会在内部定义一个 <code>expired</code> 变量，同时向 <code>onCleanup</code> 注册一个回调 <code>cleanup</code>，用以将 <code>expired</code> 赋值为 <code>false</code>；</li><li>当本轮 <code>WatchCallback</code> 还未执行完毕，又触发新一轮的 <code>WatchCallback</code> 时，此时，<code>cleanup</code> 有值，执行 <code>cleanup</code> 后，会将上一轮 <code>WatchCallback</code> 中的 <code>expired</code> 置为 <code>false</code>；</li><li>当上一轮的 <code>WatchCallback</code> 中的 <code>fetch</code> 执行完后，此时 <code>expired</code> 已被置为 <code>false</code>，因此不会打印 <code>data</code>；</li><li>而当最新的 <code>WatchCallback</code> 中的 <code>fetch</code> 执行完后，此时 <code>expired</code> 还是 <code>true</code>，因此会打印 <code>data</code>。</li></ul><p>按照这个思路，先来实现一个监听普通回调函数的版本：</p><details open><summary>js</summary><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 监听回调函数是否过期 * @param &#123;(args: Array&lt;any>, onCleanup: () => void) => any&#125; callback * @return &#123;(...args: Array&lt;any>) => ReturnType&lt;callback>&#125; */</span><span class="token keyword">function</span> <span class="token function">watchExpiredCallback</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cleanup  <span class="token keyword">const</span> <span class="token function-variable function">onCleanup</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    cleanup <span class="token operator">=</span> fn  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cleanup<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 原函数的入参，通过 args 透传进去</span>    <span class="token comment">// 新增入参 onCleanup</span>    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>args<span class="token punctuation">,</span> onCleanup<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><p>用法如下：</p><details open><summary>js</summary><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 原本的异步函数</span><span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 可监听是否过期的异步函数</span><span class="token keyword">const</span> newRequest <span class="token operator">=</span> <span class="token function">watchExpiredCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> onCleanup</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> expired <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token function">onCleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    expired <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>expired<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> data  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"request expired"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></details><p>执行结果如下：</p><p><img src="/835ff34dd8d8/code-v1.png" alt="code-v1"></p><p>连续调用了三次 <code>newRequest</code>，只有最后一次打印了结果，前两次都当作 “过期” 处理。竞态问题就这样轻松解决啦～</p><p>但是呢，现在这还不够好，前两次请求已经过期了，可还是发起请求并获取了响应结果，有点浪费资源，应该把过期的请求都取消掉才合理。而取消请求可以借助原生 <em>JS</em> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController">AbortController</a> 类实现，而且 <a href="https://github.com/axios/axios">axios</a> 自 <code>v0.22.0</code> 后也支持这一特性，很是方便。</p><p>再把 <code>request</code> 和 <code>newRequest</code> 改造一下：</p><details open><summary>js</summary><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fetch id(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">) is canceled.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> response<span class="token punctuation">,</span> cancel <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> newRequest <span class="token operator">=</span> <span class="token function">watchExpiredCallback</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> onCleanup</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> response<span class="token punctuation">,</span> cancel <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token function">onCleanup</span><span class="token punctuation">(</span>cancel<span class="token punctuation">)</span>  <span class="token keyword">return</span> response<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"from 1"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"from 2"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"from 3"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></details><p>改造后的 <code>newRequest</code> 代码逻辑更简洁了，执行结果如下：</p><p><img src="/835ff34dd8d8/code-v2.png" alt="code-v2"></p><p>可以看到前两次请求已经被取消啦，完美！</p><blockquote><p>2024&#x2F;08&#x2F;22 更新：实际开发中发现参数使用起来很奇怪，改成下面这种参数结构更加方便一点。</p></blockquote><details open><summary>js</summary><pre class="language-diff" data-language="diff"><code class="language-diff">function watchExpiredCallback(callback) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> let cleanup</span><span class="token prefix unchanged"> </span><span class="token line"> const onCleanup = fn => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   cleanup = fn</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span><span class="token prefix unchanged"> </span><span class="token line"> return function (...args) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   cleanup?.()</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   return callback.apply(this, [args, onCleanup])</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   return callback.apply(this, [onCleanup, ...args])</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span>&#125;</code></pre></details><p>用起来就是下面这样：</p><details open><summary>js</summary><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const newRequest = watchExpiredCallback(function (args, onCleanup) &#123;</span><span class="token prefix deleted">-</span><span class="token line"> const id = args[0]</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const newRequest = watchExpiredCallback(function (onCleanup, id) &#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   const &#123; response, cancel &#125; = request(id)</span><span class="token prefix unchanged"> </span><span class="token line">   onCleanup(cancel)</span><span class="token prefix unchanged"> </span><span class="token line">   return response</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;)</span></span></code></pre></details>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 工具函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React + Antd 搭建一个词云在线生成网站</title>
      <link href="/6d3a4b0222af.html"/>
      <url>/6d3a4b0222af.html</url>
      
        <content type="html"><![CDATA[<p>事情的起因是，有一天，突然看到一个贼吃我颜的 <em>UI</em> 组件库 <a href="https://ui.shadcn.com/">shadcn&#x2F;ui</a>，实在是太喜欢了 😍。</p><p><img src="/6d3a4b0222af/shadcn.jpg" alt="shadcn"></p><p>于是，打算用这个 <em>UI</em> 库做个东西，刚好最近要做一个词云相关的网站，起初是打算用 <em>Vue</em> 实现来着，但是看了看这个 <em>UI</em> 库不支持 <em>Vue</em> ，但支持 <em>React</em> ，但我还从未使用 <em>React</em> 开发过任何东西，上次学习还是 <em>3</em> 年前的事了。然后，我做了一个决定就用 <em>React</em> 来实现啦！边学习边实现！</p><p>但中途，又发现了一个问题，我想要一个多选的下拉框，但是这个 <em>UI</em> 库里没有，我真的是……，只能弃船转向 <em>Antd</em> 了。不得不说，<em>Antd</em> 组件的功能是真的多～</p><p>然后就一步一步开发功能，功能也不多，开发起来还算容易。中途接触到了 <code>styled-components</code> 用来在 <em>React</em> 写 <em>CSS</em> ，挺有意思的，而且支持动态属性传值，这点比 <em>Vue</em> 方便不少。还有就是 <em>TS</em> 的支持，<em>React</em> 的生态还是强大！开发起来实在是方便至极！</p><p>有一个功能需要跨组件通信，然后就去接触到了 <em>Redux</em> ，翻了翻文档，发现了好多 <em>Vuex</em> 的 “影子” ，哈哈哈。搭配官方推荐的 <em>react-redux</em> ，着实不错。然后叭，遇到一个问题，在一个组件内通过 <code>dispatch</code> 更新 <code>store</code> 中的数据，这里组件内部也用到了这个数据，就导致组件循环更新，死循环了…</p><p>然后，就去了解了一下 <em>React</em> 的更新机制：每当组件上的属性发生变化时，都会从当前组件开始，自上而下，重新渲染一遍。<code>store</code> 里的数据更新后，触发当前组件重新渲染，然后又调用了 <code>dispatch</code> ，然后又更新 <code>store</code> ，然后又重新渲染… 结果就陷入更新死循环了。我想出的解决方案就是，把更新 <code>store</code> 的操作放在父组件里，效果果然不错。其中还涉及到几个 <em>hook</em> 的使用：<code>useEffect</code>、<code>useCallback</code> 和 <code>useMemo</code>。<code>useEffect</code> 用作在生命周期的挂载和卸载阶段使用，其他俩用作缓存函数计算值，可以有效提高超大耗时函数带来的性能问题。</p><p>最后一个难点是，解析词法的时候，如果文本过大会导致页面卡死。想出来的解决方案是，按 <em>1w</em> 个字符进行分段解析，解析文本内容长度与解析速度的关系大约是 <code>35:1</code>，也即每 <em>35</em> 个字符的解析时间大约需要 <em>1ms</em> 。然后用一个函数封装一个异步队列，每分析完一段后，延时 <em>200ms</em> 后再接着分析。速度快多了，而且页面不会卡死了，我真是一个小天才！嘿嘿 😁</p><p>最后的效果如下：</p><p><img src="/6d3a4b0222af/demo.gif" alt="demo"></p><p>对于 <em>React</em> 的看法：对于我这个初学者而言，还不算把 <em>React</em> 用到出神入化叭，但是能明显的感知到，如果你接触过组件式的开发，突然上手 <em>React</em> 是很容易的。而且没有像 <em>Vue</em> 里提供了过多的 <em>API</em> 需要记，基本都是一些和原生 <em>JS</em> 类型的语法，本质还是 <em>JS</em> 。之前总听说 <em>React</em> 的学习曲线比较陡峭，比 <em>Vue</em> 难些，但是在学完 <em>Vue</em> 后，再看 <em>React</em> ，会发现好多 <em>Vue</em> 的 “影子”。我觉得这些类似的库，不讨论借鉴与抄袭，对于开发者而言是很有利的。如果让你从 <em>Vue</em> 转到 <em>React</em> ，还是不难的。后续可以再学习些 <em>React</em> 底层原理相关的知识，争取也能把 <em>React</em> 整个渲染机制摸透，这样简历里又能多写一项技术栈了，哦耶 ✌️。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
            <tag> Antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Babel 插件：自定义转换 JSX 语法规则</title>
      <link href="/48a22582094f.html"/>
      <url>/48a22582094f.html</url>
      
        <content type="html"><![CDATA[<p>去年九月份的时候，由于平台框架升级，要求各个产品都要升级，相当于要把之前的代码全部用新框架的语法重构一遍，于是就开启了 2.0 框架升级的工作。升级后的语法如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">slots</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">slots</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"xxx"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">"Input"</span><span class="token punctuation">,</span>              <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">clearable</span><span class="token operator">:</span> <span class="token boolean">true</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果你有过 <em>Vue</em> 开发经验的话，可能感觉到很熟悉，这怎么和 <code>render</code> 函数的写法有些许相似，令人熟悉的 <code>props</code> 和<code>slots</code>。不过，当时看到这种结构的第一眼就在想，平台这样搞的目的：为了能在平台侧更加方便地处理各种数据。这样看，平台确实是方便了，但对于实际开发者来说，冗余的对象结构导致一个组件文件的代码过长，代码结构难以阅读，而且后面还要面临代码重复率过高的问题。</p><p>同样地，<em>Vue</em> 中的 <code>render</code> 函数也有类似的问题，虽然足够灵活，但开发者的代码阅读负担直线上升。于是 <em>Vue</em> 就提供了 <em>JSX</em> 语法，作为 <code>render</code> 函数的第二种选择。毫无疑问，这种类似 <em>XML</em> 的扩展语法对于前端开发人员来说，能快速地了解到整个代码结构，降低阅读难度。于是，在当时就有了一个想法，能不能写一个插件把 <em>JSX</em> 语法转为目标的对象数据结构？想法有了，那就开干！</p><p>由于需要的对象结构和 <em>Vue</em> 中的组件属性有些相似，于是就参考了 <a href="https://github.com/vuejs/babel-plugin-jsx">babel-plugin-jsx</a>，以它为模版，fork 了一个代码仓后，就开始进行改造。改造还算顺利，一个周末其实就已经完成了整体功能了，实际编码时间大约有二十个小时左右，后续的几天修修 BUG。最后的效果如下（<a href="https://showlotus.github.io/babel-plugin-jsx/website">在线体验地址</a>）：</p><p><img src="/48a22582094f/website.png" alt="website"></p><p>最初的打算是开发一个 <em>Webpack Loader</em> 出来，因为我们用的打包工具也支持 <em>Webpack</em> 的配置，后来发现使用 <em>Babel Loader</em> + <em>Options</em> 就可以了，完全不需要开发一个 <em>Loader</em> 出来。为了支持 <code>TSX</code> ，还需要使用插件 <code>@babel/plugin-transform-typescript</code> 对 <code>TSX</code> 语法进行转换，去除类型代码。最后的 <em>Webpack</em> 配置如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jsx|tsx)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">[</span>                  <span class="token string">"@showlotus/babel-plugin-jsx"</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">isReactiveRoot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">librarySource</span><span class="token operator">:</span> <span class="token string">"vue"</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token comment">// 解析 tsx 时，需要额外引入插件 @babel/plugin-transform-typescript</span>                <span class="token punctuation">[</span><span class="token string">"@babel/plugin-transform-typescript"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">isTSX</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">allExtensions</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>              <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>开发完毕，发布到 npm 社区，插件名：<a href="https://www.npmjs.com/package/@showlotus/babel-plugin-jsx">@showlotus&#x2F;babel-plugin-jsx</a>，源码：<a href="https://github.com/showlotus/babel-plugin-jsx">babel-plugin-jsx</a>。</p><p>最后，就是经典的推广环节。首先是，发给我们领域的架构师，然后果然不出所料，他没搭理我。然后，发给平台一位我经常提 BUG 单的老哥，他也没搭理我。最后，发给我们领域的前端组长，他搭理我了，然后说：想法不错，但是出现的时机太晚了，现在大家的代码都几乎定型了，如果想要别人去改，那是需要风险和成本的。这个我也能理解，只是我是想让平台能不能接纳这个插件，为开发人员提供另一个种选择，可以选择用原先的方式去开发，或者采用这种 <code>JSX</code> 的风格进行开发。随后，他又拉来一位老哥，说他之前做的什么什么，怎么怎么样，有多厉害，但是平台就是给否定了，有多可惜怎么着。</p><p>顺便提一嘴，这位老哥之前干了啥。升级新模版后，为了降低代码重复率，他和另外几个同事，研究出一种面向对象的结构写法，对组件做了各种封装。大致代码风格如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">slots</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">[</span>        FormItem<span class="token punctuation">.</span><span class="token function">generateInput</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">clearable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setEvents</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>讲实话，我真没觉得这种方式能降低多少代码重复率（于是，在升级模版的时候，我就没用这种方法），相比之前那种复杂但清晰的代码逻辑，这种倒是提高阅读难度了。我的不满：最初的那种结构，导致重复率过高的主要原因是，一个对象类型的结构，模版已经固定死了，也就说明每个对象必然都是那些属性，而这种写法通过某个 <em>api</em> 实现，相较于之前的某个属性，没啥本质区别（而且，每个属性的设置，都新增了一个 <em>api</em> ，比如有个 <code>label</code> 属性，就新增一个 <code>setLabel</code> 方法，啊这…），这是首要；其次，原先的结构是有层级结构的，虽然代码可能过长，但是能让人一目了然。但是，这种封装后的结构，把组件的结构给破环了，特别是在面临不同的代码风格，不同的缩进和换行规则时，这个问题就被放大了，总让人感觉代码不整洁。</p><p>随后，这两人就开始对我的这个插件进行 “混合双打”，首先，说这个插件大概率不被架构师那边接受，这个倒还好，不接受就不接受呗。然后张口就来：可能会有性能问题。我当时就不自在了，心想：你都没问这个插件怎么用的，咋就有性能问题了，张口闭口就来呀？我现在严重怀疑他的能力！！！突然感觉到了人与人之间的差距 😓。</p><p>自从在去年五月换了新工作后，虽然说工资涨了点。但是总感觉工作不是很快乐，有点不尽人意，感觉和周围的人相处不到一块去。虽说大家都是搞技术的，但是没看到那种对技术有追求的，平时聊天的话题也几乎和技术无关，感觉缺一个和自己臭味相投的人。之前的工作就很好，和周围同事有说有笑，遇到技术问题就一起探讨交流，自己做的东西也能被大家采纳，并且还给出大量时间让我去做，然后他们兜底，十分怀念那段时光。不知道目前这份工作我能坚持多久，再给自己一年时间叭，如果一年内在这里找不到自己想要的，或者工作还是这样丝毫让自己提不起任何兴趣，那就下一家叭。</p><p>身为一名程序员，技术是立人之本，在一个行业深耕十年，成为专家 💪。</p><p>身为一位青年人，在而立之年之前，做些自己喜欢做的事，不负韶华 🎉。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AST </tag>
            
            <tag> Babel </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相似请求合并</title>
      <link href="/62f55275def4.html"/>
      <url>/62f55275def4.html</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在日常开发中，有一种很常见的接口场景：例如，需要获取 <code>type</code> 为 <code>a</code> 的数据，这时候的接口入参为 <code>&#123; type: [&quot;a&quot;] &#125;</code>。如果需要同时获取 <code>type</code> 为 <code>a</code> 和 <code>b</code> 的数据，则入参为 <code>&#123; type: [&quot;a&quot;, &quot;b&quot;] &#125;</code>。在需要获取多种 <code>type</code> 数据的场景中，显而易见，只在一次请求里调用是最好不过的了。不过，如果后续需要将不同 <code>type</code> 的数据用作不同用途时，也就意味着，在请求成功后，需要再对数据进行拆分。</p><p><img src="/62f55275def4/intro.excalidraw.png" alt="intro"></p><p>在同一个组件下，在请求后拆分，是很方便的。如果是非同一个组件下呢？设想另一种场景，组件 A 需要获取 <code>&#123; type: [&quot;a&quot;] &#125;</code> 的数据，组件 B 需要获取 <code>&#123; type: [&quot;b&quot;] &#125;</code> 的数据，那么可以在两者的父组件中统一调用接口 <code>&#123; type: [&quot;a&quot;, &quot;b&quot;] &#125;</code> ，然后拆分数据后，分别将数据传给对应需要的组件，这种应该是很普遍的解决方案了。</p><p>再设想几个场景，如果组件 A 与 组件 B 不是兄弟组件呢？如果组件 A 需要在另一个组件中复用呢？这种通过在祖先组件内调用接口，获取数据后再传递给对应后代组件的方式，是不是就不太合适了。所以还是尽可能地将某个组件的内部逻辑与其他组件进行解耦，减少它们之间的关联，这样才能方便后续的复用。</p><p>这时候，你可能在想，那每个组件各自调用接口不就好了。但是呢，明明是同一个接口，只是入参中的某个参数不一样，却调用了多次，而且明明是可以同时传入多种类型参数的，嘶，总感觉不是很优雅。<span style="border-bottom: 1px dashed">如果能把这些调用的接口合并成一个接口，获取数据后按照类型进行拆分，然后根据每个调用所需的类型返回对应类型的数据</span>，那该多好呀。那么这能实现吗？当然可以！</p><p><img src="/62f55275def4/idea.excalidraw.png" alt="idea"></p><h4 id="收集类型"><a href="#收集类型" class="headerlink" title="收集类型"></a>收集类型</h4><p>首先，先思考一个问题，如果一个函数同步调用了多次，那么如何只执行一次呢？比如，对于下面这段代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"print"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>毫无疑问会打印 <code>10</code> 次 <code>print</code>。如果只想打印 <code>1</code> 次 <code>print</code>，该如何实现？</p><p>不妨先了解一个小知识点：<em>Vue</em> 中响应式数据更新的优化策略，它的主体思想就是：<span style="border-bottom: 1px dashed">把需要触发的回调函数放进一个任务队列中，同时过滤掉相同的回调，并在下一次事件循环中执行队列中的所有回调。</span>（下面的代码源自：《Vue.js 设计与实现》P63）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个任务队列</span><span class="token keyword">const</span> jobQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 使用 Promise.resolve() 创建一个 promise 实例，我们用它将一个任务添加到微任务队列</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 一个标志代表是否正在刷新队列</span><span class="token keyword">let</span> isFlushing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">function</span> <span class="token function">flushJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果队列正在刷新，则什么都不做</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlushing<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment">// 设置为 true，代表正在刷新</span>  isFlushing <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment">// 在微任务队列中刷新 jobQueue 队列</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    jobQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">job</span> <span class="token operator">=></span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 结束后重置 isFlushing</span>    isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>按照这个思路把 <code>print</code> 改造一下，如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每次调用时，将回调函数添加到 jobQueue 队列中</span>    jobQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>    <span class="token comment">// 调用 flushJob 刷新队列</span>    <span class="token function">flushJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> print <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"print"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>执行结果如下：</p><p><img src="/62f55275def4/test1.png" alt="test1"></p><p>果然只打印了一次！了解这个思路后，现在我们要去收集传入的多种类型。比如，对于下面这段代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span></code></pre><p>虽然 <code>print</code> 调用了 <code>4</code> 次，但是我们期望最后只打印一次，且结果为 <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code>。</p><p>原方法是对传入不同的回调函数进行收集，而现在，已知每次调用的都是同一个函数，首先就想到：要基于回调函数进行封装处理，这个回调函数作为一个入参传入。其次，收集传入的不同类型，原有的任务队列变成了已收集类型的集合。基于这个思路，我们需要进行一些改造，改造后的代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">collectTypes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlushing<span class="token punctuation">)</span> <span class="token keyword">return</span>    isFlushing <span class="token operator">=</span> <span class="token boolean">true</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> typeValues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>types<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token function">callback</span><span class="token punctuation">(</span>typeValues<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>      types<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    types<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>collectTypes</code> 接收一个函数作为入参，同时执行完后返回一个新函数。</li><li>新函数每次执行时，会将传入的 <code>type</code> 收集在内部的 <code>types</code> 中。</li><li>在 <code>promise</code> 实例 <code>p</code> 的 <code>then</code> 方法中处理最终结果，执行 <code>callback</code> 并将收集到的所有类型传入，同时在 <code>finally</code> 方法中清空 <code>types</code>。</li></ul><p>用法如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> print <span class="token operator">=</span> <span class="token function">collectTypes</span><span class="token punctuation">(</span><span class="token parameter">type</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span></code></pre><p>执行结果如下：</p><p><img src="/62f55275def4/test2.png" alt="test2"></p><p>完美符合预期！</p><h4 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h4><p>收集到所有类型后，接下来就是发起请求。为了更具通用性，这个请求方法一定是可灵活配置的，也即它也是一个入参，可以根据需要自定义传入。其次，返回的新函数，要有一个返回值，返回对应类型的数据，这里先暂时返回请求到的所有类型的数据。改造后的代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mergeSimilarRequest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlushing<span class="token punctuation">)</span> <span class="token keyword">return</span>    isFlushing <span class="token operator">=</span> <span class="token boolean">true</span>    p <span class="token operator">=</span> p      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>types<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>        types<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    types<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>换一个更符合气质的名字：<code>mergeSimilarRequest</code> —— <em>合并相似请求</em> 。</li><li>入参调整为 <code>request</code>（发起请求的方法），在最后处理阶段，将所有的类型传给 <code>request</code>，把获取数据的过程交给 <code>request</code>，只需要它的返回结果即可。</li><li>刷新队列时，对 <code>p</code> 进行重新赋值，<code>p</code> 的结果即为 <code>request</code> 的执行结果（请求的所有数据）。</li><li>返回的函数 <code>fetchData</code> 的执行结果：返回当前的 <code>p</code> 实例。</li></ul><p>使用如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"a-1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"a-2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b-1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b-2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"c-1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"c-2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token parameter">types</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发起请求，types:"</span><span class="token punctuation">,</span> types<span class="token punctuation">)</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> types<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> fetchData <span class="token operator">=</span> <span class="token function">mergeSimilarRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">dataA</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"dataA"</span><span class="token punctuation">,</span> dataA<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">dataB</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"dataB"</span><span class="token punctuation">,</span> dataB<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>执行结果如下：</p><p><img src="/62f55275def4/test3.png" alt="test3"></p><p>从执行结果可以看出：<code>request</code> 只执行了一次，并且入参的请求类型是 <code>a</code> 和 <code>b</code>，<code>dataA</code> 与 <code>dataB</code> 都是请求到的所有数据，还需要进行拆分。</p><h4 id="拆分数据"><a href="#拆分数据" class="headerlink" title="拆分数据"></a>拆分数据</h4><p>最后一步，点睛之笔！现在已经知道实例 <code>p</code> 返回的是所有数据，而返回函数 <code>fetchData</code> 的入参里有 <code>type</code>，那么去做数据拆分就十分容易了。代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mergeSimilarRequest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>type <span class="token operator">===</span> type<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>但是，我们还需要考虑通用性的问题，并不是所有的类型字段就叫做 <code>type</code>，也有可能叫做 <code>type1</code>、<code>type2</code>，返回的结果 <code>res</code> 也不一定都是数组类型。所以，不妨把这个拆分规则抽离成一个方法 <code>filterRule</code> ，作为 <code>mergeSimilarRequest</code> 的新入参传入。如下所示：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mergeSimilarRequest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> filterRule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">filterRule</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> type<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>后续测试的时候发现，<code>request</code> 和 <code>filterRule</code> 其实是强关联的，<code>filterRule</code> 的内部逻辑完全依赖于 <code>request</code> 返回数据的类型，于是就把它俩合并成一个入参，最终版代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mergeSimilarRequest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> request<span class="token punctuation">,</span> filterRule <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlushing<span class="token punctuation">)</span> <span class="token keyword">return</span>    isFlushing <span class="token operator">=</span> <span class="token boolean">true</span>    p <span class="token operator">=</span> p      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>types<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>        types<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    types<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">filterRule</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> type<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>最后，测试一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"a-1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"a-2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b-1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b-2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"c-1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"c-2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token parameter">types</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发起请求，types:"</span><span class="token punctuation">,</span> types<span class="token punctuation">)</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> types<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">filterRule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>type <span class="token operator">===</span> type<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  request<span class="token punctuation">,</span>  filterRule<span class="token punctuation">&#125;</span><span class="token keyword">const</span> fetchData <span class="token operator">=</span> <span class="token function">mergeSimilarRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">dataA</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"dataA"</span><span class="token punctuation">,</span> dataA<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">dataB</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"dataB"</span><span class="token punctuation">,</span> dataB<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>执行结果如下：</p><p><img src="/62f55275def4/test4.png" alt="test4"></p><p><em>Goooooooooooooooooooooooooooood ~ ~ ~ ~ ~ ~ ~</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 工具函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 开发环境搭建（持续更新中～）</title>
      <link href="/56f897d68ca6.html"/>
      <url>/56f897d68ca6.html</url>
      
        <content type="html"><![CDATA[<h3 id="2023-x2F-11-x2F-20"><a href="#2023-x2F-11-x2F-20" class="headerlink" title="2023&#x2F;11&#x2F;20"></a>2023&#x2F;11&#x2F;20</h3><h4 id="安装-IDEA"><a href="#安装-IDEA" class="headerlink" title="安装 IDEA"></a>安装 IDEA</h4><ul><li><p>下载地址：<a href="https://macapp.org.cn/app/intellij-idea.html">https://macapp.org.cn/app/intellij-idea.html</a></p></li><li><p>激活码：</p><pre class="language-txt" data-language="txt"><code class="language-txt">ZCB571FZHV-eyJsaWNlbnNlSWQiOiJaQ0I1NzFGWkhWIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQREIiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU1ciLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA3MDFQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi01OTQ5ODgxMjIiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-JNpWl3tvfBw9nYALTrBlJzoryrKHhqmiBxP5IljC6Hlgmb6YlOH8vPngzoyLYa+cGDMVj6fipEpm+BEqIA7oAoBYSu1ZPdzkHAa94apJg+CUQwuw+EJaATdKTANuKYTBsay6WsnrUh8vbIaJpGz19z+uOAc4xRP+gtuyjiwkNECZ6Y9qD+Dx3Gm5xXI3UvKqjPYIhXk23n1pjlxFIUmhD7BumdxF8JHmJJhd/K5FaXQU/K9pMp70GfmSS2KJgxm6SXfslWs/bF5GTY3i1GA6ez05ZyJwsmJMZ1v6W7GWrWNHDLK7i7aXhOLdK9u+pCz+2FpKmadRznpSmixDzj37ig==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</code></pre></li></ul><h4 id="如何安装已损坏的软件"><a href="#如何安装已损坏的软件" class="headerlink" title="如何安装已损坏的软件"></a>如何安装已损坏的软件</h4><p><a href="https://zhuanlan.zhihu.com/p/135948430">https://zhuanlan.zhihu.com/p/135948430</a></p><h3 id="2023-x2F-10-x2F-25"><a href="#2023-x2F-10-x2F-25" class="headerlink" title="2023&#x2F;10&#x2F;25"></a>2023&#x2F;10&#x2F;25</h3><h4 id="录制-Gif：Gifox"><a href="#录制-Gif：Gifox" class="headerlink" title="录制 Gif：Gifox"></a>录制 Gif：<a href="https://gifox.app/">Gifox</a></h4><p>强烈推荐，录制的贼清晰！</p><h3 id="2023-x2F-08-x2F-27"><a href="#2023-x2F-08-x2F-27" class="headerlink" title="2023&#x2F;08&#x2F;27"></a>2023&#x2F;08&#x2F;27</h3><h4 id="使用-Alt-Tab-切换应用：AltTab"><a href="#使用-Alt-Tab-切换应用：AltTab" class="headerlink" title="使用 Alt + Tab 切换应用：AltTab"></a>使用 Alt + Tab 切换应用：<a href="https://alt-tab-macos.netlify.app/">AltTab</a></h4><p><img src="/56f897d68ca6/alt-tab.png" alt="AltTab"></p><h4 id="实用工具网站推荐"><a href="#实用工具网站推荐" class="headerlink" title="实用工具网站推荐"></a>实用工具网站推荐</h4><ul><li><a href="https://appstorrent.ru/">https://appstorrent.ru/</a></li><li><a href="https://www.macat.vip/">https://www.macat.vip/</a></li><li><a href="https://www.better365.cn/">https://www.better365.cn/</a></li><li><a href="https://macapp.org.cn/app/">https://macapp.org.cn/app/</a></li></ul><h3 id="2023-x2F-08-x2F-21"><a href="#2023-x2F-08-x2F-21" class="headerlink" title="2023&#x2F;08&#x2F;21"></a>2023&#x2F;08&#x2F;21</h3><h4 id="任务栏养小猫：Run-Cat"><a href="#任务栏养小猫：Run-Cat" class="headerlink" title="任务栏养小猫：Run Cat"></a>任务栏养小猫：<a href="https://apps.apple.com/us/app/runcat/id1429033973?mt=12">Run Cat</a></h4><img src="/56f897d68ca6/run-cat.gif" class=""><h4 id="屏幕保护：Brooklyn"><a href="#屏幕保护：Brooklyn" class="headerlink" title="屏幕保护：Brooklyn"></a>屏幕保护：<a href="https://github.com/pedrommcarrasco/Brooklyn#manual-hand">Brooklyn</a></h4><p>苹果的各种 LOGO 动画</p><img src="/56f897d68ca6/mac-logo.gif" class="" width="400"><h4 id="格式化磁盘：DiskGenius"><a href="#格式化磁盘：DiskGenius" class="headerlink" title="格式化磁盘：DiskGenius"></a>格式化磁盘：<a href="https://www.diskgenius.cn/download.php">DiskGenius</a></h4><h3 id="2023-x2F-08-x2F-18"><a href="#2023-x2F-08-x2F-18" class="headerlink" title="2023&#x2F;08&#x2F;18"></a>2023&#x2F;08&#x2F;18</h3><h4 id="Mac-使用手册"><a href="#Mac-使用手册" class="headerlink" title="Mac 使用手册"></a>Mac 使用手册</h4><ul><li>快捷键：<a href="https://support.apple.com/zh-cn/HT201236">https://support.apple.com/zh-cn/HT201236</a></li><li>触摸板手势：<a href="https://support.apple.com/zh-cn/HT204895">https://support.apple.com/zh-cn/HT204895</a></li></ul><h4 id="安装-brew"><a href="#安装-brew" class="headerlink" title="安装 brew"></a>安装 <code>brew</code></h4><pre class="language-bash" data-language="bash"><code class="language-bash">/bin/zsh <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh<span class="token variable">)</span></span>"</span></code></pre><h4 id="终端配置"><a href="#终端配置" class="headerlink" title="终端配置"></a>终端配置</h4><ul><li><p>安装 <code>iTerm2</code>：<a href="https://iterm2.com/">https://iterm2.com/</a></p></li><li><p><code>oh-my-zsh</code>：</p><ul><li><p>安装</p><ul><li><p>方式一：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token comment"># 国内镜像</span><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh<span class="token variable">)</span></span>"</span></code></pre></li><li><p>方式二：</p><p>从 <a href="https://github.com/ohmyzsh/ohmyzsh/">GitHub</a> 克隆，然后进入到 <code>tools</code> 目录下执行下面的命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> install.sh</code></pre></li></ul></li><li><p>主题</p><p>可选主题：<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a></p><p>切换主题：</p><ol><li><p>打开配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc</code></pre></li><li><p>更改为对应的主题名</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ZSH_THEME</span><span class="token operator">=</span><span class="token string">"robbyrussell"</span></code></pre></li><li><p>保存并退出</p><pre class="language-bash" data-language="bash"><code class="language-bash">:wq</code></pre></li></ol></li><li><p>安装 <a href="https://github.com/romkatv/powerlevel10k#oh-my-zsh">powerlevel10k</a>，<a href="https://github.com/romkatv/powerlevel10k#manual-font-installation">下载字体</a>。如果重新配置，输入 <code>p10k configure</code>。</p><p>贴一下配置后的 <code>iTerm2</code> 的样子：</p><img src="/56f897d68ca6/terminal.png" class=""></li></ul></li><li><p>语法高亮：<a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md#oh-my-zsh">zsh-syntax-highlighting</a></p></li><li><p>命令补全提示：<a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md#oh-my-zsh">zsh-autosuggestions</a></p></li></ul><h4 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h4><ul><li><p>安装</p><pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">node</span></code></pre></li><li><p>安装版本切换工具 <code>n</code></p><ul><li><p>安装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i n <span class="token parameter variable">-g</span></code></pre></li><li><p>使用</p><ul><li><p>安装指定版本，版本号不带 <code>v</code> 前缀</p><pre class="language-bash" data-language="bash"><code class="language-bash">n <span class="token punctuation">[</span>版本号<span class="token punctuation">]</span></code></pre><p>如果安装报错没权限，使用 <code>sudo</code> 命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> n <span class="token punctuation">[</span>版本号<span class="token punctuation">]</span></code></pre><p>如果安装版本超时，使用阿里镜像（贼快～）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token assign-left variable">NODE_MIRROR</span><span class="token operator">=</span>http://npm.taobao.org/mirrors/node n <span class="token punctuation">[</span>版本号<span class="token punctuation">]</span></code></pre></li><li><p>切换版本</p><pre class="language-bash" data-language="bash"><code class="language-bash">n</code></pre><p>然后出现一个界面，按照提示操作即可</p></li></ul></li></ul></li></ul><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><ul><li><p>安装</p><pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span></code></pre></li><li><p>打开 <code>.gitconfig</code> 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">open</span> ~/.gitconfig</code></pre></li><li><p>全局忽略 <code>.DS_Store</code></p><p>新建全局忽略配置文件 <code>.gitignore_global</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> ~/.gitignore_global</code></pre><p>写入内容</p><pre class="language-bash" data-language="bash"><code class="language-bash">.DS_Store**/.DS_Store.DS_Store?</code></pre><p>全局配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.excludesfile ~/.gitignore_global</code></pre><p>删除仓库已有的 <code>.DS_Store</code> 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> .DS_Store <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> --ignore-unmatch</code></pre></li><li><p>显示隐藏文件快捷键：<code>⌘ + Shift + .</code></p></li><li><p>生成 SSH</p><ul><li><p>打开终端执行下方命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"xxx@qq.com"</span></code></pre><p>紧接着会出现提示，默认创建在 <code>/Users/xxx/.ssh/id_rsa</code> 路径下，然后输入两次密码</p><pre class="language-bash" data-language="bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/Users/xxx/.ssh/id_rsa<span class="token punctuation">)</span>:Created directory <span class="token string">'/Users/xxx/.ssh'</span><span class="token builtin class-name">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:</code></pre></li><li><p>打开 <code>.ssh/id_rsa.pub</code> 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> .ssh/id_rsa.pub</code></pre><p>复制内容，然后再在 <code>GitHub</code> -&gt; <code>Settings</code> -&gt; <code>SSH and GPG keys</code> 里新建 <code>SSH key</code>。</p></li><li><p>验证</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com</code></pre><p>出现下面的内容，则表示连接成功。</p><pre class="language-bash" data-language="bash"><code class="language-bash">Hi xxx<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.</code></pre></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重复请求优化</title>
      <link href="/1b270b7a425f.html"/>
      <url>/1b270b7a425f.html</url>
      
        <content type="html"><![CDATA[<p>设想一种场景，有两个组件，这两个组件在初始化阶段，都需要调用同一个 <em>API</em> 接口去获取数据。为了防止请求冗余，可以把两个组件的请求都挪到父组件中，由父组件统一调用一次请求，然后再将响应的数据结果传给两个子组件。这种方法应该是最常见的，不过它也有一个局限性条件：两个组件必须有一个共同的祖先组件，如果这两个组件是同级的兄弟组件倒也还好，如果非同级，那么数据的传参就会有些麻烦了。那么还有其他办法吗？当然是有的。</p><p>我们可以换个思路，每个组件还是保持原有的业务逻辑不变，从请求接口处做文章。既然是同一个接口调用了两次，而且还是返回了相同的请求结果，那么不妨在第一次时调用成功时，就把请求结果缓存起来，等到第二次再调用时，直接返回缓存的数据。按照这个思路可以写出第一版的代码（这里用了 <em>TS</em> 方便查看参数的类型）：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 缓存请求的响应结果 * 把发起请求的 Promise 对象挂载在原型对象上 * @param request 请求函数 */</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">cacheRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function-variable function">request</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>首先 <code>cacheRequest</code> 函数，需要接收一个参数 <code>request</code>，<code>request</code> 是一个返回结果为 <em>Promise</em> 对象的函数。<code>cacheRequest</code> 执行完后返回一个新的匿名函数。</li><li>然后，在匿名函数的内部，先判断 <code>request</code> 的原型对象上是否有 <code>cache</code>（这里的 <code>cache</code> 使用了 <code>Symbol</code> 类型，确保键名唯一）。也即，是否有缓存过的请求结果，如果没有，说明是第一次调用，则将 <code>request</code> 的执行结果存到缓存里。如果有缓存，则直接返回缓存。</li><li>可以看到，缓存也是一个 <em>Promise</em> 类型。在同时调用多次请求时，只要在第一次调用执行后，已经把 <em>Promise</em> 存到缓存里了，后续的请求返回的也是缓存里的 <code>Promise</code>，从而保证多个请求都指向同一个 <em>Promise</em> ，也即只会调用一次 <em>API</em> 接口。</li><li>这里需要注意一点，由于需要往 <code>request</code> 的原型对象上挂载缓存，所以 <code>request</code> 不能是箭头函数。因为箭头函数没有 <code>this</code>，也就意味着没有原型对象。</li></ul><p>小测一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">cacheRequest</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fetch request"</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> newRequest <span class="token operator">=</span> <span class="token function">cacheRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/1b270b7a425f/version1.png" alt="Alt text"></p><p>可以看到虽然 <code>newRequest</code> 调用了三次，但是 <code>fetch request</code> 只打印了一次，也就是说 <code>request</code> 只调用了一次，符合预期！但是，最后一次 <code>newRequest</code> 的调用，是在 <em>3</em> 秒后调用的，也是走的缓存，没有重新执行。仔细思考一下，后续无论什么时候调用 <code>newRequest</code> 都会使用缓存里的数据，不会重新调用请求了，这显然是不合理的。我们还需要加个缓存的过期时间，超过这个时间，就重新发起新的请求。第二版如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 缓存请求的响应结果 * 把发起请求的 Promise 对象挂载在原型对象上 * 保证在 cacheTime 时间间隔内的多次请求，只会调用一次 * @param request 请求函数 * @param cacheTime 最大缓存时间（单位毫秒） */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">cacheRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function-variable function">request</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span> cacheTime <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> lastTime <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span> <span class="token operator">||</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>lastTime<span class="token punctuation">]</span> <span class="token operator">>=</span> cacheTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>lastTime<span class="token punctuation">]</span> <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>首先，<code>cacheRequest</code> 新增一个入参 <code>cacheTime</code>，用于设置过期时间，默认为 <em>1</em> 秒。</li><li>其次，在原型对象上新增了一个 <code>lastTime</code> 属性，用来记录最后一次调用的时间。</li><li>当缓存为空，或者当前时间距离上一次调用时间超过缓存过期时间时，更新 <code>cache</code> 和 <code>lastTime</code> 。</li></ul><p>再来小测一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">cacheRequest</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> cacheTime <span class="token operator">=</span> <span class="token number">1000</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> lastTime <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span> <span class="token operator">||</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>lastTime<span class="token punctuation">]</span> <span class="token operator">>=</span> cacheTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>lastTime<span class="token punctuation">]</span> <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> request<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>cache<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fetch request"</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> newRequest <span class="token operator">=</span> <span class="token function">cacheRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">newRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>newRequest<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span></code></pre><p><img src="/1b270b7a425f/version2.png" alt="Alt text"></p><p>这一次，<code>fetch request</code> 打印了两次，符合预期，完美！</p><blockquote><p>2024&#x2F;10&#x2F;25 更新：入参 <code>request</code> 支持箭头函数。</p></blockquote><pre class="language-diff" data-language="diff"><code class="language-diff">function cacheRequest(request, cacheTime = 1000) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const cache = Symbol("cache")</span><span class="token prefix unchanged"> </span><span class="token line"> const lastTime = Symbol("lastTime")</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> return function (...args) &#123;</span><span class="token prefix deleted">-</span><span class="token line">   if (!request.prototype[cache] || Date.now() - request.prototype[lastTime] >= cacheTime) &#123;</span><span class="token prefix deleted">-</span><span class="token line">     request.prototype[cache] = request(...args)</span><span class="token prefix deleted">-</span><span class="token line">     request.prototype[lastTime] = Date.now()</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> return function innerFn(...args) &#123;</span><span class="token prefix inserted">+</span><span class="token line">   if (!innerFn.prototype[cache] || Date.now() - innerFn.prototype[lastTime] >= cacheTime) &#123;</span><span class="token prefix inserted">+</span><span class="token line">     innerFn.prototype[cache] = request(...args)</span><span class="token prefix inserted">+</span><span class="token line">     innerFn.prototype[lastTime] = Date.now()</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   return request.prototype[cache]</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   return innerFn.prototype[cache]</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span>&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 工具函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大余额法</title>
      <link href="/6247c0cb9321.html"/>
      <url>/6247c0cb9321.html</url>
      
        <content type="html"><![CDATA[<p>当开发一些图表类页面时，经常需要对一组数据求百分比，而像是常用的 <em>Echarts</em> 图表，在内部已经计算妥当了，保证一组数据在计算完百分比之后，这些百分比相加后仍然等于 <em>100%</em> 。而这种计算百分比的算法之一就是 —— 最大余额法。</p><center><p><b>核心思想就是，根据每部分所占比例的大小，按照从高到低的顺序去分配剩余部分。</b></p></center><p>比如，一组数据 <code>[ 4, 4, 3 ]</code>，所占百分比为 <code>[ 36.36363636363636687, 36.36363636363636687, 27.2727272727272734 ]</code>。先取出整数部分，得到 <code>[ 36, 36, 27 ]</code>，累加后总和为 <code>99</code>，还剩余 <code>1</code>。接下来再取出小数部分，得到 <code>[ 0.36363636363636687, 0.36363636363636687, 0.2727272727272734 ]</code>。把最后剩余的 <code>1</code> 根据小数部分的大小，优先加到最大的部分，如果有多个，则索引在前的优先级高。这里就是加到索引为 <code>0</code> 的位置上，最终得到结果 <code>[ 37, 36, 27 ]</code>。如果有多个剩余，则同理，每次找最大的小数部分，然后追加 1。需要注意：已经追加过 1 的部分不能再次追加。</p><blockquote><p>有同学可能会有疑惑，会不会出现：有 N 个数，剩余为 M，且 M &gt; N ？答案是 <strong>否定</strong> 的。因为 M 等于 N 个数的小数部分之和，而且小数部分都小于 1，N 个小于 1 的数之和一定小于 N 。所以，M &lt; N 恒成立。也就意味着，每个部分最多追加一次余额，不会出现追加两次的情况。</p></blockquote><p>理清思路后，先来实现一个简单版本。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 计算各个数值所占百分比 * @param &#123;number[]&#125; data 源数据 * @returns &#123;number[]&#125; */</span><span class="token keyword">function</span> <span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 求和</span>  <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment">// 初始化剩余为 100</span>  <span class="token keyword">let</span> remainSum <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// 记录整数部分</span>  <span class="token keyword">const</span> integerPart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 记录小数部分</span>  <span class="token keyword">const</span> decimalPart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 因为要计算百分比，需要先乘以 100</span>    <span class="token keyword">const</span> newVal <span class="token operator">=</span> v <span class="token operator">*</span> <span class="token number">100</span>    <span class="token comment">// 计算实际的百分比</span>    <span class="token keyword">const</span> percent <span class="token operator">=</span> newVal <span class="token operator">/</span> sum    <span class="token comment">// 得到整数部分</span>    <span class="token keyword">const</span> integer <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span>    <span class="token comment">// 得到小数部分</span>    <span class="token keyword">const</span> decimal <span class="token operator">=</span> percent <span class="token operator">-</span> integer    <span class="token comment">// 将整数、小数部分分别存入对应的数组中</span>    integerPart<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span>    decimalPart<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span>    <span class="token comment">// 更新剩余，减去当前的整数部分</span>    remainSum <span class="token operator">-=</span> integer  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果剩余大于 0，循环去消减剩余</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>remainSum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 找到小数部分数组中最大值的索引</span>    <span class="token keyword">const</span> maxIdx <span class="token operator">=</span> <span class="token function">findMaxValIndex</span><span class="token punctuation">(</span>decimalPart<span class="token punctuation">)</span>    <span class="token comment">// 将整数部分对应索引的值加 1</span>    integerPart<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment">// 将本次找到的小数部分置为负数，防止重复查找</span>    decimalPart<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment">// 剩余减 1</span>    remainSum<span class="token operator">--</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 整数部分就是最后的结果</span>  <span class="token keyword">return</span> integerPart  <span class="token comment">// 计算当前数组之和</span>  <span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=></span> prev <span class="token operator">+</span> sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 查找当前数组中最大值索引</span>  <span class="token keyword">function</span> <span class="token function">findMaxValIndex</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> maxIdx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        maxIdx <span class="token operator">=</span> i      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxIdx  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>小测一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [ 30, 30, 40 ]</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [ 18, 18, 23, 18, 23 ]</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [ 37, 36, 27 ]</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [ 100 ]</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [ 17, 17, 17, 17, 16, 16 ]</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [ 53, 35, 10, 2 ]</span></code></pre><p>效果不错，<em>very nice</em> ～</p><p>接下来，再加一个功能，因为有时候百分比不一定都是整数，也需要保留到小数点后几位。新增一个参数 <code>precision</code>，默认为 <code>0</code>，即保留到整数位，若为 <code>2</code>，则保留到小数点后 <code>2</code> 位。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 计算各个数值所占百分比 * @param &#123;number[]&#125; data 源数据 * @param &#123;number&#125; precision 精度，默认为 0，即保留到整数位 * @returns &#123;number[]&#125; */</span><span class="token keyword">function</span> <span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 除了基本的需要乘以 100 之外，还需要根据精度大小，再乘以 10^n 次方</span>  <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> precision<span class="token punctuation">)</span>  <span class="token comment">// 初始化剩余为基数值</span>  <span class="token keyword">let</span> remainSum <span class="token operator">=</span> base  <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">const</span> integerPart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> decimalPart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 不再乘以 100，这里乘以基数</span>    <span class="token keyword">const</span> newVal <span class="token operator">=</span> v <span class="token operator">*</span> base    <span class="token keyword">const</span> percent <span class="token operator">=</span> newVal <span class="token operator">/</span> sum    <span class="token keyword">const</span> integer <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span>    <span class="token keyword">const</span> decimal <span class="token operator">=</span> percent <span class="token operator">-</span> integer    integerPart<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span>    decimalPart<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span>    remainSum <span class="token operator">-=</span> integer  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>remainSum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> maxIdx <span class="token operator">=</span> <span class="token function">findMaxValIndex</span><span class="token punctuation">(</span>decimalPart<span class="token punctuation">)</span>    integerPart<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    decimalPart<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span>    remainSum<span class="token operator">--</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 根据精度，挪动小数点位置</span>  <span class="token keyword">return</span> integerPart<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> precision<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 计算当前数组之和</span>  <span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=></span> prev <span class="token operator">+</span> sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 查找当前数组中最大值索引</span>  <span class="token keyword">function</span> <span class="token function">findMaxValIndex</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> maxIdx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        maxIdx <span class="token operator">=</span> i      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxIdx  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>最后测试一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 30, 30, 40 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 17.65, 17.65, 23.53, 17.64, 23.53 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 36.364, 36.363, 27.273 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 100 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 16.67, 16.67, 16.67, 16.67, 16.66, 16.66 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getPercentValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 52.632, 35.088, 10.526, 1.754 ]</span></code></pre><p>完美 ～～～</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 工具函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两周年啦！！</title>
      <link href="/3fdebb2ba4a6.html"/>
      <url>/3fdebb2ba4a6.html</url>
      
        <content type="html"><![CDATA[<p><img src="/3fdebb2ba4a6/banner.jpg" alt="banner.jpg"></p><blockquote><p>这篇其实是中秋节那晚，在心情很糟糕的情况下，写了该篇。</p></blockquote><p>匆匆忙忙又一年时间过去了，这一年我愿称之为 “开源丰收年” ，累计写了 <em>22</em> 篇文章（去年才 <em>12</em> 篇），写了不少组件和小工具，例如（我要开始吟唱啦～～～）：</p><ol><li>Vue 指令：<code>v-set-title-attr</code>；</li><li>ViewDesign 扩展组件：<code>ivu-select-union</code>；</li><li>ViewDesign 扩展组件：<code>ivu-input-number-union</code>；</li><li>Vue 指令：<code>v-resize</code>；</li><li>命令行工具：<code>npm-pack-all</code>；</li><li>Prettier 插件：全局替换资源引入路径；</li><li>ViewDesign 主题换肤；</li><li>VueMixinsLoader：类似 Mixin 功能的 Loader；</li><li>Turboui i18n：一个国际化提示插件；</li><li>基于 ViewDesign (<em>v4.7.0</em>) 扩展的组件库：<code>ivu-extends</code>。</li></ol><p>我心中的两周年 <em>No.1</em> 是 <big><strong><a href="https://showlotus.github.io/8f0e89da4a3b.html">ViewDesign 主题换肤</a></strong></big> —— 思路刁钻，实现巧妙，使用简单。</p><p>其实在 <em>21</em> 年，也尝试写过一些小组件发布到了 <em>npm</em> 社区，不过做的有点 <em>low</em> ，后续也就没咋仔细关注了。然后从 <em>22</em> 年 <em>11</em> 月开始在 <em>GitHub</em> 发布了第一个插件，命运的齿轮开始转动，仿佛打开了新世界的大门，转而后续一发不可收拾，陆陆续续又搞了许多开源的工具和插件发布到 <em>GitHub</em> 上。</p><p>还记得某一天在 <em>GitHub</em> 首页的通知里，看到一位陌生人 <em>star</em> 了项目 <em>VueMixinsLoader</em> 。当时可激动了，在没有宣传的前提下，竟然有人 <em>star</em> 了自己的项目，哇塞！！！本着只要有一个人用，就要维护到底的原则，当天就决定把项目里一个迟迟待优化的点给优化了，随即在那个周末发布了 <em>VueMixinsLoader v1.0.2</em> 。</p><p>虽然现在写的大多数项目都没人看到，但我还是依然热爱这种生活，用自己的双手去实现一个又一个脑洞大开的想法。我还列了一个代办列表，上面还有好多有意思的项目等着实现呢 ～ 生命不息，<em>Coding</em> 不止 ～</p><p>其实，这一整年几乎 <em>70%</em> 的文章都是和工作相关，在工作中发现问题，仔细分析问题，研究解决方案并实现，记录实现过程，最后输出文档。我想这才是工作的意义吧，更能驱动自己去进步，想比自己私下搞的项目，前者偏务实，后者偏热爱。两者具在，是不是就是 “完美人生” 了呢？</p><p>我一直觉得疲于工作的生活，和工厂里流水线上的机器没什么两样。上面下发任务，底下的人去执行任务，虽然有些东西明知道完成不了，或者做起来压根不行，还硬着头皮去做，久而久之，就成了一个 <em>Work Machine</em> ，根本不想再动多余的脑子，只想立刻完成任务。</p><p>之前在某次会议上，一位同事说手头上的某个任务，如果人工去做，有点费事费力，他想实现一个自动化的工具去简化这些复杂的操作。但是，如果去做的话，必然需要花费额外的开发时间去实现这个工具。他纠结的点在于，是否应该给 <em>leader</em> 提这个事，而且做这个事，项目上有没有奖励机制什么的。</p><p>我说一下我的观点吧，如果某些事情和利益挂上了钩，那么它就会变味。就比如，你去向 <em>leader</em> 申请，我要做这个自动化工具，他可能会同意，但是会加上一个期限，毕竟这是公司，利益至上，你不能无期限地搞这个东西。加上了期限之后，如同在脖子上架了一个枷锁，这种无形的压力很影响最后的成果。而如果自己私下搞这个工具，每天有空就做一点点，自由自在，相比前者，我觉得后者做出来的东西更好一点。</p><p>在会议上，我也表达了自己的看法，做这些小工具的初衷：每天做的任务，大家都能做，那么如何体现你的优势。说实话，目前做的工作，很难挑出来几条能往简历上写的。去做这些小工具也就是为了能丰富自己的简历，能多写几条能让人眼前一亮的工作经历。所以，工作中还是需要勤于思考，如果你想，那就去做。而自己私下做的那些项目，大多数就是写点有意思的东西（自己的一些奇思妙想），落到实处的东西还是偏少的。有时候，闲下来时，还是倾向于做工作上有关的东西，毕竟能用到，效果也能看得到。</p><p>有时候，自己也想歇一歇，做点和 <em>Coding</em> 无关的事，可是迟迟没想好该如何去做，该怎么去平衡。那就先暂时拟定一个计划吧，把自己列的那些待办事项，评估一下大约需要的预估工作量，每完成一个就奖励自己歇一天。早睡早起和每天睡前看书，也要重新坚持起来。不被工作压倒，热爱自己所爱，我还是那个我！明年再见啦 ～ 👋👋 ～</p>]]></content>
      
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数相乘</title>
      <link href="/63b240b52539.html"/>
      <url>/63b240b52539.html</url>
      
        <content type="html"><![CDATA[<p>由于 <code>JS</code> 最大整数为 <code>2 ^ 53 - 1</code>，最大长度也就是 <code>16</code> 位，当进行一些高精度计算时，容易造成精度丢失的问题。平常对于一些大数值的数据，一般都用 <code>String</code> 类型存储。而使用 <code>String</code> 类型，当进行四则运算时，就需要进行特殊处理，本篇就来实现一下两个大数的相乘。</p><p>两个整数的大数相乘，这是一道经典的算法题了，参考力扣 <a href="https://leetcode.cn/problems/multiply-strings/description/">43. 字符串相乘</a>。而这里需要考虑小数的场景，思路其实很简单，就是先记录两个数字的小数位数，然后当作整数字符串去做乘法运算，最后再将小数点复原。</p><p>第一步，记录小数位数。比如，对于一串数字 <code>123456.789</code>，需要得到小数的位数（<code>bit</code>）-&gt; <code>3</code> 和移除小数点后的结果 （<code>integer</code>）-&gt; <code>123456789</code>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 解析字符串 * @param &#123;string&#125; numStr * @returns */</span><span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">numStr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> bit  <span class="token keyword">let</span> integer  <span class="token keyword">const</span> potIdx <span class="token operator">=</span> numStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>potIdx <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 去除末尾无效的 0</span>    numStr <span class="token operator">=</span> numStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token comment">// 记录小数位数</span>    bit <span class="token operator">=</span> numStr<span class="token punctuation">.</span>length <span class="token operator">-</span> potIdx <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment">// 移除首位 0、小数点以及后面跟随的 0</span>    integer <span class="token operator">=</span> numStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^0\.0*|\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    bit <span class="token operator">=</span> <span class="token number">0</span>    integer <span class="token operator">=</span> numStr  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> bit<span class="token punctuation">,</span> integer <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>测试一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1.000800"</span><span class="token punctuation">)</span> <span class="token comment">// &#123; bit: 4, integer: '10008' &#125;</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"100.0008"</span><span class="token punctuation">)</span> <span class="token comment">// &#123; bit: 4, integer: '1000008' &#125;</span></code></pre><p>可以看到，<code>bit</code> 和 <code>integer</code> 都不包含末尾的无效 <code>0</code>。</p><p>第二步，将两个整数字符串相乘，借鉴了力扣的官方题解 <a href="https://leetcode.cn/problems/multiply-strings/solutions/372098/zi-fu-chuan-xiang-cheng-by-leetcode-solution/">43. 字符串相乘 - 方法二：做乘法</a>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 整型字符串相乘 * @param &#123;string&#125; num1 * @param &#123;string&#125; num2 * @return &#123;string&#125; */</span><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">===</span> <span class="token string">"0"</span> <span class="token operator">||</span> num2 <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"0"</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> n1 <span class="token operator">=</span> num1<span class="token punctuation">.</span>length  <span class="token keyword">const</span> n2 <span class="token operator">=</span> num2<span class="token punctuation">.</span>length  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> n2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> k <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Number</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> m <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span>      res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">+=</span> k      <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>        res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">10</span>        m<span class="token operator">--</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 移除前导 0</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>第三步，将解析后的结果相乘。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 字符串相乘 * @param &#123;string&#125; num1 * @param &#123;string&#125; num2 * @returns &#123;string&#125; */</span><span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">bit</span><span class="token operator">:</span> bit1<span class="token punctuation">,</span> <span class="token literal-property property">integer</span><span class="token operator">:</span> integer1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">bit</span><span class="token operator">:</span> bit2<span class="token punctuation">,</span> <span class="token literal-property property">integer</span><span class="token operator">:</span> integer2 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>  <span class="token comment">// 得到两个整型字符串相乘的结果</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span> integer2<span class="token punctuation">)</span>  <span class="token comment">// 需要复原的小数总位数</span>  <span class="token keyword">const</span> bit <span class="token operator">=</span> bit1 <span class="token operator">+</span> bit2  <span class="token comment">// 如果小数位数小于结果的长度，说明实际结果大于 0，</span>  <span class="token comment">// 直接在结果字符串的倒数第 bit 位插入小数点（这里用了正则去实现）</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>bit <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\d&#123;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bit<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&#125;$</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">".$&amp;"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果小数位数大于等于结果的长度，说明实际结果小于 1，</span>    <span class="token comment">// 除了结果要以 "0." 开头外，还需要额外在小数点后补 0</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>bit <span class="token operator">-</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>res<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>测试一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"0.8"</span><span class="token punctuation">)</span> <span class="token comment">// 0.8</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token string">"0.8"</span><span class="token punctuation">)</span> <span class="token comment">// 80.0</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token string">"1312.123"</span><span class="token punctuation">,</span> <span class="token string">"12312.12300"</span><span class="token punctuation">)</span> <span class="token comment">// 16155019.767129</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token string">"0.001312"</span><span class="token punctuation">,</span> <span class="token string">"12312.0012300"</span><span class="token punctuation">)</span> <span class="token comment">// 16.15334561376</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token string">"0.0000000001312"</span><span class="token punctuation">,</span> <span class="token string">"12312.12300"</span><span class="token punctuation">)</span> <span class="token comment">// 0.0000016153505376</span></code></pre><p>完美！最后汇总到一个方法里，整体代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 字符串相乘 * @param &#123;string&#125; num1 * @param &#123;string&#125; num2 * @returns &#123;string&#125; */</span><span class="token keyword">function</span> <span class="token function">stringMultiple</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">bit</span><span class="token operator">:</span> bit1<span class="token punctuation">,</span> <span class="token literal-property property">integer</span><span class="token operator">:</span> integer1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">bit</span><span class="token operator">:</span> bit2<span class="token punctuation">,</span> <span class="token literal-property property">integer</span><span class="token operator">:</span> integer2 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span> integer2<span class="token punctuation">)</span>  <span class="token keyword">const</span> bit <span class="token operator">=</span> bit1 <span class="token operator">+</span> bit2  <span class="token keyword">if</span> <span class="token punctuation">(</span>bit <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\d&#123;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bit<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&#125;$</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">".$&amp;"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>bit <span class="token operator">-</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>res<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 解析字符串   * @param &#123;string&#125; numStr   * @returns   */</span>  <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">numStr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> bit    <span class="token keyword">let</span> integer    <span class="token keyword">const</span> potIdx <span class="token operator">=</span> numStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>potIdx <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 去除末尾无效的 0</span>      numStr <span class="token operator">=</span> numStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>      <span class="token comment">// 记录小数位数</span>      bit <span class="token operator">=</span> numStr<span class="token punctuation">.</span>length <span class="token operator">-</span> potIdx <span class="token operator">-</span> <span class="token number">1</span>      <span class="token comment">// 移除首位 0、小数点以及后面跟随的 0</span>      integer <span class="token operator">=</span> numStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^0\.0*|\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      bit <span class="token operator">=</span> <span class="token number">0</span>      integer <span class="token operator">=</span> numStr    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> bit<span class="token punctuation">,</span> integer <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 整型字符串相乘   * @param &#123;string&#125; num1   * @param &#123;string&#125; num2   * @return &#123;string&#125;   */</span>  <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">===</span> <span class="token string">"0"</span> <span class="token operator">||</span> num2 <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"0"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> n1 <span class="token operator">=</span> num1<span class="token punctuation">.</span>length    <span class="token keyword">const</span> n2 <span class="token operator">=</span> num2<span class="token punctuation">.</span>length    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> n2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> k <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Number</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> m <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span>        res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">+=</span> k        <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          res<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>          res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">10</span>          m<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 移除前导 0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 工具函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Turboui i18n 的心路历程</title>
      <link href="/eed75cca7a1a.html"/>
      <url>/eed75cca7a1a.html</url>
      
        <content type="html"><![CDATA[<p><img src="/eed75cca7a1a/image.png" alt="Alt text"></p><p>历经一个月，从无到有，第一次尝试开发一个 <em>VS Code</em> 插件，迭代了 9 个版本，是时候完结撒花啦 🎉🎉。</p><p>萌生这个想法是在一次新任务的开发中：要对代码中的某些提示类的字段进行整改，加上国际化配置。当时就敏锐地发现了一个问题：改成国际化配置后，对后期的开发以及维护很不友好。于是就开始想，有什么手段可以缓解这一痛点？</p><p>最开始的想法是，通过对原有的国际化调用方法 <code>$t</code> 写一个类型扩展去实现。对第三方库写一个类型扩展其实是可行的，不过这里卡在了 <code>$t</code> 的原始类型有些复杂，导致扩展起来很麻烦。很难实现既想保留原类型，又想扩展，结果就给 <em>PASS</em> 掉了。我的理想效果是，基于整个项目下的 <code>.json</code> 配置文件，去生成一个 <code>type.d.ts</code> 类型文件，基于 <em>VS Code</em> 提供的类型提示功能，在每个调用的地方，当鼠标悬浮时，就能看到对应国际化文本了。类型文件的生成肯定是需要脚步的，而且每当 <code>.json</code> 文件变化时，就要重新去生成类型文件，可能就是这一点不好。而且，项目开发者又太多，不太好保持一致性。多一个文件，就是多一个负担。</p><p>接下来，重新思考。要做的这个工具，尽可能不需要开发人员有太多操作，给了就能直接用，而且简单上手。于是，那就开发一个 <em>VS Code</em> 插件吧。在不久之前，我就一直有一个计划，开发一个 <em>VS Code</em> 插件（自定义代码行背景色），一直不知道从何搞起，这次刚好可以拿这个试试水。</p><p>首先，插件的展示形式，借鉴了 <em>UnoCSS</em> ：在内置的类名下显示一个下划虚线。鼠标滑入时的提示内容，就以键值对的形式展示，而且配置文件的内容是啥就展示啥。大致目标有了，然后就开始初代版本的开发。</p><p>每天下班回去写一点，日常在公司摸鱼的时候再写点，遇见不会的知识点，就问 <em>ChatGPT</em> 和查官方文档，就这样捯饬了 5 天，初代版本问世了。还记得那天是周五，下午我还臭美地往群里扔了一张截图，然后同事说，好东西，拿来用用。我说，下周一发布。先吊波胃口，嘿嘿 😁。</p><p>等到周一，如愿发布。同事用了用后，提了一个建议，想要一个点击跳转的功能，想了想确实不错，安排！然后又是潜心开发的一周，同样又是周一发布，同事都好奇，我哪来的时间。另一个同事说我，既没女朋友，也没猫，可不就这样。我就笑笑不说话 🫢。</p><p>接下来，就是在工作群里推广。推广的那天，会时不时点到插件首页看，当前下载量是多少。看了几回，来来回回就 20 人不到，也就没咋关注了。直到，有一天领域的前端组组长找我，问我可不可以做一次分享，给大家讲一下这个插件是如何开发出来的，还给我说，这个插件很不错，到时候可以推到平台上，写在他们的官方文档里。我听完，还挺高兴滴，就答应了。分享那天，讲完了之后，果然下载量多了一点。事后，一个同事找我，给我提了一个问题，自己试了试，果然复现了，是个 <em>BUG</em> ，然后就立马修复。后面一段时间，就一直在加点小优化，有时间就做一点。然后有一天，群里一个老哥，开始推广我的插件，那天下载量突增，破百啦 🎉🎉🎉。事后又迭代了一个版本，加上了自己心心念的快捷提示功能。</p><p>看到自己做的东西，能被好多人用，还是很开心滴，这就是身为程序员的快乐吧。一个月的更新迭代，从无到有，也蛮快的。这一路下来，感想最深的就是：眼界很重要。首先你得知道这东西能不能做，然后才能去做。而软件，互联网上开源知识一大堆，只要想学，没有学不会的。如果热爱，那就坚持吧，做你所想，不负热爱！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 使用视频做为屏幕保护程序</title>
      <link href="/04d28093fddc.html"/>
      <url>/04d28093fddc.html</url>
      
        <content type="html"><![CDATA[<p>最近在搭建 Mac 环境，然后翻到一个屏幕保护程序：<a href="https://github.com/pedrommcarrasco/Brooklyn/tree/master">Brooklyn</a>，用 18 年苹果征集的各种 logo 做为屏幕保护程序，看起来十分好看，于是乎就整了一个。</p><img src="/04d28093fddc/mac-logo.gif" class=""><p>平时在家用 Mac，公司电脑是 Windows，最近打算把公司电脑加点 Mac 的特色。比如：字体。字体比较好改，可以用一个工具：<a href="https://github.com/Tatsu-syo/noMeiryoUI">noMeiryoUI</a>，直接把系统字体都统一改了，贼方便。</p><p>而最近新入坑的屏幕保护程序，就想着能不能把这个也搬到 Windows 上。然后，就开始网上搜解决方案，甚至一度打算自己手搓一个。好在经过一番搜索后，发现了一个工具：<a href="https://github.com/OrangeJedi/Aerial/">Aerial</a>。这个工具会将 AppleTV 拍的一些高清视频用作屏幕保护程序，当然也支持自定义视频，重点是 “自定义” 这个很关键！</p><p>在 <a href="https://github.com/OrangeJedi/Aerial/releases">Releases</a> 页面找到这个，点击就能下载。</p><img src="/04d28093fddc/aerial-releases.png" class=""><p>下载完后，把下载后的文件挪到 <code>C:\Windows\SysWOW64</code> 目录下，然后右键点击【安装】。</p><img src="/04d28093fddc/aerial-install.png" class=""><p>安装完后，会打开一个配置面板。配置还挺多的，可以自己摸索摸索。</p><img src="/04d28093fddc/aerial-multi-screen.png" class=""><p>默认会去加载内部提供的视频，这里把它们都取消勾选。不然，自定义的视频可能显示不出来。</p><img src="/04d28093fddc/aerial-deselect.png" class=""><p><a href="https://github.com/pedrommcarrasco/Brooklyn/blob/master/Brooklyn/Resources/Animations/original.mp4">点击这里</a> 下载 logo 动画视频（翻人家仓库代码，突然翻出来一个视频，哈哈～），下载完成后，建议把这个视频单独放在一个文件夹下。</p><p>然后回到 Aerial 的配置面板，在 <em>Custom Videos</em> 一栏，添加视频文件的文件夹，选中刚才下载视频所在的文件夹。</p><img src="/04d28093fddc/aerial-custom-video.png" class=""><p>配置里会自动检测出视频文件。然后点击右上角的 <em>Preview</em> ，可以看下效果。</p><img src="/04d28093fddc/aerial-preview.png" class=""><p>如果后续还想更改配置，可以在 Windows 的 <em>开始</em> 处，搜索 “屏幕保护程序”，然后再进行配置。</p><img src="/04d28093fddc/aerial-update-config.png" class=""><p>配置完后，搭配公司两个 27 寸的显示屏，简直不要太好看啦！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> screensaver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Turboui i18n：一个国际化提示插件</title>
      <link href="/97dd1aa5b16b.html"/>
      <url>/97dd1aa5b16b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间，项目在做国际化整改，即要把之前显示中文的地方，换成根据当前用户所选语言，展示成对应的文字。项目里也有用到国际化的插件，只需要把配置文件写好（当语言为中文时，展示什么文字；当语言为英语时，展示什么文字），放在 <code>i18n</code> 目录下，然后调用插件提供的方法，剩下的就无需操心啦。</p></blockquote><img src="/97dd1aa5b16b/use-demo.png" class=""><blockquote><p>整改的过程中，也发现了一个问题：比如，有一个提示语场景，之前代码里直接写的是：<code>&quot;当前未选择数据，请选择&quot;</code>，而现在变成了：<code>$t(&quot;noDataPleaseChoose&quot;)</code>。如果做个比较：哪种方式比较直观，肯定前者更加一目了然。这种还算好点，如果当前文字配置的国际化 <code>key</code> 和文字的实际内容不是很匹配，很难一眼看出这是什么意思。绝大数场景，还是需要在配置文件里搜当前的 <code>key</code> 对应的实际内容，这就导致了时间上的浪费，翻来覆去地找国际化字段，太哈人啦！（顺便吐槽一下，因为刚来没多久，接手这个项目的时候，好多表格列上的字段，连一个注释都没有，开发的时候，只能先搜国际化的字段代表啥意思，不然都不知道哪个是哪个 😓）于是乎，就有了一个想法：<font style="border-bottom: 1px dashed">给当前国际化字段加一个提示，让开发人员能快捷地知道这个字段代表什么意思，不需要再浪费精力去搜索了</font>。想法 💡 有了，开搞！！！</p></blockquote><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ol><li>以 <em>VS Code</em> 当前打开的项目文件夹为根目录，然后在当前文件夹下搜索，获取 <code>i18n</code> 文件夹下的所有 <code>.json</code> 文件。这一步是为了记录所有的国际化字段，以及各自对应的语言文本，相当于是数据源；</li><li>拿到数据源后，然后就是对当前打开的文件中的关键词进行检索，找到所有匹配到的代码块；</li><li>给匹配到的代码块添加一个特殊样式（下划线）以及鼠标悬浮时弹出一个提示框，提示框的内容来自于数据源；</li></ol><h4 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h4><p>关于如何搭建一个 <em>VS Code</em> 插件的开发项目，可以参考官网的文档：<a href="https://code.visualstudio.com/api/get-started/your-first-extension">Your First Extension</a>，讲的很详细。如果想要实现某个功能，不知道应该用哪个 <em>API</em> ，可以先用 <em>ChatGPT</em> 搜解决方案，然后它会给出用哪些 <em>API</em> 。可以用它给的示例代码，运行试试效果。如果它给的代码示例有问题，那就找 <a href="https://code.visualstudio.com/api/references/vscode-api">官方文档</a> 里对应 <em>API</em> 的介绍，基本上就能实现功能了。</p><h4 id="获取配置文件"><a href="#获取配置文件" class="headerlink" title="获取配置文件"></a>获取配置文件</h4><p>这里需要用到 <code>vscode.workspace</code> 提供的一些方法和属性。</p><ul><li><code>workspaceFolders</code>：当前打开的工作区目录。</li><li><code>fs</code>：文件系统模块，用于操作文件，例如常见的读写操作。</li></ul><p><em>VS Code</em> 提供的 <code>fs</code> 模块不同于 <code>Node JS</code> 中的 <code>fs</code>。这里的 <code>fs</code> 调用方法时，传入的文件路径必须使用 <code>vscode.Uri.file()</code> 对路径进行转换，否则就会报错。当然也可以用其他第三方的文件插件，例如 <a href="https://www.npmjs.com/package/fs-extra">fs-extra</a>（倍受好评）。这里为了尽可能降低插件包的大小，选择了 <em>VS Code</em> 内置的 <code>fs</code> ，如果后续有功能复杂的场景，用 <code>fs-extra</code> 准没错，用了都说好。代码如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 引入属性和方法</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> workspaceFolders<span class="token punctuation">,</span> fs <span class="token punctuation">&#125;</span> <span class="token operator">=</span> vscode<span class="token punctuation">.</span>workspace<span class="token comment">// 获取当前工作区文件夹</span><span class="token keyword">const</span> currentFolder <span class="token operator">=</span> workspaceFolders<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uri<span class="token comment">// 文件夹路径</span><span class="token keyword">const</span> folderPath <span class="token operator">=</span> currentFolder<span class="token punctuation">.</span>path<span class="token comment">// 读取 JSON 文件，这是异步的！！！</span><span class="token function">getJSON</span><span class="token punctuation">(</span>folderPath<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">getJSON</span><span class="token punctuation">(</span>folder<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> isTargetDir <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存放 .json 文件的目录名</span>  <span class="token keyword">const</span> dirName <span class="token operator">=</span> <span class="token string">"i18n"</span>  <span class="token comment">// 读取当前目录下的内容</span>  fs<span class="token punctuation">.</span><span class="token function">readDirectory</span><span class="token punctuation">(</span>vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>files <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// files 为当前目录下的内容，有文件夹，也有目录</span>    files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>file <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">[</span>fileName<span class="token punctuation">,</span> fileType<span class="token punctuation">]</span> <span class="token operator">=</span> file      <span class="token comment">// 如果当前是文件夹</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fileType <span class="token operator">===</span> vscode<span class="token punctuation">.</span>FileType<span class="token punctuation">.</span>Directory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 再次读取文件夹里的内容</span>        <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>folder<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fileName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> fileName <span class="token operator">===</span> dirName<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isTargetDir <span class="token operator">&amp;&amp;</span> fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 当前文件夹所在目录为 i18n 且，文件是 .json 格式的文件</span>        <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>folder<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fileName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>        <span class="token comment">// 读取文件内容</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>content <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 获取到对应的 JSON 文件内容</span>          <span class="token keyword">const</span> jsonContent <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment">/* TODO 记录 JSON 文件内容 */</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="检索关键词"><a href="#检索关键词" class="headerlink" title="检索关键词"></a>检索关键词</h4><p>上一步，已经得到了所有的 <code>.json</code> 配置文件，也即，对于任意一个文件，就能知道当前文件下，哪些字段是已配置的国际化字段了。</p><p>而这一步，需要检索当前聚焦文件下的国际化字段，并且需要在<font style="border-bottom: 1px dashed">每打开一个新文件</font>或者<font style="border-bottom: 1px dashed">修改当前文件内容时</font>，都要进行一次检索。确保内容更改后，下一步的 “注入样式” 能实时生效。</p><p>上述的两个事件可以在 <em>API</em> 中找到，分别对应下面两个：</p><ul><li><code>vscode.window.onDidChangeActiveTextEditor</code>：当活动编辑器发生更改时触发的事件。</li><li><code>vscode.workspace.onDidChangeTextDocument</code>：当文本文档被更改时触发的事件。</li></ul><p>首先，需要得到当前打开文件的整个文档内容，而 <code>vscode.window.activeTextEditor</code> 即为当前打开的活动编辑器对象。可以通过这个对象获去当前文件的内容，也可以通过这个对象给当前文档注入一些样式。代码如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// jsonContent 为上一步获取到的 JSON 文件内容</span><span class="token comment">// 先把格式转为对象类型，方便后续处理</span><span class="token keyword">const</span> jsonObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonContent<span class="token punctuation">)</span><span class="token comment">// 获取当前活动编辑器</span><span class="token keyword">const</span> editor <span class="token operator">=</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span>activeTextEditor<span class="token comment">// 获取文档对象</span><span class="token keyword">const</span> document <span class="token operator">=</span> editor<span class="token punctuation">.</span>document<span class="token comment">// 获取文档内容</span><span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 遍历每个字段，key 对应的就是每个国际化字段</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 生成一个正则表达式</span>  <span class="token comment">// 因为使用的时候，一定是以字符串的形式，所以需要兼容三种不同的字符串格式：'（单引号）、"（双引号）、`（反引号）</span>  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(["'\`])</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\\1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> match  <span class="token comment">// 使用正则提供的 exec 方法不断去匹配文档内容</span>  <span class="token comment">// 只有每次匹配到后，才会进入到 while 循环，运行内部的代码逻辑</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 记录字段的开始位置，加 1 是为了不计入前引号</span>    <span class="token keyword">const</span> startPos <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 记录字段的结束位置，减 1 是为了不计入后引号</span>    <span class="token keyword">const</span> endPos <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>index <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">/* TODO 注入样式 */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="注入样式"><a href="#注入样式" class="headerlink" title="注入样式"></a>注入样式</h4><p>上一步，得到了所有国际化字段的开始位置和结束位置，接下来就可以对开始位置到结束位置之间的代码块注入一些特殊样式，可以通过 <code>vscode.TextEditor.setDecorations</code> 实现。这个方法有俩参数，第一个参数是自定义的样式，第二个参数是范围，可以有多个，同时可以通过 <code>hoverMessage</code> 属性设置鼠标移入时的提示内容。</p><p>首先，怎么加一个下划线？</p><p>第一步，要通过 <code>vscode.window.createTextEditorDecorationType</code> 去生成一个样式，需要传入一个配置，这个配置就是常见的 <em>CSS</em> 属性，截个图给大伙看一眼：</p><img src="/97dd1aa5b16b/options.png" class=""><p>如果还想要更加灵活一点的样式，可以通过 <code>textDecoration</code> 属性去实现，这里可以直接写 <em>CSS</em> 代码。不过需要注意一点，它只会对第一个分号后的内容生效，有些诡异，不过问题不大，写的时候注意一下就行。</p><p>因为想要给代码块加个下划线，同时下划线颜色与当前代码块颜色保持一致，那么就可以通过下面的方式去创建样式：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> customDecoration <span class="token operator">=</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">createTextEditorDecorationType</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// border 如果不指定颜色，会继承当前文本颜色</span>  textDecoration<span class="token operator">:</span> <span class="token string">";border-bottom: 1px dashed;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>然后就是通过 <code>hoverMessage</code> 添加提示框内容，这个提示可以有多个，就比如经常在代码里能看到这种提示：</p><img src="/97dd1aa5b16b/hoverMessage.png" class=""><p>每个块都是一个单独的 <code>hoverMessage</code>，由不同的插件生成。而且提示的内容可以写成 <em>Markdown</em> 格式，通过 <code>vscode.MarkdownString</code> 生成，这里想要实现下面这种效果：</p><blockquote><p><code>zh-CN</code>：早上好</p><p><code>en-US</code>：Good morning</p></blockquote><p>使用 <code>vscode.MarkdownString</code> 实现就是下面这个样子：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> zh <span class="token operator">=</span> <span class="token string">"`zh-CN`：早上好"</span><span class="token keyword">const</span> en <span class="token operator">=</span> <span class="token string">"`en-US`：Good morning"</span><span class="token comment">// 加俩换行符，显得没那么挤，好看点 ~</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">MarkdownString</span><span class="token punctuation">(</span>zh <span class="token operator">+</span> <span class="token string">"\n\n"</span> <span class="token operator">+</span> en<span class="token punctuation">)</span></code></pre><p>汇总后，补充到上一步的 “检索关键词” 中：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 收集所有代码块待注入的样式</span><span class="token keyword">const</span> decorations<span class="token operator">:</span> vscode<span class="token punctuation">.</span>DecorationOptions<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(["'\`])</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\\1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> match  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> startPos <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> endPos <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>index <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 生成代码块范围</span>    <span class="token keyword">const</span> range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>startPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span>    <span class="token comment">// 生成提示内容</span>    <span class="token keyword">const</span> zh <span class="token operator">=</span> <span class="token string">"`zh-CN`："</span> <span class="token operator">+</span> jsonObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"zh-CN"</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> en <span class="token operator">=</span> <span class="token string">"`en-US`："</span> <span class="token operator">+</span> jsonObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"en-US"</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> hoverMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">MarkdownString</span><span class="token punctuation">(</span>zh <span class="token operator">+</span> <span class="token string">"\n\n"</span> <span class="token operator">+</span> en<span class="token punctuation">)</span>    <span class="token comment">// 收集样式</span>    decorations<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> range<span class="token punctuation">,</span> hoverMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 生成下划线样式</span><span class="token keyword">const</span> customDecoration <span class="token operator">=</span> vscode<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">createTextEditorDecorationType</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// border 如果不指定颜色，会继承当前文本颜色</span>  textDecoration<span class="token operator">:</span> <span class="token string">";border-bottom: 1px dashed;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 注入样式</span>editor<span class="token punctuation">.</span><span class="token function">setDecorations</span><span class="token punctuation">(</span>customDecoration<span class="token punctuation">,</span> decorations<span class="token punctuation">)</span></code></pre><blockquote><p>这里可能会有一个美中不足的小问题，就是会将代码里一些与国际化字段相同的字符串也注入样式，可能会有一点点影响，不过还在可接受范围内。如果后续有空，可以研究研究怎么判断当前是目标方法的调用，感觉有搞头。</p></blockquote><h4 id="点击文本跳转"><a href="#点击文本跳转" class="headerlink" title="点击文本跳转"></a>点击文本跳转</h4><p>实际使用过程中，同事提了一个优化意见。他想要对某个国际化字段的文本进行更改，还是需要全局搜索才能定位到配置文件的位置。问我，能不能加个点击跳转的功能。想了想，确实不错，可以搞！</p><p>实现的目标效果就是：点击提示框中的某个国际化文本，打开当前国际化字段对应的配置文件，同时跳转到字段所在的行，并把光标移动到对应文本的位置。有点类似 <em>VS Code</em> 中，按下 <code>Ctrl + 鼠标左键</code>，点击某一个方法或者变量时，会跳转到对应的位置，现在要手动实现这个功能。</p><p>在第一步读取 <code>.json</code> 配置文件时，已经拿到了所有的数据源，需要在这一步里记录一下，每个字段对应的文件路径，以便于后续使用。记录信息倒是很简单，难点就在于如何实现跳转？</p><p>跳转，很容易想到用一个超链接，这当然是可以的。不过，需要在打开文件后，再移动光标位置。大致思路就是：在打开文件后，延时获取当前活动编辑器，然后再查找字段的位置，移动光标就可以了。emm，感觉有点不优雅，延时执行不知道延时多少毫秒才算合适，万一有时候卡顿了，多多少少有点隐患。</p><p>好在，<em>VS Code</em> 提供了一种链接命令 <a href="https://code.visualstudio.com/api/extension-guides/command#command-uris">Command URIs</a>，可以在一个 <em>Markdown</em> 文本内添加一个链接命令，点击链接会触发命令，而且还能传参数，完美契合需求，Nice！代码如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 注册命令</span><span class="token keyword">const</span> commandName <span class="token operator">=</span> <span class="token string">"openTokenRange"</span>vscode<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">registerCommand</span><span class="token punctuation">(</span>commandName<span class="token punctuation">,</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// TODO 打开文件，移动光标</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/* 生成链接命令 */</span><span class="token comment">// 先将参数对象转为 JSON 串类型</span><span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 再使用 encodeURIComponent 转义</span><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token comment">// 写法类似 Markdown 中的超链接，只不过圆括号中的内容改了改</span><span class="token comment">// 命令都要加 command: 的前缀</span><span class="token comment">// 如果有参数，需要用一个 ? 将命令和参数分隔开</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[link](command:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>commandName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">MarkdownString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment">// 这一步很重要，不然链接不会生效，不可点击</span>content<span class="token punctuation">.</span>isTrusted <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><p>现在已经能得到待打开的文件路径和对应的文本内容，接下来就是将光标跳转到文本开始位置处。代码如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/* 移动光标 */</span><span class="token comment">// 文件路径</span><span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token string">"./xx/xx/x.json"</span><span class="token comment">// 文本内容</span><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> window<span class="token punctuation">,</span> workspace <span class="token punctuation">&#125;</span> <span class="token operator">=</span> vscode<span class="token comment">// 路径转为 VS Code 能识别的格式，然后打开对应的文件</span><span class="token keyword">const</span> document <span class="token operator">=</span> <span class="token keyword">await</span> workspace<span class="token punctuation">.</span><span class="token function">openTextDocument</span><span class="token punctuation">(</span>vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 获取文件内容</span><span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 在文件内搜索 key 的位置</span><span class="token comment">// 因为是 JSON 格式的文件，一定是用双引号包裹</span><span class="token comment">// 加 1 是为了获取 key 前的位置</span><span class="token keyword">const</span> position <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment">// 生成索引对应的位置信息</span><span class="token keyword">const</span> documentPosition <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">positionAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token comment">// 生成一个范围，起始位置和结束位置相同，就只有光标，不需要选中内容</span><span class="token keyword">const</span> range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>documentPosition<span class="token punctuation">,</span> documentPosition<span class="token punctuation">)</span><span class="token comment">// 当文档被打开后，设置光标位置</span><span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">showTextDocument</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  selection<span class="token operator">:</span> range<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 将选中的内容滚动到编辑器可视区域</span><span class="token comment">// 因为未选中任何内容，也就是将光标挪到可视区域</span>window<span class="token punctuation">.</span>activeTextEditor<span class="token operator">?.</span><span class="token function">revealRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>主要功能逻辑代码就上面那些，而真正实现的时候，远不止这些。比如：</p><ul><li>什么时候激活插件；</li><li>在哪些文件里可以使用；</li><li>需要提供哪些配置项，便于用户自定义；</li><li>绑定的事件，要合理取消绑定等。</li></ul><p>如果对源码感兴趣，可以看这里 👉 <a href="https://github.com/showlotus/Turboui-i18n">Turboui-i18n</a>。如果你也想开发一个插件，希望对你有些启发 😊。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS-Code-插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueMixinsLoader v1.0.2 release !</title>
      <link href="/05320cebd912.html"/>
      <url>/05320cebd912.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>昨天闲来无事，逛逛 GitHub，突然发现有人 star 了我的项目 <a href="https://github.com/showlotus/vue-mixins-loader">vue-mixins-loader</a>，可给我激动坏了。本着有一个人用，就要维护到底的原则，我准备给这个 <em>Loader</em> 做一次优化。在实际用的过程中发现一个问题：使用时，会把项目中所有 <em>.vue</em> 文件都给注入 <em>mixins</em> 。比如有些外部引入的 <em>.vue</em> 组件，这就完全没有必要去注入 <em>mixins</em> 。所以，计划再新增一个 <em>options</em> 属性 <code>exclude</code>，由用户自己去定义哪些文件可以排除掉，不注入 <em>Loader</em> 提供的 <em>mixins</em> 。想法有了，这就开搞！（其实这个问题在第一版发布的时候，就发现了，当时手头有点忙就给搁置了，刚好这次给完善一下）</p></blockquote><img src="/05320cebd912/1.png" class=""><h4 id="属性设计"><a href="#属性设计" class="headerlink" title="属性设计"></a>属性设计</h4><p>这次需要在 <em>Loader</em> 的 <em>options</em> 中新增一个属性 <em>exclude</em> ，由于 <em>Loader</em> 的 <em>options</em> 的特殊性（会进行 JSON 的序列化和反序列化处理），所以，属性的数据类型就设计成 <code>string</code> 或者 <code>string[]</code>，这两种类型分别对应单个或者多个。值为一个正则表达式字符串，用这个去判断当前 <em>.vue</em> 文件是否在 <em>Loader</em> 的处理之外。</p><p>也就是现在的 <em>options</em> 可以写成下面这样：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token string">'element-ui'</span><span class="token punctuation">,</span>  <span class="token comment">// 或者</span>  <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'components/'</span><span class="token punctuation">,</span> <span class="token string">'view-design'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 之前的配置</span>  <span class="token literal-property property">tools3</span><span class="token operator">:</span> <span class="token string">'@/utils/tools3.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">custom</span><span class="token operator">:</span> <span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is custom mixins's mounted"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>把 <code>exclude</code> 与之前的混入属性放在一起，总感觉怪怪的。最好还是把混入的属性归纳在一个字段里比较合适，比如 <em>mixin</em> 什么的。OK，下一个版本的功能迭代有啦！嘿嘿！</p></blockquote><h4 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h4><p>获取配置中提供的 <code>exclude</code> 参数，借助 <code>loader-utils</code> 提供的 <em>getOptions</em> 方法。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getOptions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"loader-utils"</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> sourceMaps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> originOptions <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> exclude <span class="token punctuation">&#125;</span> <span class="token operator">=</span> originOptions<span class="token punctuation">&#125;</span></code></pre><p>获取当前文件路径，同样借助 <code>loader-utils</code> 提供的 <em>getCurrentRequest</em> 方法。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getCurrentRequest <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"loader-utils"</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> sourceMaps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> currentRequest <span class="token operator">=</span> <span class="token function">getCurrentRequest</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>校验当前文件是否需要排除，写一个方法 <code>validateExclude</code> 专门去判断这个。如果返回值是 <code>true</code>，那么直接返回源文件内容即可。不需要再走下面注入 <em>mixins</em> 的逻辑。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getOptions<span class="token punctuation">,</span> getCurrentRequest <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"loader-utils"</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> sourceMaps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> originOptions <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> exclude <span class="token punctuation">&#125;</span> <span class="token operator">=</span> originOptions  <span class="token keyword">const</span> currentRequest <span class="token operator">=</span> <span class="token function">getCurrentRequest</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">// 校验是否排除当前文件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validateExclude</span><span class="token punctuation">(</span>exclude<span class="token punctuation">,</span> currentRequest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> source  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>validateExclude</code> 的具体内容如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">validate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> targetStr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>targetStr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取 vue 文件的路径，并将反斜杠转为斜杠</span><span class="token keyword">const</span> <span class="token function-variable function">getFilePath</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> start <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> end <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".vue"</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 校验当前文件是否排除 * @param &#123;string|string[]&#125; rules 排除的规则 * @param &#123;string&#125; currentRequest 当前文件路径 * @returns &#123;boolean&#125; */</span><span class="token keyword">function</span> <span class="token function">validateExclude</span><span class="token punctuation">(</span><span class="token parameter">rules<span class="token punctuation">,</span> currentRequest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 统一转为 Array 类型，方便处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> rules <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rules <span class="token operator">=</span> <span class="token punctuation">[</span>rules<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token function">getFilePath</span><span class="token punctuation">(</span>currentRequest<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> rule <span class="token keyword">of</span> rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></code></pre><p>这里有一个路径转换的操作，这是因为不同操作系统文件路径不一致：</p><img src="/05320cebd912/3.png" class=""><p>所以，统一将反斜杠 <code>\</code> 转为了斜杠 <code>/</code>，也比较符合操作习惯。</p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p><code>exclude</code> 同样是配置在 <em>options</em> 对象下，提供一个字符串，或者字符串数组。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> stringify <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vue-mixins-loader"</span><span class="token punctuation">)</span><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"vue-loader"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"vue-mixins-loader"</span><span class="token punctuation">,</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"components/"</span><span class="token punctuation">,</span> <span class="token string">"view-design"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// v1.0.2 new add</span>              <span class="token literal-property property">tools</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./src/utils/tools.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token literal-property property">tools2</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./src/utils/tools2.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token literal-property property">tools3</span><span class="token operator">:</span> <span class="token string">"@/utils/tools3.js"</span><span class="token punctuation">,</span>              <span class="token literal-property property">custom</span><span class="token operator">:</span> <span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>                    <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is custom mixins's mounted"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>从昨天下午 4 点半开始准备写这个功能，到凌晨 1 点完成。写功能其实也就用了 2 小时左右，其余的时间都在优化测试的代码，之前的测试用例是 <em>rollup</em> 写的，测试 <em>Loader</em> 需要用 <em>loader-runner</em> 去实现。当时是为了偷懒，<em>Loader</em> 打包用的 <em>rollup</em> ，所以测试也顺带用 <em>rollup</em> 了，测试过程极其繁琐。于是就想着整改一下，直接改用 <em>webpack</em> + <em>webpack-dev-server</em> 去测试。整改完后，果然，测试轻松多啦，美滋滋~~~</p><p>整完之后，顺带发布 <em>v1.0.2</em> ！赶紧来试试吧！</p><img src="/05320cebd912/4.png" class="">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
            <tag> Loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发利器：Todo Tree</title>
      <link href="/b5b87ccfb749.html"/>
      <url>/b5b87ccfb749.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近换了一份新工作，也入职一段时间了，平时开发工具还是 <em>VS Code</em> ，但是公司内网没有开放一些外网权限，也就导致不能同步自己的账号，也就意味着我要手动去把之前用的插件挨个再下载一遍，emmmmm。不过也不是所有的都能下载，插件市场提供的都是公司自己阉割过的版本，有些版本低的离谱，不过平时开发也够用了。之前我都是用 <em>TODO HighLight</em> + <em>Todo Tree</em> ，使用关键词标记注释行，不仅高亮关键词，还方便定位，开发体验极其友好。不过，新下载的插件又得重新搞配置，于是就打算把自己之前的配置贴出来（还设计了好几种颜色呢）。</p></blockquote><p>翻了翻配置，发现只有 <em>Todo Tree</em> （ <strong><em>v0.0.226</em></strong> ）的相关配置，好家伙，功能越来越丰富了。配置如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"todo-tree.general.tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"TODO"</span><span class="token punctuation">,</span> <span class="token string">"BUG"</span><span class="token punctuation">,</span> <span class="token string">"DONE"</span><span class="token punctuation">,</span> <span class="token string">"FIX"</span><span class="token punctuation">,</span> <span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"WARN"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"todo-tree.highlights.defaultHighlight"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"foreground"</span><span class="token operator">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>    <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#ffa500"</span><span class="token punctuation">,</span>    <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"checklist"</span><span class="token punctuation">,</span>    <span class="token property">"rulerColour"</span><span class="token operator">:</span> <span class="token string">"#ffa500"</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"tag"</span><span class="token punctuation">,</span>    <span class="token property">"iconColour"</span><span class="token operator">:</span> <span class="token string">"#ffa500"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"todo-tree.highlights.customHighlight"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"BUG"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#f00"</span><span class="token punctuation">,</span>      <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"bug"</span><span class="token punctuation">,</span>      <span class="token property">"rulerColour"</span><span class="token operator">:</span> <span class="token string">"#f00"</span><span class="token punctuation">,</span>      <span class="token property">"iconColour"</span><span class="token operator">:</span> <span class="token string">"#f00"</span><span class="token punctuation">,</span>      <span class="token property">"opacity"</span><span class="token operator">:</span> <span class="token number">100</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"DONE"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"foreground"</span><span class="token operator">:</span> <span class="token string">"#000"</span><span class="token punctuation">,</span>      <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#add8e6"</span><span class="token punctuation">,</span>      <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"verified"</span><span class="token punctuation">,</span>      <span class="token property">"rulerColour"</span><span class="token operator">:</span> <span class="token string">"#add8e6"</span><span class="token punctuation">,</span>      <span class="token property">"iconColour"</span><span class="token operator">:</span> <span class="token string">"#add8e6"</span><span class="token punctuation">,</span>      <span class="token property">"opacity"</span><span class="token operator">:</span> <span class="token number">100</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"FIX"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#008000"</span><span class="token punctuation">,</span>      <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"beaker"</span><span class="token punctuation">,</span>      <span class="token property">"rulerColour"</span><span class="token operator">:</span> <span class="token string">"#008000"</span><span class="token punctuation">,</span>      <span class="token property">"iconColour"</span><span class="token operator">:</span> <span class="token string">"#008000"</span><span class="token punctuation">,</span>      <span class="token property">"opacity"</span><span class="token operator">:</span> <span class="token number">100</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"TAG"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"foreground"</span><span class="token operator">:</span> <span class="token string">"#000"</span><span class="token punctuation">,</span>      <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#ffc0cb"</span><span class="token punctuation">,</span>      <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"pin"</span><span class="token punctuation">,</span>      <span class="token property">"rulerColour"</span><span class="token operator">:</span> <span class="token string">"#ffc0cb"</span><span class="token punctuation">,</span>      <span class="token property">"iconColour"</span><span class="token operator">:</span> <span class="token string">"#ffc0cb"</span><span class="token punctuation">,</span>      <span class="token property">"rulerLane"</span><span class="token operator">:</span> <span class="token string">"full"</span><span class="token punctuation">,</span>      <span class="token property">"opacity"</span><span class="token operator">:</span> <span class="token number">100</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"WARN"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"foreground"</span><span class="token operator">:</span> <span class="token string">"#000"</span><span class="token punctuation">,</span>      <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#ff0"</span><span class="token punctuation">,</span>      <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"$(warning)"</span><span class="token punctuation">,</span>      <span class="token property">"rulerColour"</span><span class="token operator">:</span> <span class="token string">"#ff0"</span><span class="token punctuation">,</span>      <span class="token comment">// "iconColour": "#ff0",</span>      <span class="token property">"opacity"</span><span class="token operator">:</span> <span class="token number">100</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>比如下面这段代码，</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// TODO this is todo</span><span class="token comment">// BUG this is bug</span><span class="token comment">// DONE this is done</span><span class="token comment">// FIX this is fix</span><span class="token comment">// TAG this is tag</span><span class="token comment">// WARN this is warn</span></code></pre><p>使用配置后的效果图如下：</p><img src="/b5b87ccfb749/1.png" class=""><p>侧边栏，代办事项列表，点击某一个直接就能跳转到指定位置：</p><img src="/b5b87ccfb749/2.png" class=""><p>赶紧试一试吧~</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev-Tools </tag>
            
            <tag> VS-Code-插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueMixinsLoader：类似 Mixin 功能的 Loader🦉</title>
      <link href="/2f85891a5103.html"/>
      <url>/2f85891a5103.html</url>
      
        <content type="html"><![CDATA[<img src="/2f85891a5103/banner.jpg" class=""><blockquote><p>最近要给项目用到的组件库里的所有组件都要加一个 <em>prop</em> ，总共 <em>126</em> 个组件，如果是手动加，emm，也不是不可以，但就是有点呆，更何况如果后续有变动的话，又得重新来一遍。于是就想，如何用一种全局的配置，去统一给所有组件加 <em>prop</em> （这里没有使用 <code>Vue.mixin</code> 去全局混入，下文会作解释）。最后打算开发一个 <em>Webpack Loader</em> 去实现这个功能，刚好之前也没写过 <em>Loader</em> ，借这个机会试一试，顺便了解一下 <em>Loader</em> 的运行机制，如果能实现出来，想想就很酷 😉。（文末有仓库地址）</p></blockquote><h4 id="为什么没有用-Vue-mixin？"><a href="#为什么没有用-Vue-mixin？" class="headerlink" title="为什么没有用 Vue.mixin？"></a>为什么没有用 Vue.mixin？</h4><p>首先，先来讲一下 <code>Vue.mixin</code> 全局混入的机制。一个使用 <em>Vue2</em> 搭建的项目，我们可以通过 <code>Vue.prototype.someProp = &#39;hello&#39;</code> 的方式，在 <em>Vue</em> 的原型上挂载一个全局属性 <em>someProp</em> ，这样项目下所有的 <em>Vue</em> 实例都可以通过 <code>this.someProp</code> 的方式访问到。简单点说，就是每个 <em>Vue</em> 实例都能访问到原型上的属性。</p><p>也可以通过 <code>Vue.mixin</code> 混入一个全局配置，例如像下面这样：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">someProp</span><span class="token operator">:</span> <span class="token string">"hello"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>不过会有一个问题，它影响每一个之后创建的 <em>Vue</em> 实例，就是当前项目下所有的 <em>Vue</em> 实例都会被混入。而我们只需要对组件库中的所有组件混入就行，这种做法的影响范围有些广，有点不可取。同时，组件库和原项目之间耦合性又增加了，不建议。</p><h4 id="为什么要用-Loader-去实现？"><a href="#为什么要用-Loader-去实现？" class="headerlink" title="为什么要用 Loader 去实现？"></a>为什么要用 <em>Loader</em> 去实现？</h4><p>因为之前写一个 <a href="https://showlotus.github.io/70ab28ff8c6d.html">Prettier Plugin</a> ，最开始也打算故技重施，再用 <em>Prettier</em> 写一个插件，对组件库中的所有 <em>Vue</em> 文件，添加一个 <em>Mixin</em> 。这种方案其实就是代替人工去给每一个 <em>Vue</em> 组件手动添加 <em>Mixin</em> 了。如果后续有更改，或者要把这个 <em>Mixin</em> 丢掉，有得重新写一个 <em>Plugin</em> ，emm，已经感到有点麻烦了。如果能通过外部插入的方式，添加 <em>Mixin</em> ，可随时注入或撤销，同时不对原文件做更改，那最好不过了。</p><p><em>Webpack Loader 了 ~ 解 ~ 一 ~ 下 ~~~（画外音）</em></p><p>关于 <em>Loader</em> ，<em>Webpack</em> 官网是这样介绍的：</p><blockquote><p>Webpack enables use of loaders to preprocess files. This allows you to bundle any static resource way beyond JavaScript. You can easily write your own loaders using Node.js.</p><p>机翻：<em>Webpack</em> 允许使用加载器对文件进行预处理。这允许您以 JavaScript 之外的方式捆绑任何静态资源。你可以很容易地使用 Node.js 编写自己的加载器。</p></blockquote><p>因为 <em>Webpack</em> 只能解析 <em>JS</em> 和 <em>JSON</em> 类型的文件，对于其他类型的文件都需要安装一些 <em>Loader</em> 去处理，比如，<code>vue-loader</code>、<code>style-loader</code>、<code>less-loader</code> 等等。</p><p>组件库在进行打包时，也需要使用 <code>vue-loader</code> 去处理 <em>Vue</em> 文件，就像下面这样：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">"vue-loader"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vue-style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token string">"less-loader"</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以使用多个 <em>Loader</em> 去处理，例如，上面的配置中，对于 <code>.less</code> 文件，使用了三个 Loader，并且按照从右到左的顺序依次执行。也就是，先由 <code>less-loader</code> 处理，将处理后的结果，传给 <code>css-loader</code>，<code>css-loader</code> 处理完后，再交给 <code>vue-style-loader</code> 处理。</p><p>大致的实现思路就是：在 <code>vue-loader</code> 处理前，把 <em>Mixin</em> 注入到 <em>Vue</em> 文件里，然后再交给 <code>vue-loader</code> 处理，只需要保证在注入 <em>Mixin</em> 后的 <em>Vue</em> 文件的合法性即可。</p><p>最后使用 <em>Loader</em> 后的 <em>Webpack</em> 配置大致如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"vue-loader"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            <span class="token literal-property property">loader</span><span class="token operator">:</span> VueMixinsLoader<span class="token punctuation">,</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// TODO</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>通过 <em>Loader</em> 去注入，在不改变原文件的前提下，可操作性更强了！</p><h4 id="Loader’s-options-配置"><a href="#Loader’s-options-配置" class="headerlink" title="Loader’s options 配置"></a>Loader’s options 配置</h4><p>身为一个 <em>Loader</em> ，那就少不了 <em>options</em> 配置，这里的 <em>options</em> 以一个对象的形式提供。为了更接近 <em>Mixin</em> 的写法，并且方便从外部引入，提供了有两种可选方式的配置：</p><h5 id="1-引入外部资源"><a href="#1-引入外部资源" class="headerlink" title="1. 引入外部资源"></a>1. 引入外部资源</h5><p>对于比较复杂的 <em>Mixin</em> 可能需要单独封装在一个公共模块里，然后通过 <code>import</code> 的方式引入。比如，需要引入 <code>src/utils/tools.js</code> 这个模块。可以写成下面这样：</p><p><strong>配置</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">loader</span><span class="token operator">:</span> VueMixinsLoader<span class="token punctuation">,</span>  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">tools</span><span class="token operator">:</span> <span class="token string">"src/utils/tools.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>原文件</strong></p><pre class="language-txt" data-language="txt"><code class="language-txt">import A from "a.js"export default &#123;  // ...&#125;</code></pre><p><strong>处理后</strong></p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import toolsMixin from "src/utils/tools.js"</span></span>import A from "a.js"export default &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // ...</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> mixins: [toolsMixin]</span></span>&#125;</code></pre><p>提供的资源路径会原封不动地注入到 <em>Vue</em> 文件里，也就是需要保证 <strong>在不同的 <em>Vue</em> 文件中使用这个路径引入时，都能引入到这个资源</strong>。为了保证每个 <em>Vue</em> 文件都能正常地引入这个资源，建议使用绝对路径，或者使用 <code>alias</code> 别名。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">loader</span><span class="token operator">:</span> VueMixinsLoader<span class="token punctuation">,</span>  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">tools</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/utils/tools.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 使用 path.resolve 将路径转为绝对路径</span>    <span class="token literal-property property">tools2</span><span class="token operator">:</span> <span class="token string">"@/utils/tools.js"</span><span class="token punctuation">,</span> <span class="token comment">// 使用 @ 别名，@ 为 src 目录的别名</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>你可能会有疑问：加一句 <em>import</em> 和 <em>mixins</em> 就能注入了？其实 <code>vue-loader</code> 在解析时，也是拿到整个 <em>Vue</em> 文件代码的字符串，然后再去做解析的。单文件组件只是 <em>Vue</em> 提供的一种近似于原生 <em>HTML</em> 的写法，便于开发者开发。底层处理的时候，还是把整个文件当作一个字符串，然后去解析，没有那么玄乎（狗头保命）。</p></blockquote><h5 id="2-custom-属性"><a href="#2-custom-属性" class="headerlink" title="2. custom 属性"></a>2. custom 属性</h5><p>对于一些简单的 <em>Mixin</em> ，不需要以外部资源的形式引入，那么就可以直接提供一个对象，都写在 <em>custom</em> 这个属性下。</p><blockquote><p>后续测试时，发现了一个问题：<em>webpack</em> 在处理 <em>options</em> 时，会将其转为 <em>JSON</em> 格式，也就意味着，对于一些属性为函数的，就会丢失。研究了一种解决方案，<em>vue-mixins-loader</em> 提供了一个 <code>stringify</code> 方法，需要对这个 <code>custom</code> 对象进行包裹，将其转为一个字符串，保证 <em>JSON</em> 序列化时不会丢失属性。</p></blockquote><p><strong>配置</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">loader</span><span class="token operator">:</span> VueMixinsLoader<span class="token punctuation">,</span>  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">custom</span><span class="token operator">:</span> VueMixinsLoader<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>          <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'Hello World'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is created hook'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is mounted hook'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>写法和 <em>Mixin</em> 完全一样。最后处理的时候，会把整个对象赋值给 <code>customMixin</code> 这个变量，然后注入到 <em>mixins</em> 里。</p><p><strong>原文件</strong></p><pre class="language-txt" data-language="txt"><code class="language-txt">import A from "a.js"export default &#123;  // ...&#125;</code></pre><p><strong>处理后</strong></p><pre class="language-diff" data-language="diff"><code class="language-diff">import A from "a.js"<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const customMixin = &#123;</span><span class="token prefix inserted">+</span><span class="token line">   props: &#123;</span><span class="token prefix inserted">+</span><span class="token line">     message: &#123;</span><span class="token prefix inserted">+</span><span class="token line">       type: String,</span><span class="token prefix inserted">+</span><span class="token line">       default: "Hello World"</span><span class="token prefix inserted">+</span><span class="token line">     &#125;</span><span class="token prefix inserted">+</span><span class="token line">   &#125;,</span><span class="token prefix inserted">+</span><span class="token line">   created() &#123;</span><span class="token prefix inserted">+</span><span class="token line">     console.log("this is created hook")</span><span class="token prefix inserted">+</span><span class="token line">   &#125;,</span><span class="token prefix inserted">+</span><span class="token line">   mounted() &#123;</span><span class="token prefix inserted">+</span><span class="token line">     console.log("this is mounted hook")</span><span class="token prefix inserted">+</span><span class="token line">   &#125;</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span>export default &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // ...</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> mixins: [customMixin]</span></span>&#125;</code></pre><h5 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h5><p>两种方式可以混合使用，并且如果原 <em>Vue</em> 文件中也有引入自己的 <em>Mixin</em> ，则会把它们合并。</p><p><strong>配置</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">loader</span><span class="token operator">:</span> VueMixinsLoader<span class="token punctuation">,</span>  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">tools</span><span class="token operator">:</span> <span class="token string">"@/utils/tools.js"</span><span class="token punctuation">,</span>    <span class="token literal-property property">custom</span><span class="token operator">:</span> VueMixinsLoader<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>          <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"Hello World"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>原文件</strong></p><pre class="language-txt" data-language="txt"><code class="language-txt">import A from "a.js"import BMixin from "b.js"export default &#123;  // ...  mixins: [BMixin]&#125;</code></pre><p><strong>处理后</strong></p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import toolsMixin from "@/utils/tools.js"</span></span>import A from "a.js"import BMixin from "b.js"<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const customMixin = &#123;</span><span class="token prefix inserted">+</span><span class="token line">   props: &#123;</span><span class="token prefix inserted">+</span><span class="token line">     message: &#123;</span><span class="token prefix inserted">+</span><span class="token line">       type: String,</span><span class="token prefix inserted">+</span><span class="token line">       default: "Hello World"</span><span class="token prefix inserted">+</span><span class="token line">     &#125;</span><span class="token prefix inserted">+</span><span class="token line">   &#125;</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span>export default &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // ...</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> mixins: [BMixin]</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> mixins: [BMixin, toolsMixin, customMixin]</span></span>&#125;</code></pre><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>看到这里，你是不是很好奇，上面的操作是如何实现的。细心的你想必也发现了，文章的标签里有 <em>AST</em> 和 <em>Babel</em> ，到现在还没有提及，是时候登场啦！</p><p>得益于 <em>Babel</em> 的强大，可以将任意一段 <em>JS</em> 代码，解析成 <em>AST</em> 。这也就使得我们可以对生成的 <em>AST</em> 做一些操作，比如，格式化代码、删除注释等等，这次的 <big><em>VueMixinLoader</em></big> 也是如此。</p><blockquote><p><em>AST</em> 在线生成网站：<a href="https://astexplorer.net/">https://astexplorer.net</a></p></blockquote><h5 id="1-解析-options-配置"><a href="#1-解析-options-配置" class="headerlink" title="1. 解析 options 配置"></a>1. 解析 options 配置</h5><p>关于 <em>options</em> 中的配置项，只对值为 <em>String</em> 类型的属性和 <em>custom</em> 属性做处理，其他的忽略就好，不做任何处理。</p><p>值为 <em>String</em> 类型的，都将该值作为一个资源路径，属性名作为变量名前缀，后缀为 <code>Mixin</code> ，然后生成 <code>ImportMixin</code> 语句：<code>import [属性名]Mixin from [值]</code>。</p><p>例如，对于下面这种 <em>options</em> 配置：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">utils</span><span class="token operator">:</span> <span class="token string">"@/utils"</span><span class="token punctuation">,</span>  <span class="token literal-property property">libs</span><span class="token operator">:</span> <span class="token string">"@/libs"</span><span class="token punctuation">&#125;</span></code></pre><p>生成的 <code>ImportMixin</code> 语句为：</p><pre class="language-txt" data-language="txt"><code class="language-txt">import utilsMixin from "@/utils"import libsMixin from "@/libs"</code></pre><p>还需要记录一下名称 <code>importMixinNames = [&quot;utilsMixin&quot;, &quot;libsMixin&quot;]</code>，后面还需要用到。</p><p>而 <em>custom</em> 属性，要把它的值对象转成一个字符串，注意这一步不是调用 <code>JSON.stringify</code> 就可以了的。比如，对于下面这个：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> custom <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"Hello World"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>custom<span class="token punctuation">)</span> <span class="token comment">// &#123; "props": &#123; "message": &#123; "default" : "Hello World" &#125; &#125; &#125;</span></code></pre><blockquote><p><code>JSON.stringify</code> 不能处理函数、<code>undefined</code>、<code>Symbol</code> 和 <code>RegExp</code>。</p></blockquote><p>还好有第三方工具专门实现了这个功能：<a href="https://www.npmjs.com/package/serialize-javascript">serialize-javascript</a>。不过它不支持值为原生构造函数类型的，像是，<em>Number</em> ，<em>String</em> ，<em>Array</em> ，<em>Object</em> 等等。并且还有 BUG，对于普通函数内部使用了箭头函数的，序列化后的结果就会有问题。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> serialize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"serialize-javascript"</span><span class="token punctuation">)</span><span class="token keyword">const</span> custom <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">serialize</span><span class="token punctuation">(</span>custom<span class="token punctuation">)</span><span class="token comment">/** 序列化的结果&#123;   "methods": &#123;       "fn": fn() &#123;           const f = () => &#123;&#125;       &#125;   &#125;&#125; */</span></code></pre><p>翻了翻源码，关于是否是箭头函数的判断写得有点问题，源码是这样写的（省去了一些代码）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token constant">IS_ARROW_FUNCTION</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*?=>.*?</span><span class="token regex-delimiter">/</span></span><span class="token keyword">function</span> <span class="token function">serializeFunc</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> serializedFn <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// arrow functions, example: arg1 => arg1+5</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">IS_ARROW_FUNCTION</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>serializedFn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> serializedFn  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>emm，这个正则，着实有点粗糙了哈。问了问 ChatGPT，这个正则该怎么写，它给的答案是下面这样：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token constant">IS_ARROW_FUNCTION</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\([\w\s,]*\)|[\w\s]*)\s*=></span><span class="token regex-delimiter">/</span></span></code></pre><p>测了测，确实没啥问题，先把 node_modules 里的改成这样，等有空了提个 PR，看看会不会被合并 🤭。</p><blockquote><p>仔细想想，<em>custom</em> 里也不会写一些比较复杂的逻辑，如果很复杂，建议还是通过外部资源引入的方式。这样的话，原箭头函数的判断就已经满足了，不需要额外修改源代码。但是，写都写了，岂有不用的道理（拽）。</p></blockquote><p>下面接着解决原生构造函数序列化的问题，原生构造函数调用 <code>toString()</code> 方法后，得到的都是下面这些值：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> PropTypeStr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"function String() &#123; [native code] &#125;"</span><span class="token punctuation">,</span>  <span class="token string">"function Number() &#123; [native code] &#125;"</span><span class="token punctuation">,</span>  <span class="token string">"function Boolean() &#123; [native code] &#125;"</span><span class="token punctuation">,</span>  <span class="token string">"function Array() &#123; [native code] &#125;"</span><span class="token punctuation">,</span>  <span class="token string">"function Object() &#123; [native code] &#125;"</span><span class="token punctuation">,</span>  <span class="token string">"function Date() &#123; [native code] &#125;"</span><span class="token punctuation">,</span>  <span class="token string">"function Function() &#123; [native code] &#125;"</span><span class="token punctuation">,</span>  <span class="token string">"function Symbol() &#123; [native code] &#125;"</span><span class="token punctuation">]</span></code></pre><p>也就意味着，如果当前值类型为 <code>Function</code>，并且调用 <code>toString()</code> 方法后的结果在上述的列表中，则说明当前函数为原生构造函数，需要特殊处理。如果是数组，并且数组里的每一项也满足这两个条件，则也需要特殊处理。主要针对的就是 <em>props</em> 里的某个属性，可以设置多个 <em>type</em> 的场景。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> custom <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">prop1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"Hello World"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">prop2</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>下一步，如何特殊处理？</p><p>首先，特殊处理的这一步操作，要在序列化之前，从而保证整体能正常序列化。也即需要把原生构造函数转换成可被序列化的格式，简单点转成字符串就行。不过，这不是简简单单的字符串，需要做个标记，保证能由字符串还能转为原来构造函数的形式。</p><p>先用一些特殊标记把原生构造函数包裹起来。以上述的 <em>custom</em> 为例，先转成下面这种格式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">custom <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">prop1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"__ConstructorFn([String, Number])"</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"Hello World"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">prop2</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"__ConstructorFn(Object)"</span><span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>序列化后的结果如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">customStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#123;  "props": &#123;    "prop1": &#123;      "type": "__ConstructorFn([String, Number])",      "default": "Hello World"    &#125;,    "prop2": &#123;      "type": "__ConstructorFn(Object)",      "default": () => (&#123;&#125;)    &#125;  &#125;&#125;</span><span class="token template-punctuation string">`</span></span></code></pre><p>移除特殊标记，一个正则搞定：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">removeConstructorFnTag</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">['"]__ConstructorFn\(([^)]+)\)['"]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>customStr <span class="token operator">=</span> <span class="token function">removeConstructorFnTag</span><span class="token punctuation">(</span>customStr<span class="token punctuation">)</span><span class="token comment">/**&#123;  "props": &#123;    "prop1": &#123;      "type": [String, Number],      "default": "Hello World"    &#125;,    "prop2": &#123;      "type": Object,      "default": () => (&#123;&#125;)    &#125;  &#125;&#125; */</span></code></pre><p>生成 <code>customMixin</code> 语句：</p><pre class="language-txt" data-language="txt"><code class="language-txt">const customMixin = &#123;  "props": &#123;    "prop1": &#123;      "type": [String, Number],      "default": "Hello World"    &#125;,    "prop2": &#123;      "type": Object,      "default": () => (&#123;&#125;)    &#125;  &#125;&#125;</code></pre><p>至此，得到了 <code>importMixin</code> 语句和 <code>customMixin</code> 语句，后续需要插入到 <em>Vue</em> 的 <code>script</code> 标签内。</p><pre class="language-txt" data-language="txt"><code class="language-txt">import utilsMixin from "@/utils"import libsMixin from "@/libs"const customMixin = &#123;  "props": &#123;    "prop1": &#123;      "type": [String, Number],      "default": "Hello World"    &#125;,    "prop2": &#123;      "type": Object,      "default": () => (&#123;&#125;)    &#125;  &#125;&#125;</code></pre><h5 id="2-解析-script-标签"><a href="#2-解析-script-标签" class="headerlink" title="2. 解析 script 标签"></a>2. 解析 script 标签</h5><p>这里使用 <code>vue-template-compiler</code> 去解析 <em>Vue</em> 文件。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vue-template-compiler"</span><span class="token punctuation">)</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;template>  &lt;p>&#123;&#123; greeting &#125;&#125; World!&lt;/p>&lt;/template>&lt;script>export default &#123;  data () &#123;    return &#123;      greeting: "Hello"    &#125;;  &#125;&#125;;&lt;/script>&lt;style scoped>p &#123;  font-size: 2em;  text-align: center;&#125;&lt;/style></span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> script <span class="token punctuation">&#125;</span> <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">parseComponent</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token comment">// script 内容的开始和结束位置</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> start<span class="token punctuation">,</span> end <span class="token punctuation">&#125;</span> <span class="token operator">=</span> script<span class="token comment">// script 标签里的内容</span><span class="token keyword">const</span> scriptContent <span class="token operator">=</span> script<span class="token punctuation">.</span>content</code></pre><p>其中，<code>source.slice(start, end) == scriptContent == script.content</code>。</p><h5 id="3-生成新的代码"><a href="#3-生成新的代码" class="headerlink" title="3. 生成新的代码"></a>3. 生成新的代码</h5><p>首先介绍一下 <em>Babel</em> 三步走：<code>parse</code>、<code>traverse</code>、<code>generate</code>。</p><ul><li><p><code>parse</code>：对应功能模块 <code>@babel/parser</code>，解析 <em>JavaScript</em> 代码，并将其转换为 <em>AST</em> （Abstract Syntax Tree）抽象语法树。</p></li><li><p><code>traverse</code>：对应功能模块 <code>@babel/traverse</code>，遍历 <em>AST</em> 抽象语法树，并对其进行修改或分析。</p></li><li><p><code>generate</code>：对应功能模块 <code>@babel/generator</code>，将 <em>AST</em> 抽象语法树转换为 <em>JavaScript</em> 代码的字符串形式。</p></li></ul><blockquote><p>通俗点讲，假如说你有一个玩偶，电池没电了，需要更换电池。但是更换电池，需要用螺丝刀把它拆开，才能更换。而 <code>parse</code> 就相当于能把整个玩偶拆成各种零部件，你只需要把旧电池换成新电池（这一步就是 <code>traverse</code>），最后再交给 <code>generate</code> 重新组装成玩偶。不需要用螺丝刀拆开，然后再给合上了，简单了好多。如果你还想把玩偶的眼睛，由小黄灯换成小红灯，也是只需要把黄灯部件换成红灯部件即可，完全不需要自己动手拆。</p></blockquote><p>先来看一段 <em>JS</em> 代码生成 <em>AST</em> 后的结果：</p><img src="/2f85891a5103/1.png" class=""><p><code>program.body</code> 是个数组，有两个 <code>ImportDeclaration</code> 类型的节点和一个 <code>ExportDefaultDeclaration</code> 类型的节点，分别对应两个 <code>import</code> 语句和一个 <code>export default</code> 语句。</p><p>比如，要清空所有 <code>import</code> 节点，就可以用下面的方式实现。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/parser"</span><span class="token punctuation">)</span><span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/traverse"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token keyword">const</span> generate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/generator"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token comment">// scriptContent 来源于第二步生成的</span><span class="token comment">// 因为是对 Vue 文件解析，需要配置 &#123; sourceType: "module" &#125;</span><span class="token comment">// 如果代码里有用到 JSX 语法，需要配置 &#123; plugins: ["jsx"] &#125;</span><span class="token keyword">const</span> scriptAst <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>scriptContent<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"jsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">traverse</span><span class="token punctuation">(</span>scriptAst<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 遍历 import 节点</span>  <span class="token function">ImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// path.node 是当前节点</span>    scriptAst<span class="token punctuation">.</span>program<span class="token punctuation">.</span>body <span class="token operator">=</span> scriptAst<span class="token punctuation">.</span>program<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=></span> node <span class="token operator">!==</span> path<span class="token punctuation">.</span>node<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 生成代码字符串</span><span class="token keyword">const</span> newScript <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>scriptAst<span class="token punctuation">)</span><span class="token punctuation">.</span>code</code></pre><p>如果，再需要向 <code>mixins</code> 中注入新的内容呢。</p><p>先看一下 <code>mixins</code> 对应的 <em>AST</em> 长啥样。</p><img src="/2f85891a5103/2.png" class=""><p><code>value.elements</code> 是个数组，数组的每个元素都是一个对象，里面存了关于 <code>mixins</code> 的值信息。照葫芦画瓢，如果需要新增一个 <code>customMixin</code>，就可以把这个 <code>elements</code> 数组改成：</p><pre class="language-diff" data-language="diff"><code class="language-diff">elements = [<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   type: "Identifier",</span><span class="token prefix unchanged"> </span><span class="token line">   name: "TestMixin"</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &#123;</span><span class="token prefix inserted">+</span><span class="token line">   type: "Identifier",</span><span class="token prefix inserted">+</span><span class="token line">   name: "customMixin"</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span>]</code></pre><p>具体实现代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">traverse</span><span class="token punctuation">(</span>scriptAst<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 遍历 export default 节点</span>  <span class="token function">ExportDefaultDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> properties <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>declaration<span class="token punctuation">.</span>properties    <span class="token comment">// 先找到 mixins 节点</span>    <span class="token keyword">const</span> mixins <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">property</span> <span class="token operator">=></span> property<span class="token punctuation">.</span>key<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"mixins"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> customMixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"customMixin"</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 插入 customMixin</span>    mixins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>customMixin<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>回顾一下，在第一步中，我们拿到了 <code>importMixin</code> 和 <code>customMixin</code>，这两个需要添加到 <code>script</code> 标签里，<code>importMixinNames</code> 是需要注入的名称列表。第二步里，我们解析得到了 <code>script</code> 中的内容。刚才，我们又向 <code>mixins</code> 中插入了新的 <code>mixin</code>。有了这些后，我们就可以生成一份新的 <em>Vue</em> 文件字符串。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vue-template-compiler"</span><span class="token punctuation">)</span><span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/parser"</span><span class="token punctuation">)</span><span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/traverse"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token keyword">const</span> generate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/generator"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token comment">// source 来源于第二步提供的 Vue 文件字符串</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> script <span class="token punctuation">&#125;</span> <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">parseComponent</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> start<span class="token punctuation">,</span> end <span class="token punctuation">&#125;</span> <span class="token operator">=</span> script<span class="token comment">// 在原 script 的头部添加 importMixin 和 customMixin</span><span class="token keyword">const</span> scriptContent <span class="token operator">=</span> importMixin <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> customMixin <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> script<span class="token punctuation">.</span>content<span class="token keyword">const</span> scriptAst <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>scriptContent<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"jsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">traverse</span><span class="token punctuation">(</span>scriptAst<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">ImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    scriptAst<span class="token punctuation">.</span>program<span class="token punctuation">.</span>body <span class="token operator">=</span> scriptAst<span class="token punctuation">.</span>program<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=></span> node <span class="token operator">!==</span> path<span class="token punctuation">.</span>node<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">ExportDefaultDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> properties <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>declaration<span class="token punctuation">.</span>properties    <span class="token keyword">const</span> mixins <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">property</span> <span class="token operator">=></span> property<span class="token punctuation">.</span>key<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"mixins"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> newMixins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>importMixinNames<span class="token punctuation">,</span> <span class="token string">"customMixin"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>      name    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mixins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>newMixins<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> newScript <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>scriptAst<span class="token punctuation">)</span><span class="token punctuation">.</span>code<span class="token comment">// 使用新的 script 内容</span><span class="token keyword">const</span> newContent <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newScript<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span></code></pre><h5 id="4-封装成-Loader"><a href="#4-封装成-Loader" class="headerlink" title="4. 封装成 Loader"></a>4. 封装成 <em>Loader</em></h5><blockquote><p><em>Loader</em> 开发参考：</p><ul><li><a href="https://www.webpackjs.com/api/loaders">https://www.webpackjs.com/api/loaders</a></li><li><a href="https://www.webpackjs.com/contribute/writing-a-loader">https://www.webpackjs.com/contribute/writing-a-loader</a></li></ul></blockquote><p><em>Loader</em> 其实就是一个函数，只不过大部分都写在一个单独的 <em>JS</em> 文件里，然后默认导出。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> source <span class="token operator">+</span> <span class="token string">"Hello World"</span><span class="token punctuation">&#125;</span></code></pre><p>上面就是一个简单的 <em>Loader</em> ，往文件内容里追加一个 <code>&quot;Hello World&quot;</code> 字符串。</p><p>除了在上一步中，生成新代码的逻辑之外，还需要 <code>loader-utils</code> 用来获取 <em>Loader</em> 的 <em>options</em> 。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getOptions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"loader-utils"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">// ... 解析 options，生产新代码 newSource</span>  <span class="token keyword">return</span> newSource<span class="token punctuation">&#125;</span></code></pre><p>在配置文件中使用本地 <em>Loader</em> 。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token keyword">const</span> VueMixinsLoader <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"plugins/VueMixinsLoader/index.js"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"vue-loader"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            <span class="token literal-property property">loader</span><span class="token operator">:</span> VueMixinsLoader<span class="token punctuation">,</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">tools</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./test/VueMixinsLoader/src/mixins/mixin.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token literal-property property">tools2</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./test/VueMixinsLoader/src/mixins/mixin2.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token literal-property property">tools3</span><span class="token operator">:</span> <span class="token string">"@test/VueMixinsLoader/src/mixins/mixin3.js"</span><span class="token punctuation">,</span>              <span class="token literal-property property">custom</span><span class="token operator">:</span> VueMixinsLoader<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>                    <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="细节部分"><a href="#细节部分" class="headerlink" title="细节部分"></a>细节部分</h4><p>大致的实现思路就是上述内容，其实还有一些细节问题没有谈到，这里简单说一下：</p><ul><li><code>importMixin</code> 和 <code>customMixin</code> 并没有直接插入在 <code>script</code> 的头部，而是都先转成 AST（<code>importMixinAST</code> 和 <code>customMixinAST</code>）。<code>importMixinAST</code> 插入在了源 <em>Vue</em> 文件 <code>import</code> 语句的前面，<code>customMixinAST</code> 插入在了 <code>import</code> 语句的下面（为了保证代码风格，这是我最后的倔强）。</li><li>源 <em>Vue</em> 组件里，可能会没有 <code>mixins</code> 这个配置项，需要生成一个 <code>mixins</code> 的 AST，然后插入到 <code>ExportDefaultDeclaration</code> 中。</li><li>使用 <em>webpack</em> 打包时，如果使用了 <code>cache-loader</code> 会导致，修改 <em>options</em> 后，重新打包，配置不会生效。需要关闭 <code>cache-loader</code>，并开启 <code>cache: false</code>，确保每次打包配置都能生效。</li></ul><p>从确定要开发这个 <em>Loader</em> 到功能完善，差不多弄了两天半的时间，写这篇文章写了两天，emm。</p><img src="/2f85891a5103/4.png" class=""><p>当我兴致勃勃准备发布到 npm 社区的时候，发现 <code>vue-mixin-loader</code> 这个名字被人占用了，emm。于是就改成了 <code>vue-mixins-loader</code>，突然发现这个名字更符合，好巧不巧，嘻嘻嘻。</p><p>总体来看，结果还蛮不错的，又可以往简历里写新花样了 🤭！</p><blockquote><p>GitHub 仓库：<a href="https://github.com/showlotus/vue-mixins-loader">https://github.com/showlotus/vue-mixins-loader</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 探索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> AST </tag>
            
            <tag> Babel </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当 JSON 字符串更新时添加提示动画🦄 &lt;W17&gt;</title>
      <link href="/0ed07c1d813b.html"/>
      <url>/0ed07c1d813b.html</url>
      
        <content type="html"><![CDATA[<img src="/0ed07c1d813b/banner.jpg" class=""><blockquote><p>为了便于用户能直观地看到配置项的一些属性，于是把整个配置以一个 <em>JSON</em> 串的形式展示。本来打算以一个表格或者列表的形式展示，不过配置项中某些属性是 <em>Object</em> 类型，思来想去，还是 <em>JSON</em> 串更直观一点。但是当某个配置改变时，<em>JSON</em> 里的变动不是很明显（如下图所示）。当这个 <em>JSON</em> 里的属性太多时，就不容易能注意到是哪个配置变了。于是，就想能不能做一个属性变化的提示，当某个配置改变时，显示一个高亮的动画什么的，提示用户这个配置改变了 🤔。想法有了，准备冻手！</p></blockquote><img src="/0ed07c1d813b/problem.gif" class=""><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>将 <em>JSON</em> 串分行，根据当前改变的属性去找到该属性对应的行区间，然后高亮显示这些行。整个流程如下：</p><img src="/0ed07c1d813b/0.png" class=""><h4 id="Step-One：更改属性"><a href="#Step-One：更改属性" class="headerlink" title="Step.One：更改属性"></a>Step.One：更改属性</h4><p>考虑到这个对象的属性太多，专门写个表单去更改，实在太麻烦了。于是，就想了一个方法：随机去更改某个属性。</p><p>这里只对最底层的子属性做修改，例如，对于下方的 <em>obj</em> 对象：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">province</span><span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>    <span class="token literal-property property">county</span><span class="token operator">:</span> <span class="token string">"C"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以修改的属性有：</p><ul><li><code>obj.name</code></li><li><code>obj.age</code></li><li><code>obj.address.province</code></li><li><code>obj.address.city</code></li><li><code>obj.address.county</code></li></ul><p>没有对 <code>obj.address</code> 做更改哦！！！</p><p>按照上方罗列的属性，想必你也猜到了，需要对源对象进行「 扁平化 」处理，也即把上述的 <em>obj</em> 对象转成下面这种格式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> flattenObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"obj.name"</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>  <span class="token string-property property">"obj.age"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token string-property property">"obj.address.province"</span><span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>  <span class="token string-property property">"obj.address.city"</span><span class="token operator">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>  <span class="token string-property property">"obj.address.county"</span><span class="token operator">:</span> <span class="token string">"C"</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>「 扁平化 」的具体实现，可以参考文末的工具函数 <a href="#flattenObj"><big><em>flattenObj</em></big></a>。</p></blockquote><p>已知当前对象可更改的属性有 <em>5</em> 个，随机取一个属性，那么就可以写出下面这段代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">flattenObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>拿到这个 <em>key</em> 后，就可以去做修改了。为了让这个属性更改后的值更具有差异性，可以让更改后的值类型不同于源类型。于是制定了一些更改规则，如下：</p><ul><li><code>Array</code> -&gt; <code>Boolean</code>，即 <code>Array</code> 类型更改后为 <code>Boolean</code> 类型，下面以此类推。</li><li><code>Boolean</code> -&gt; <code>Number</code></li><li><code>Number</code> -&gt; <code>String</code></li><li><code>String</code> -&gt; <code>Array</code></li></ul><p>例如，对于下方的 <em>obj</em> 对象：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token literal-property property">student</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">likes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"pear"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>按照上述规则，更改后的值可能为：</p><pre class="language-diff" data-language="diff"><code class="language-diff">const obj = &#123;<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> name: "Tom",</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> name: [1, 2],</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> age: 20,</span><span class="token prefix unchanged"> </span><span class="token line"> student: true,</span><span class="token prefix unchanged"> </span><span class="token line"> likes: ["apple", "banana", "pear"]</span></span>&#125;</code></pre><p>也可能为：</p><pre class="language-diff" data-language="diff"><code class="language-diff">const obj = &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> name: "Tom",</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> age: 20,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> age: "asx",</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> student: true,</span><span class="token prefix unchanged"> </span><span class="token line"> likes: ["apple", "banana", "pear"]</span></span>&#125;</code></pre><p>也可能为：</p><pre class="language-diff" data-language="diff"><code class="language-diff">const obj = &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> name: "Tom",</span><span class="token prefix unchanged"> </span><span class="token line"> age: 20,</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> student: true,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> student: 239,</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> likes: ["apple", "banana", "pear"]</span></span>&#125;</code></pre><p>也可能为：</p><pre class="language-diff" data-language="diff"><code class="language-diff">const obj = &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> name: "Tom",</span><span class="token prefix unchanged"> </span><span class="token line"> age: 20,</span><span class="token prefix unchanged"> </span><span class="token line"> student: true,</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> likes: ["apple", "banana", "pear"]</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> likes: true</span></span>&#125;</code></pre><blockquote><p>具体实现可以参考文末的工具函数 <a href="#genOtherTypeValue"><big><em>genOtherTypeValue</em></big></a>。</p></blockquote><p>已知需要更新的 <em>key</em> 和需要更改的值了，就可以去对源对象做修改了。</p><p>因为拿到这个 <em>key</em> 是「 扁平化 」后的，也即是链式的。如果想用这个 <em>key</em> 去更改源对象 <em>obj</em> 中对应的属性，需要做一些处理。用一个工具函数 <a href="#updateValByChainKey"><big><em>updateValByChainKey</em></big></a> 根据链式的 <em>key</em> 去更新对象中的值，以及 <a href="#getType"><big><em>getType</em></big></a> 去获取当前的值类型。</p><p>完善上面的代码后，如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">flattenObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">// 新增</span><span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token function">genOtherTypeValue</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token function">updateValByChainKey</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span></code></pre><p>源对象已经更新了，接下来就是生成新的 <em>JSON</em> 串，然后分行。</p><h4 id="Step-Two：生成-JSON-串，并分行"><a href="#Step-Two：生成-JSON-串，并分行" class="headerlink" title="Step.Two：生成 JSON 串，并分行"></a>Step.Two：生成 JSON 串，并分行</h4><p>通过 <code>JSON.stringify(obj, null, 2)</code> 生成 <em>JSON</em> 串。因为要根据行号来添加高亮效果，直接操作整个 <em>JSON</em> 串肯定不行，所以需要对整个 <em>JSON</em> 串进行分行，直接调用 <code>String.split(&quot;\n&quot;)</code> 就行，展示时，起始行号设为 <em>1</em> （如下图所示）。</p><img src="/0ed07c1d813b/1.png" class=""><h4 id="Step-Three：计算行区间"><a href="#Step-Three：计算行区间" class="headerlink" title="Step.Three：计算行区间"></a>Step.Three：计算行区间</h4><p>举个例子，<code>colorMultiType</code> 的行区间就是 <code>[3, 13]</code>、<code>colorMultiType.start</code> 的行区间就是 <code>[4, 7]</code>、<code>colorMultiType.start.color</code> 的行区间就是 <code>[5, 5]</code> 或者 <code>[5]</code>。</p><img src="/0ed07c1d813b/2.png" class=""><p>同样，为了方便记录行区间，也需要进行「 扁平化 」处理，用这个「 扁平化 」后的对象去记录每个属性对应的行区间，获取到各个属性的行区间后的对象 <em>rowObj</em> 如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> rowObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">colorCommon</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">colorMultiType</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorMultiType.start"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorMultiType.start.color"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorMultiType.start.offset"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorMultiType.end"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorMultiType.end.color"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorMultiType.end.offset"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorMultiType.direction"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">colorGradient</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorGradient.show"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorGradient.fromColor"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorGradient.toColor"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorGradient.angle"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">colorTextShadow</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorTextShadow.size"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorTextShadow.color"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"colorTextShadow.show"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">colorGroup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>获取行区间的具体实现，可以参考文末的工具函数 <a href="#getPropRowsFromJSON"><big><em>getPropRowsFromJSON</em></big></a>。</p></blockquote><h4 id="Step-Four：高亮显示行区间"><a href="#Step-Four：高亮显示行区间" class="headerlink" title="Step.Four：高亮显示行区间"></a>Step.Four：高亮显示行区间</h4><p>在 <em>Step.One</em> 中，拿到了更改的属性 <em>key</em> ，在 <em>Step.Three</em> 中拿到了每个属性对应的行区间对象 <em>rowObj</em> ，那么需要高亮的行区间 <code>highLightRows = rowObj[key]</code>。区间行的高亮通过 <em>CSS</em> 添加一个高亮 <em>Class</em> 来实现。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, i) in strList"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"i"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line-wrap"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line-num"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>pre <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"isHighLight(i + 1)"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>text <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">strList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 按 "\n" 分割后的 JSON 串数组</span>      <span class="token literal-property property">highLightRows</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 高亮行区间</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">isHighLight</span><span class="token punctuation">(</span><span class="token parameter">idx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>highLightRows<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token comment">// 因为有些行区间，可能为一个元素或者两个元素</span>      <span class="token comment">// 这里判断索引大于等于第一个元素</span>      <span class="token comment">// 并且小于等于最后一个元素</span>      <span class="token comment">// 这样就都能满足啦</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        idx <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>highLightRows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>        idx <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>highLightRows<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>highLightRows<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">'tip'</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class="language-css" data-language="css"><code class="language-css"><span class="token comment">/* 动画函数 */</span><span class="token atrule"><span class="token rule">@keyframes</span> blingbling</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%,  50%,  100%</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">25%,  75%</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.tip</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> blingbling ease 1s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><div class="iframe-codepen" src="https://codepen.io/showlotus/full/vYaeQLW" width="100%" height="850"></div><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>这里没有考虑数组元素中有对象的情况，默认数组里都是基础数据类型。</li><li><a href="#getPropRowsFromJSON"><big><em>getPropRowsFromJSON</em></big></a> 这个方法，感觉写的不是很好（虽然写的时候快自闭了），应该有更好的方法 🤔。</li><li>已知当前更改的属性了，没有必要把整个对象的所有属性都生成行区间，算是一个可以优化的点。</li></ul><h4 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h4><h5 id="getType"><a href="#getType" class="headerlink" title="getType"></a>getType</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取类型</span><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h5 id="isObject"><a href="#isObject" class="headerlink" title="isObject"></a>isObject</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 判断是否是 Object 类型</span><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"Object"</span><span class="token punctuation">&#125;</span></code></pre><h5 id="flattenObj"><a href="#flattenObj" class="headerlink" title="flattenObj"></a>flattenObj</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 扁平化对象</span><span class="token keyword">function</span> <span class="token function">flattenObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prefix <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      prefix <span class="token operator">+=</span> <span class="token string">"."</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> newKey <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handler</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> newKey<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>newKey<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handler</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span></code></pre><h5 id="updateValByChainKey"><a href="#updateValByChainKey" class="headerlink" title="updateValByChainKey"></a>updateValByChainKey</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 根据链式的 key，更新对象中对应属性的值</span><span class="token keyword">function</span> <span class="token function">updateValByChainKey</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> seqs <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>seqs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">[</span>keys<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> seqs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> seqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> seqs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="genOtherTypeValue"><a href="#genOtherTypeValue" class="headerlink" title="genOtherTypeValue"></a>genOtherTypeValue</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 根据当前类型生成其他类型的值</span><span class="token keyword">function</span> <span class="token function">genOtherTypeValue</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">genRandomInteger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">max<span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> max<span class="token punctuation">)</span> <span class="token operator">+</span> min  <span class="token keyword">const</span> ops <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">genRandomInteger</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> len <span class="token operator">=</span> <span class="token function">genRandomInteger</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">genRandomInteger</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> len <span class="token operator">=</span> <span class="token function">genRandomInteger</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">genRandomInteger</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> ops<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h5 id="getPropRowsFromJSON"><a href="#getPropRowsFromJSON" class="headerlink" title="getPropRowsFromJSON"></a>getPropRowsFromJSON</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取对象转成 JSON 串后，各个属性对应的行区间</span><span class="token keyword">function</span> <span class="token function">getPropRowsFromJSON</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token function-variable function">stringify</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> flattenedObj <span class="token operator">=</span> <span class="token function">flattenObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token keyword">const</span> objJson <span class="token operator">=</span> <span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token keyword">const</span> objJsonArr <span class="token operator">=</span> objJson<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> propStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> spaceStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> rowObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objJsonArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> text <span class="token operator">=</span> objJsonArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">const</span> propName <span class="token operator">=</span> <span class="token function">getPropName</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">const</span> countSpace <span class="token operator">=</span> <span class="token function">countOfStartSpace</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token comment">// 下钻层级</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>countSpace <span class="token operator">></span> spaceStack<span class="token punctuation">[</span>spaceStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      spaceStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>countSpace<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>propName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 上一层级结束</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>spaceStack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> spaceStack<span class="token punctuation">[</span>spaceStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> countSpace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        spaceStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        propStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      spaceStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>countSpace<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      rowObj<span class="token punctuation">[</span>propStack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i      <span class="token keyword">const</span> key <span class="token operator">=</span> propStack<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rowObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        rowObj<span class="token punctuation">[</span>propStack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>propName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      propStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> propStack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>flattenedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flattenedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          rowObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> flattenedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>          i <span class="token operator">+=</span> flattenedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          rowObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        rowObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> rowObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> rowObj  <span class="token comment">// 字符串开头空格的数量</span>  <span class="token keyword">function</span> <span class="token function">countOfStartSpace</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> str<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取属性名</span>  <span class="token keyword">function</span> <span class="token function">getPropName</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+\"([^"]+)":</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res <span class="token operator">?</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给 ViewDesign 加个主题换肤💖 &lt;W16&gt;</title>
      <link href="/95404f938c1c.html"/>
      <url>/95404f938c1c.html</url>
      
        <content type="html"><![CDATA[<img src="/95404f938c1c/banner.jpg" class=""><blockquote><p>最近要做主题换肤的功能，项目用的 UI 框架是 <em>ViewDesign</em> ，只支持定制主题，不支持动态主题。查了好多资料，比如：用 <em>less</em> 变量更换、预设几种主题的 <em>CSS</em> 的文件，再动态切换 <em>link</em> 标签的引入资源路径等等。这些方案的应用场景是，对项目中完全自主开发的模块的颜色进行切换。也即，你自己开发了一个导航栏（Menu）和顶部（Header），这俩你是完全控制的，用上述提到的方案是完全可行的。而 UI 框架是第三方的，用 <em>less</em> 变量替换，也仅限于在编译前，编译后它就是 <em>CSS</em> 格式了，再想用 <em>less</em> 变量是不可行的。而预设几种主题 <em>CSS</em> 文件，对于已经编译后的组件库，外部引入组件库的 <em>CSS</em> 不会对内部有任何影响（也有可能是优先级不够 🤔）。<em>ViewDesign</em> 官方提供了定制主题的方式，可以对一些 <em>less</em> 变量进行重新覆盖，这些变量，在编译后，肯定就转成 <em>CSS</em> 格式了。比如 <code>@color1</code> 编译后就是 <code>red</code>，<code>@color2</code> 编译后就是 <code>blue</code>。它们也是有映射关系的，而且这种关系是一对一的。那么，如果把编译后的 <em>CSS</em> 中的颜色值，都改为 <em>CSS var()</em> 的格式，然后再外部动态设置这些 <em>CSS</em> 变量，是不是就能实现动态主题了？好，开干！</p></blockquote><h4 id="1-安装主题生成工具"><a href="#1-安装主题生成工具" class="headerlink" title="1. 安装主题生成工具"></a>1. 安装主题生成工具</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> iview-theme <span class="token parameter variable">-g</span></code></pre><p>这个工具官方有介绍，版本有点老，不过只需要用它打包一下，够用了。</p><h4 id="2-获取对应版本的样式文件"><a href="#2-获取对应版本的样式文件" class="headerlink" title="2. 获取对应版本的样式文件"></a>2. 获取对应版本的样式文件</h4><img src="/95404f938c1c/1.png" class=""><p>官方虽然说这样可以下载对应版本的，但是我试了，并不可行，可能不支持高版本。如果想要下载指定版本的，可以先下载指定版本的 <em>ViewDesign</em> （我用的是 <em>v4.7.0</em> ）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> view-design@4.7.0</code></pre><p>然后找到 <code>node_modules/view-design/src/styles</code> 目录，这个文件夹下的，就是对应版本的样式文件，复制出来一份就行。</p><h4 id="3-主题色相关颜色转换"><a href="#3-主题色相关颜色转换" class="headerlink" title="3. 主题色相关颜色转换"></a>3. 主题色相关颜色转换</h4><p>下载后的样式文件里，有一个 <code>custom.less</code> 文件，这里罗列了所有可配置的颜色，我们只需要在意所有与主题色有关的就行。如下（后面的注释编号，代表当前的颜色种类，也即共有 10 种颜色与主题色有关）：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">// Color</span><span class="token variable">@primary-color<span class="token punctuation">:</span></span> #2d8cf0<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token variable">@processing-color<span class="token punctuation">:</span></span> <span class="token variable">@primary-color</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token variable">@link-color<span class="token punctuation">:</span></span> #2d8cf0<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token variable">@link-hover-color<span class="token punctuation">:</span></span> <span class="token function">tint</span><span class="token punctuation">(</span><span class="token variable">@link-color</span><span class="token punctuation">,</span> 20%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token variable">@link-active-color<span class="token punctuation">:</span></span> <span class="token function">shade</span><span class="token punctuation">(</span><span class="token variable">@link-color</span><span class="token punctuation">,</span> 5%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token variable">@selected-color<span class="token punctuation">:</span></span> <span class="token function">fade</span><span class="token punctuation">(</span><span class="token variable">@primary-color</span><span class="token punctuation">,</span> 90%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token comment">// Button</span><span class="token variable">@btn-group-border<span class="token punctuation">:</span></span> <span class="token function">shade</span><span class="token punctuation">(</span><span class="token variable">@primary-color</span><span class="token punctuation">,</span> 5%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token variable">@btn-primary-bg<span class="token punctuation">:</span></span> <span class="token variable">@primary-color</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token comment">// Input</span><span class="token variable">@input-hover-border-color<span class="token punctuation">:</span></span> <span class="token variable">@primary-color</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token variable">@input-focus-border-color<span class="token punctuation">:</span></span> <span class="token variable">@primary-color</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token comment">// Slider</span><span class="token variable">@slider-color<span class="token punctuation">:</span></span> <span class="token function">tint</span><span class="token punctuation">(</span><span class="token variable">@primary-color</span><span class="token punctuation">,</span> 20%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token comment">// 特殊的，有些需要额外替换</span><span class="token comment">// 表单的聚焦外阴影</span><span class="token selector">.ivu-input:focus</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 2px <span class="token function">fade</span><span class="token punctuation">(</span><span class="token variable">@primary-color</span><span class="token punctuation">,</span> 20%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span class="token punctuation">&#125;</span><span class="token comment">// 树形组件悬浮和选中时的背景色</span><span class="token selector">.ivu-tree-title:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">tint</span><span class="token punctuation">(</span><span class="token variable">@primary-color</span><span class="token punctuation">,</span> 90%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span class="token punctuation">&#125;</span><span class="token selector">.ivu-tree-title-selected,.ivu-tree-title-selected:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">tint</span><span class="token punctuation">(</span><span class="token variable">@primary-color</span><span class="token punctuation">,</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span><span class="token punctuation">&#125;</span><span class="token comment">// 导航菜单激活时的背景颜色</span><span class="token selector">.ivu-menu-light.ivu-menu-vertical .ivu-menu-item-active:not(.ivu-menu-submenu)</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #f0faff<span class="token punctuation">;</span> <span class="token comment">// 8 => tint(@primary-color, 95%)</span><span class="token punctuation">&#125;</span><span class="token comment">// 不是从主题色中延申而来的颜色，用主题色延申色替换</span><span class="token variable">@table-td-hover-bg<span class="token punctuation">:</span></span> #ebf7ff<span class="token punctuation">;</span> <span class="token comment">// 9 => tint(@primary-color, 90%)</span><span class="token variable">@table-td-highlight-bg<span class="token punctuation">:</span></span> #ebf7ff<span class="token punctuation">;</span> <span class="token comment">// 9 => tint(@primary-color, 90%)</span><span class="token variable">@date-picker-cell-hover-bg<span class="token punctuation">:</span></span> #e1f0fe<span class="token punctuation">;</span> <span class="token comment">// 10 => tint(@primary-color, 85%)</span></code></pre><blockquote><p>你可能注意到了，有些完全和主题色八竿子打不着，确实如此。把所有组件都测试了一遍后，发现有些组件使用的颜色是固定的颜色值，要想和主题色相关联，只能把这个颜色替换成由主题色延申的方式，颜色 8、9 和 10 就是如此，用主题色生成了一个差不多类似的颜色，差别微乎其微，还可以接受。</p></blockquote><p>接着把其中由 <em>less</em> 函数生成的，都转为最后的实际颜色，这一步是为了方便后续的全局替换。</p><blockquote><p>在线编译 <em>less</em> ：<a href="https://www.dute.org/less-to-css">https://www.dute.org/less-to-css</a></p></blockquote><p>转换后如下：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">// Color</span><span class="token variable">@primary-color<span class="token punctuation">:</span></span> #2d8cf0<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token variable">@processing-color<span class="token punctuation">:</span></span> #2d8cf0<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token variable">@link-color<span class="token punctuation">:</span></span> #2d8cf0<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token variable">@link-hover-color<span class="token punctuation">:</span></span> #57a3f3<span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token variable">@link-active-color<span class="token punctuation">:</span></span> #2b85e4<span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token variable">@selected-color<span class="token punctuation">:</span></span> <span class="token function">rgba</span><span class="token punctuation">(</span>45<span class="token punctuation">,</span> 140<span class="token punctuation">,</span> 240<span class="token punctuation">,</span> 0.9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token comment">// Button</span><span class="token variable">@btn-group-border<span class="token punctuation">:</span></span> #2b85e4<span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token variable">@btn-primary-bg<span class="token punctuation">:</span></span> #2d8cf0<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token comment">// Input</span><span class="token variable">@input-hover-border-color<span class="token punctuation">:</span></span> #2d8cf0<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token variable">@input-focus-border-color<span class="token punctuation">:</span></span> #2d8cf0<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token comment">// Slider</span><span class="token variable">@slider-color<span class="token punctuation">:</span></span> #57a3f3<span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token comment">// 特殊的，有些需要额外替换</span><span class="token comment">// 表单的聚焦外阴影</span><span class="token selector">.ivu-input:focus</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 2px <span class="token function">rgba</span><span class="token punctuation">(</span>45<span class="token punctuation">,</span> 140<span class="token punctuation">,</span> 240<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span class="token punctuation">&#125;</span><span class="token comment">// 树形组件悬浮和选中时的背景色</span><span class="token selector">.ivu-tree-title:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #eaf4fe<span class="token punctuation">;</span> <span class="token comment">// 6 tint(@primary-color, 90%)</span><span class="token punctuation">&#125;</span><span class="token selector">.ivu-tree-title-selected,.ivu-tree-title-selected:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #d5e8fc<span class="token punctuation">;</span> <span class="token comment">// 7 tint(@primary-color, 80%)</span><span class="token punctuation">&#125;</span><span class="token comment">// 导航菜单激活时的背景颜色</span><span class="token selector">.ivu-menu-light.ivu-menu-vertical .ivu-menu-item-active:not(.ivu-menu-submenu)</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #f0faff<span class="token punctuation">;</span> <span class="token comment">// 8 => tint(@primary-color, 95%)</span><span class="token punctuation">&#125;</span><span class="token comment">// 不是从主题色中延申而来的颜色，用主题色延申色替换</span><span class="token variable">@table-td-hover-bg<span class="token punctuation">:</span></span> #ebf7ff<span class="token punctuation">;</span> <span class="token comment">// 9 => tint(@primary-color, 90%)</span><span class="token variable">@table-td-highlight-bg<span class="token punctuation">:</span></span> #ebf7ff<span class="token punctuation">;</span> <span class="token comment">// 9 => tint(@primary-color, 90%)</span><span class="token variable">@date-picker-cell-hover-bg<span class="token punctuation">:</span></span> #e1f0fe<span class="token punctuation">;</span> <span class="token comment">// 10 => tint(@primary-color, 85%)</span></code></pre><h4 id="4-修改编译后的-CSS-文件"><a href="#4-修改编译后的-CSS-文件" class="headerlink" title="4. 修改编译后的 CSS 文件"></a>4. 修改编译后的 <em>CSS</em> 文件</h4><p>执行打包命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">iview-theme build <span class="token parameter variable">-o</span> dist/</code></pre><p>如果打包报如下错误，把当前 <em>Node</em> 版本换成 <em><big>v11</big></em> 版本即可，亲测有效（PS：我用的 <em><u>v11.15.0</u></em> ）。</p><img src="/95404f938c1c/2.png" class=""><p>打开 <code>dist/iview.css</code> 文件，将上述的 <big><strong>10</strong></big> 种颜色，都转为以 <em>CSS</em> 变量的方式，同时将预留值设为原颜色值。转换规则如下：</p><ol><li><code>#2d8cf0</code>：替换为 <code>var(--ivu-primary-color, #2d8cf0)</code>，总计 <big><strong>113</strong></big> 个；</li><li><code>#57a3f3</code>：替换为 <code>var(--ivu-link-hover-color, #57a3f3)</code>，总计 <big><strong>46</strong></big> 个；</li><li><code>#2b85e4</code>：替换为 <code>var(--ivu-link-active-color-color, #2b85e4)</code>，总计 <big><strong>22</strong></big> 个；</li><li><code>rgba(45,140,240,.9)</code>：替换为 <code>var(--ivu-selected-color, rgba(45,140,240,.9))</code>，总计 <big><strong>2</strong></big> 个。</li><li><code>rgba(45,140,240,.2)</code>：替换为 <code>var(--ivu-input-shadow-color, rgba(45,140,240,.2))</code>，总计 <big><strong>25</strong></big> 个。</li><li><code>#eaf4fe</code>：替换为 <code>var(--ivu-tree-title-hover-color, #eaf4fe)</code>，总计 <big><strong>1</strong></big> 个。</li><li><code>#d5e8fc</code>：替换为 <code>var(--ivu-tree-title-selected-color, #d5e8fc)</code>，总计 <big><strong>4</strong></big> 个。</li><li><code>#f0faff</code>：替换为 <code>var(--ivu-menu-active-color, #f0faff)</code>，总计 <big><strong>5</strong></big> 个。</li><li><code>#ebf7ff</code>：替换为 <code>var(--ivu-table-hover-bg-color, #ebf7ff)</code>，总计 <big><strong>3</strong></big> 个。</li><li><code>#e1f0fe</code>：替换为 <code>var(--ivu-date-picker-hover-bg-color, #e1f0fe)</code>，总计 <big><strong>2</strong></big> 个。</li></ol><h4 id="5-通过主题色生成各种延申色"><a href="#5-通过主题色生成各种延申色" class="headerlink" title="5. 通过主题色生成各种延申色"></a>5. 通过主题色生成各种延申色</h4><p>延申色都是由 <em>less</em> 内置函数生成的，最好的办法也就是还用 <em>less</em> 提供的函数去生成，经历一番探索，终于找到了 <em>less</em> 中函数的位置（藏的可太深了&#x2F;(ㄒ o ㄒ)&#x2F;~~）。最终的转换方法如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> less <span class="token keyword">from</span> <span class="token string">"less"</span><span class="token keyword">const</span> Color <span class="token operator">=</span> less<span class="token punctuation">.</span>color<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> fade<span class="token punctuation">,</span> shade<span class="token punctuation">,</span> tint <span class="token punctuation">&#125;</span> <span class="token operator">=</span> less<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>functionRegistry<span class="token punctuation">.</span>_data<span class="token keyword">function</span> <span class="token function">toRgb</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> alpha<span class="token punctuation">,</span> rgb <span class="token punctuation">&#125;</span> <span class="token operator">=</span> color  <span class="token keyword">const</span> <span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> rgb<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token function">parseInt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgba(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>r<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>g<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>alpha<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token comment">/** * 生成主题色 * @param &#123;string&#125; themeColor 十六进制的颜色值 * @returns */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">genThemeColor</span><span class="token punctuation">(</span><span class="token parameter">themeColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>themeColor<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> linkHoverColor <span class="token operator">=</span> <span class="token function">tint</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> linkActiveColor <span class="token operator">=</span> <span class="token function">shade</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> selectedColor <span class="token operator">=</span> <span class="token function">fade</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">90</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> inputShadowColor <span class="token operator">=</span> <span class="token function">fade</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> treeTitleHoverColor <span class="token operator">=</span> <span class="token function">tint</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">90</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> treeTitleSelectedColor <span class="token operator">=</span> <span class="token function">tint</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">80</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> menuActiveColor <span class="token operator">=</span> <span class="token function">tint</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">95</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> tableHoverBgColor <span class="token operator">=</span> <span class="token function">tint</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">90</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> datePickerHoverBgColor <span class="token operator">=</span> <span class="token function">tint</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">85</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"--ivu-primary-color"</span><span class="token operator">:</span> themeColor<span class="token punctuation">,</span>    <span class="token string-property property">"--ivu-link-hover-color"</span><span class="token operator">:</span> <span class="token function">toRgb</span><span class="token punctuation">(</span>linkHoverColor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string-property property">"--ivu-link-active-color-color"</span><span class="token operator">:</span> <span class="token function">toRgb</span><span class="token punctuation">(</span>linkActiveColor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string-property property">"--ivu-selected-color"</span><span class="token operator">:</span> <span class="token function">toRgb</span><span class="token punctuation">(</span>selectedColor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string-property property">"--ivu-input-shadow-color"</span><span class="token operator">:</span> <span class="token function">toRgb</span><span class="token punctuation">(</span>inputShadowColor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string-property property">"--ivu-tree-title-hover-color"</span><span class="token operator">:</span> <span class="token function">toRgb</span><span class="token punctuation">(</span>treeTitleHoverColor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string-property property">"--ivu-tree-title-selected-color"</span><span class="token operator">:</span> <span class="token function">toRgb</span><span class="token punctuation">(</span>treeTitleSelectedColor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string-property property">"--ivu-menu-active-color"</span><span class="token operator">:</span> <span class="token function">toRgb</span><span class="token punctuation">(</span>menuActiveColor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string-property property">"--ivu-table-hover-bg-color"</span><span class="token operator">:</span> <span class="token function">toRgb</span><span class="token punctuation">(</span>tableHoverBgColor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string-property property">"--ivu-date-picker-hover-bg-color"</span><span class="token operator">:</span> <span class="token function">toRgb</span><span class="token punctuation">(</span>datePickerHoverBgColor<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 设置主题色 CSS 变量</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> colors<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>也即，只需要提供一个主题色，其他延申色全由函数内部自动生成，并且把 <em>CSS</em> 变量设置在 <em>body</em> 上。看下效果如何：</p><img src="/95404f938c1c/result.gif" class=""><p>😁，效果不错吧。最后，如果你也用的 <em>v4.7.0</em> ，我把对应的样式文件和主题色生成 <em>JS</em> 都放在了 <a href="https://github.com/showlotus/view-design-theme">这里</a> ，可以直接下载使用。如果你用的其他版本，可以参考前文流程，去下载对应版本的样式文件，然后将各个颜色统一替换为 <em>CSS</em> 变量的格式。不同版本，基础主题的颜色值可能有差异，建议使用前确认一下。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
            <tag> ViewDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发一个 Prettier 插件：全局替换资源引入路径 &lt;W15&gt;</title>
      <link href="/73cc260bac47.html"/>
      <url>/73cc260bac47.html</url>
      
        <content type="html"><![CDATA[<img src="/73cc260bac47/banner.jpg" class=""><blockquote><p>最近在迁移项目，对于一些资源的引用路径，需要换成一个新的路径。还好之前都把资源引用的方式，改成以 <code>@/..</code> 别名引入的方式，替换起来还算简单。先把新旧路径列出来，然后用 <em>VSCode</em> 的全局替换，因为就只有三种，<em>CV</em> 三次就好了。这种方法，在当时我认为是比较好的了，其实也有打算整个什么脚本啥的，但不知道从何做起。直到当天晚些时候，看到了神光大佬最新发布的一篇文章：<a href="https://mp.weixin.qq.com/s/w1ms6ltvPTU5Hes6o7AJYQ">写一个同事见了会打你的 Prettier 插件</a>。直接对我醍醐灌顶，这不就是我想要的工具嘛！于是就打算写一个 <em>prettier</em> 插件，统一格式化路径，想法有了，开干！</p></blockquote><img src="/73cc260bac47/result.gif" class=""><blockquote><p>最终的效果如上，点击保存后，自动将 <code>path</code> 进行替换。</p></blockquote><p>对于一段普通的 <code>import</code> 代码，转成 <code>AST</code> 后，是下面这样：</p><img src="/73cc260bac47/1.png" class=""><p><code>import</code> 中的 <code>path</code> 对应的就是每个 <code>ImportDeclaration</code> 节点中的 <code>source.value</code>。</p><p>只需要把每个节点中的 <code>source.value</code> 按照指定的替换规则给替换一遍，然后再用替换后的 <code>AST</code> 去生成代码，这样就大功告成了。是不是很简单？完整的 <code>preprocess</code> 如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myPreprocessor</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"jsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> importNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">ImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      importNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">clone</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>      path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 写入自定义替换规则，用一个二维数组记录</span>  <span class="token comment">// 数组第一项为匹配规则，第二项为替换后的路径</span>  <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"^@/packages/mixins/"</span><span class="token punctuation">,</span> <span class="token string">"@/mixins/"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"^@/libs/assist"</span><span class="token punctuation">,</span> <span class="token string">"@/utils/assist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"^@/views/editor/editor-props"</span><span class="token punctuation">,</span> <span class="token string">"@/utils/editor-props"</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span>  rules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">rule</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    rule<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>rule<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  importNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>rule<span class="token punctuation">,</span> t<span class="token punctuation">]</span> <span class="token keyword">of</span> rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value      <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> newAST <span class="token operator">=</span> types<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> importNodes  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> newCode <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>newAST<span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">retainLines</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code  <span class="token keyword">return</span> newCode<span class="token punctuation">&#125;</span></code></pre><p>看看效果如何。</p><img src="/73cc260bac47/2.gif" class=""><p>咦~ 不对劲啊！怎么把 <em>17</em> 行的注释，又重新生成了一次 😦。排查了一下，貌似是因为 <code>newAST</code> 中最后一个 <code>ImportDeclaration</code> 节点中有一个 <code>trailingComments</code> 节点（即 <code>// this is test</code>），而 <code>ast</code> 中第一个 <code>FunctionDeclaration</code> 节点的 <code>leadingComments</code> 中同样也有这个注释节点，导致就生成了两次，那么把最后一个 <code>ImportDeclaration</code> 节点中的 <code>trailingComments</code> 清空是不是就行了？先试一下。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">importNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>rule<span class="token punctuation">,</span> t<span class="token punctuation">]</span> <span class="token keyword">of</span> rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> t<span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 清空最后一个 import 节点的 trailingComments</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> importNodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span>trailingComments <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><img src="/73cc260bac47/3.gif" class=""><p>看样子，没啥问题。不妨再看一个例子。</p><img src="/73cc260bac47/4.gif" class=""><p>这次又把 <code>import</code> 代码间的注释重新生成了一份。(⊙﹏⊙) 总不能去比较每个注释节点，看看是否有相同的，然后再去重吧 🤡。转念一想，可以去看看 <code>prettier-plugin-sort-imports</code> 的源码啊，看看人家怎么处理的。<em>Get ~</em></p><p>源码是用 <em>TS</em> 写的，虽然没写过 <em>TS</em> ，但是大致思路还是能看懂的，吭吭哧哧也算看明白了个大概。总体下来，处理思路大致是这样的：</p><ol><li>先从 <code>importNodes</code> 中获取所有注释节点 <code>allCommentsFromImports</code>。</li><li>然后从源代码片段中，移除 <code>importNodes</code> 与 <code>allCommentsFromImports</code>，得到一份干净的源代码 <code>codeWithoutImportsAndInterpreter</code>。</li><li>最后，用 <code>importNodes</code> 生成的 <code>AST</code> 重新生成的代码 + <code>codeWithoutImportsAndInterpreter</code>。</li></ol><p>大致思路有了，又从 <code>prettier-plugin-sort-imports</code> 那里借鉴了两个方法：<code>getAllCommentsFromNodes</code>（获取 <code>importNodes</code> 中的所有注释）、<code>removeNodesFromOriginalCode</code>（从源代码片段中移除某些节点）。</p><p>完整的 <code>preprocess</code> 如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myPreprocessor</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"jsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> importNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">ImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      importNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">clone</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"^@/packages/mixins/"</span><span class="token punctuation">,</span> <span class="token string">"@/mixins/"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"^@/libs/assist"</span><span class="token punctuation">,</span> <span class="token string">"@/utils/assist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"^@/views/editor/editor-props"</span><span class="token punctuation">,</span> <span class="token string">"@/utils/editor-props"</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span>  rules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">rule</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    rule<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>rule<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  importNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>rule<span class="token punctuation">,</span> t<span class="token punctuation">]</span> <span class="token keyword">of</span> rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value      <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> importNodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      node<span class="token punctuation">.</span>trailingComments <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> newAST <span class="token operator">=</span> types<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> importNodes  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> allCommentsFromImports <span class="token operator">=</span> <span class="token function">getAllCommentsFromNodes</span><span class="token punctuation">(</span>importNodes<span class="token punctuation">)</span>  <span class="token keyword">const</span> nodesToRemoveFromCode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>importNodes<span class="token punctuation">,</span> <span class="token operator">...</span>allCommentsFromImports<span class="token punctuation">]</span>  <span class="token keyword">const</span> codeWithoutImportsAndInterpreter <span class="token operator">=</span> <span class="token function">removeNodesFromOriginalCode</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> nodesToRemoveFromCode<span class="token punctuation">)</span>  <span class="token keyword">const</span> newCode <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>newAST<span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">+</span> codeWithoutImportsAndInterpreter  <span class="token keyword">return</span> newCode<span class="token punctuation">&#125;</span></code></pre><p>再来看看效果如何。完美！</p><img src="/73cc260bac47/5.gif" class=""><p>最后，为了让它看起来更像一个插件，我把路径替换规则挪到了 <code>prettier</code> 的配置中：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// .prettierrc.js</span><span class="token keyword">const</span> myPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./plugins/index"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token literal-property property">arrowParens</span><span class="token operator">:</span> <span class="token string">"avoid"</span><span class="token punctuation">,</span>  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token literal-property property">pathReplaceRules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"^@/packages/mixins/"</span><span class="token punctuation">,</span> <span class="token string">"@/mixins/"</span><span class="token punctuation">,</span> <span class="token string">"^@/libs/assist"</span><span class="token punctuation">,</span> <span class="token string">"@/utils/assist"</span><span class="token punctuation">,</span> <span class="token string">"^@/views/editor/editor-props"</span><span class="token punctuation">,</span> <span class="token string">"@/utils/editor-props"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>myPlugin<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>同时需要在插件中，添加自定义的配置项，不然 <em>prettier</em> 会忽略这个配置。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// plugin/index.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">parsers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">babel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span>babelParsers<span class="token punctuation">.</span>babel<span class="token punctuation">,</span>      <span class="token literal-property property">preprocess</span><span class="token operator">:</span> myPreprocessor    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">pathReplaceRules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"path"</span><span class="token punctuation">,</span>      <span class="token literal-property property">array</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">"Global"</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">"Provide an rule to replace imports."</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在 <em>prettier</em> 官方文档里翻了好久，也没找到如何将配置配成一个二维数组的形式，貌似只能是一维字符串数组的形式。不过，好在可以把配置数组按每两个进行分块，格式化成下面这样：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"^@/packages/mixins/"</span><span class="token punctuation">,</span> <span class="token string">"@/mixins/"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"^@/libs/assist"</span><span class="token punctuation">,</span> <span class="token string">"@/utils/assist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"^@/views/editor/editor-props"</span><span class="token punctuation">,</span> <span class="token string">"@/utils/editor-props"</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>一个简单的算法题：《数组分块》 😁</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">arrayChunk</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> res    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>虽然看起来很怪，但是整体还是不错的，使用后，开发效率咔咔往上升！😜</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AST </tag>
            
            <tag> Prettier </tag>
            
            <tag> Babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 npm-pack-all 批量生成 .tgz 文件 &lt;W14&gt;</title>
      <link href="/c57af76d99fd.html"/>
      <url>/c57af76d99fd.html</url>
      
        <content type="html"><![CDATA[<img src="/c57af76d99fd/banner.jpg" class=""><blockquote><p>最近，组内的一位同学咨询我：能不能离线下载 npm 包，我的回答是：据我所知，应该不行。然后他发来一个链接，说是按照这个操作，最后一步报错。emm，又涨知识了。点开大概看了看，用到了 <code>npm-pack-all</code> 这个工具，可以将 <code>node_modules</code> 中的依赖生成一份 <code>.tgz</code> 文件，再使用 <code>npm install</code> 安装这个 <code>.tgz</code> 文件就好了。感觉挺有意思，不过如果一步一步生成，就显得太呆了，立马就想到了，可以搭配脚本批量生成，同时还可以再重新 <code>npm install</code>。想法有了，开干！</p></blockquote><h4 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h4><p>对可提供的参数配置，简单设计了一下。（有点简陋，哈哈）</p><img src="/c57af76d99fd/design.png" class=""><p>为了不污染原项目，打算在原项目的基础上，复制一份新的项目出来，放在同级目录下。</p><p>用到的插件如下：</p><ul><li><p><a href="https://www.npmjs.com/package/commander">commander</a>：用来获取命令行参数。</p></li><li><p><a href="https://www.npmjs.com/package/fs-extra">fs-extra</a>：用来对文件进行操作，比 <em>node</em> 的原生 <code>fs</code> 更好用，兼容性也更好。</p></li><li><p><a href="https://www.npmjs.com/package/shelljs">shelljs</a>：用于执行命令行命令，后面需要重新 <code>npm install</code>。</p></li><li><p><a href="https://www.npmjs.com/package/npm-pack-all">npm-pack-all</a>：主要插件，没了它就没这个家了。</p></li></ul><h4 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h4><p>新建一个文件夹，然后执行 <code>npm init -y</code> 快速生成一个 <code>package.json</code> 文件。</p><p>如果想用自定义的命令去执行，需要在 <code>package.json</code> 中配置 <code>bin</code> 字段。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// package.json</span><span class="token punctuation">&#123;</span>  <span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"npa-cli"</span><span class="token operator">:</span> <span class="token string">"index.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里配置了一个自定义的命令 <code>npa-cli</code>，后面对应的是一个要执行脚本文件的文件路径，这里的是同级目录下的 <code>index.js</code>。</p><img src="/c57af76d99fd/1.png" class=""><p>与此同时，还需要在执行文件的头部添加 <code>#!/usr/bin/env node</code>。关于这个，官方是这样解释的：</p><blockquote><p>请确保您在 <code>bin</code> 中引用的文件以 <code>#!/usr/bin/env node</code> 开头，否则脚本将在没有 <em>node</em> 可执行文件的情况下启动！<a href="https://www.npmjs.cn/files/package.json/#bin">详细介绍，戳这里~</a></p></blockquote><p>也就是，当前脚本的执行依赖于 <em>node</em> 环境。这一点毋庸置疑，没有 <em>node</em> 环境，房子都要塌。</p><img src="/c57af76d99fd/2.png" class=""><p>添加完自定义命令 <code>npa-cli</code> 后，在当前目录下，能使用这个执行脚本。但是，如果想在别的文件夹下，执行这个命令，会抛出一个 <em>Error</em> ：</p><img src="/c57af76d99fd/3.png" class=""><p>只有在当前项目下安装了这个依赖，或者全局安装后，才能使用依赖对应的命令。但是，目前只是在开发阶段，如何安装呢？</p><p>还好，<code>npm</code> 提供了一个 <code>npm link</code> 命令。关于这个命令，官方是这样介绍的：</p><blockquote><p>包文件夹中的 <code>npm link</code> 将在全局文件夹 <code>&#123;prefix&#125;/lib/node_modules/&lt;package&gt;</code> 中创建一个符号链接，该符号链接链接到执行 <code>npm link</code> 命令的包。<a href="https://www.npmjs.cn/cli/link/#%E8%AF%A6%E6%83%85">详细介绍，戳这里~</a></p></blockquote><img src="/c57af76d99fd/4.png" class=""><p>执行完后，就能正常使用 <code>npa-cli</code> 命令了。</p><h4 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h4><p>大致分为了 5 个步骤：</p><img src="/c57af76d99fd/5.png" class=""><h5 id="1-根据传入的参数，从-package-json-中获取对应的依赖列表。"><a href="#1-根据传入的参数，从-package-json-中获取对应的依赖列表。" class="headerlink" title="1. 根据传入的参数，从 package.json 中获取对应的依赖列表。"></a>1. 根据传入的参数，从 <code>package.json</code> 中获取对应的依赖列表。</h5><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"npm-test"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dayjs"</span><span class="token operator">:</span> <span class="token string">"^1.11.6"</span><span class="token punctuation">,</span>    <span class="token property">"figlet"</span><span class="token operator">:</span> <span class="token string">"^1.5.2"</span><span class="token punctuation">,</span>    <span class="token property">"fs-extra"</span><span class="token operator">:</span> <span class="token string">"^10.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"npm-pack-all"</span><span class="token operator">:</span> <span class="token string">"^1.12.7"</span><span class="token punctuation">,</span>    <span class="token property">"ora"</span><span class="token operator">:</span> <span class="token string">"^5.4.1"</span><span class="token punctuation">,</span>    <span class="token property">"shelljs"</span><span class="token operator">:</span> <span class="token string">"^0.8.5"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"^4.1.3"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>比如，对于上面这个 <code>package.json</code>：</p><ul><li><p><code>npa-cli -a</code> 获取到的依赖列表：<code>dayjs, figlet, fs-extra, npm-pack-all, ora, shelljs, less</code>，也即 <code>dependencies</code> 与 <code>devDependencies</code> 中依赖的汇总。</p></li><li><p><code>npa-cli -p</code> 获取到的依赖列表：<code>dayjs, figlet, fs-extra, npm-pack-all, ora, shelljs</code>，也即只有 <code>dependencies</code> 中的依赖。</p></li><li><p><code>npa-cli -d</code> 获取到的依赖列表： <code>less</code>，也即只有 <code>devDependencies</code> 中的依赖。</p></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 通过 package.json 获取项目中的依赖 * @param &#123;string&#125; dir 当前执行目录 * @param &#123;string&#125; mode 生成模式 * @returns &#123;string[]&#125; 依赖名数组 */</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">parsePackagejson</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>dir<span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">[</span>mode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mode <span class="token operator">=</span> <span class="token string">"a"</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> dependencies <span class="token operator">=</span> ops<span class="token punctuation">[</span>mode<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> packageJson <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">"/package.json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> modules <span class="token operator">=</span> dependencies    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>packageJson<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> modules<span class="token punctuation">&#125;</span></code></pre><h5 id="2-创建新的文件夹"><a href="#2-创建新的文件夹" class="headerlink" title="2. 创建新的文件夹"></a>2. 创建新的文件夹</h5><p>在当前项目的同级目录下，新建一个 <code>[当前文件夹名]-toNpa</code> 的文件夹。可以通过 <code>process.cwd()</code> 获取到当前脚本的执行目录。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 创建新的文件夹 * @returns &#123;string&#125; 新的文件夹名称 */</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">createNewDir</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> currDir <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\w-]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> newDir <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>currDir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-toNpa</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">const</span> newDirPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newDir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  fs<span class="token punctuation">.</span><span class="token function">ensureDirSync</span><span class="token punctuation">(</span>newDirPath<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">create </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newDir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> successfully.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>newDir<span class="token punctuation">,</span> newDirPath<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><h5 id="3-将依赖生成-tgz-文件后，输出到新文件夹中"><a href="#3-将依赖生成-tgz-文件后，输出到新文件夹中" class="headerlink" title="3. 将依赖生成 .tgz 文件后，输出到新文件夹中"></a>3. 将依赖生成 .tgz 文件后，输出到新文件夹中</h5><p>得力于 <code>npm-pack-all</code> 提供了一个 <code>--output</code> 的参数，可以指定 <code>.tgz</code> 文件的输出目录。不过需要注意，有些依赖可能在 <code>node_modules</code> 中深层目录下，比如依赖 <code>@babel/eslint-parser</code>，实际路径是 <code>node_modules/@babel/eslint-parser</code>，在指定 <code>--output</code> 时，需要再往外层目录切换一级。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 生成 .tgz 文件 * @param &#123;string[]&#125; modules 依赖名数组 * @param &#123;string&#125; dir 输出的目录名 */</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">genTGZ</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">modules<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> deps <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> baseDepth <span class="token operator">=</span> <span class="token number">2</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> modules<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> depth <span class="token operator">=</span> modules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length    shell<span class="token punctuation">.</span><span class="token function">cd</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./node_modules/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>modules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    shell<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">npm-pack-all </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>deps <span class="token operator">?</span> <span class="token string">"--dev-deps"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> --output </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">"../"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>        baseDepth <span class="token operator">+</span> depth      <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">silent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">async</span><span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> / </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>modules<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>modules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> has packaged.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    shell<span class="token punctuation">.</span><span class="token function">cd</span><span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>baseDepth <span class="token operator">+</span> depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">const</span> tgzFiles <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=></span> file<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.tgz$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> tgzFiles<span class="token punctuation">&#125;</span></code></pre><h5 id="4-复制项目中的文件到新文件夹中"><a href="#4-复制项目中的文件到新文件夹中" class="headerlink" title="4. 复制项目中的文件到新文件夹中"></a>4. 复制项目中的文件到新文件夹中</h5><p>这一步，除了 <code>node_modules</code> 目录外，其他都需要复制一份。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 将当前文件夹下的文件都复制到目标目录中，除了 node_modules * @param &#123;string&#125; src 源目录 * @param &#123;string&#125; dest 目标目录 */</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">copyFile2NewDir</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> dest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">copySync</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> dest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"node_modules"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The project file was successfully copied.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h5 id="5-在新文件夹下，执行-npm-install"><a href="#5-在新文件夹下，执行-npm-install" class="headerlink" title="5. 在新文件夹下，执行 npm install"></a>5. 在新文件夹下，执行 <code>npm install</code></h5><p>对于项目中的 <code>.tgz</code> 文件，需要执行 <code>npm install [依赖-版本号].tgz</code> 重新安装项目中的依赖。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 重新执行 npm install，更新 package.json * @param &#123;string[]&#125; modules 依赖名数组 * @param &#123;string&#125; dir 目录 */</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">updatePackage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">modules<span class="token punctuation">,</span> dir</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  shell<span class="token punctuation">.</span><span class="token function">cd</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Re-execute npm install..."</span><span class="token punctuation">)</span>  shell<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">npm install </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>modules<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">silent</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>执行完后，会更新 <code>package.json</code> 与 <code>package-lock.json</code>，将依赖的资源路径改为本地的 <code>.tgz</code> 文件。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"npm-test"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dayjs"</span><span class="token operator">:</span> <span class="token string">"file:dayjs-1.11.6.tgz"</span><span class="token punctuation">,</span>    <span class="token property">"figlet"</span><span class="token operator">:</span> <span class="token string">"file:figlet-1.5.2.tgz"</span><span class="token punctuation">,</span>    <span class="token property">"fs-extra"</span><span class="token operator">:</span> <span class="token string">"file:fs-extra-10.1.0.tgz"</span><span class="token punctuation">,</span>    <span class="token property">"nanoid"</span><span class="token operator">:</span> <span class="token string">"file:nanoid-4.0.0.tgz"</span><span class="token punctuation">,</span>    <span class="token property">"npm-pack-all"</span><span class="token operator">:</span> <span class="token string">"file:npm-pack-all-1.12.7.tgz"</span><span class="token punctuation">,</span>    <span class="token property">"ora"</span><span class="token operator">:</span> <span class="token string">"file:ora-5.4.1.tgz"</span><span class="token punctuation">,</span>    <span class="token property">"shelljs"</span><span class="token operator">:</span> <span class="token string">"file:shelljs-0.8.5.tgz"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"file:less-4.1.3.tgz"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>这个插件已发布到 <code>npm</code> 社区，名为 <a href="https://www.npmjs.com/package/npa-cli">npa-cli</a> ，欢迎使用 🤭。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> tgz </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 中如何取消 ViewDesign 中组件内部的指令 &lt;W13&gt;</title>
      <link href="/5a84071bd45a.html"/>
      <url>/5a84071bd45a.html</url>
      
        <content type="html"><![CDATA[<img src="/5a84071bd45a/banner.jpg" class=""><blockquote><p>最近需要做这样一个功能：当展开下拉框或者日期选择器的浮层面板后，点击某个区域，不会让浮层消失。如果有了解过组件库内部源码的话，这种浮层的点击外部后隐藏，大多数组件内部都是通过一个 <code>clickOutside</code> 的指令来实现，而目标功能就是需要实现一块 “禁区”，当点击 “禁区” 时不会触发 <code>clickOutside</code>。本文就是基于该功能的实现对这个指令进行探索，记录自己实现这个功能的全过程，望以后少踩点坑。</p></blockquote><h4 id="走过的弯路"><a href="#走过的弯路" class="headerlink" title="走过的弯路"></a>走过的弯路</h4><p>一开始，我想到的是：如何将这个 <code>clickOutside</code> 指令失效，因为点击浮层外部，然后隐藏浮层，就是因为有这个指令才导致的。于是摸索出了几种<del>方案</del>（反面教材）：</p><h5 id="1-修改组件源码"><a href="#1-修改组件源码" class="headerlink" title="1. 修改组件源码"></a>1. 修改组件源码</h5><p>最简单暴力的方法就是，先复制一份使用的组件到项目下，然后把组件中引入资源的 <big>相对路径</big> 都改为 <big>绝对路径</big>。</p><blockquote><p>下方以 <em>ViewDesign</em> 的 <em>Poptip</em> 为例，<a href="https://github1s.com/view-design/ViewUI/blob/HEAD/src/components/poptip/poptip.vue">戳这里查看组件源码</a>。</p></blockquote><img src="/5a84071bd45a/1.png" class=""><p>这样保证组件可以正式使用，然后找到绑定 <code>clickOutside</code> 指令的地方，删了就行。</p><img src="/5a84071bd45a/2.png" class=""><p>是不是很简单，不过这种操作源代码的代价太大，意味着风险越高，建议谨慎使用。那么有没有不操作源码的方案呢？有的，接着往下看。</p><h5 id="2-禁用指令绑定的回调"><a href="#2-禁用指令绑定的回调" class="headerlink" title="2. 禁用指令绑定的回调"></a>2. 禁用指令绑定的回调</h5><p>再想想，还可以让 <code>clickOutside</code> 绑定的回调方法不执行也能达到相同的目的，也就是 “禁用” <code>handleClose</code>。</p><p>然后写了下面这段代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在组件上绑定一个 ref，通过 ref 获取组件实例</span><span class="token keyword">const</span> poptip <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>poptippoptip<span class="token punctuation">.</span><span class="token function-variable function">handleClose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>poptip<span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>将内部的 <code>handleClose</code> 重写为一个空函数。这一步的前提是确保 <code>handleClose</code> 只有在 <code>clickOutside</code> 中有用到，事实也正是如此，那么就可以放心重写了。这样就可以吗？No No No ~ 你会发现不起任何作用。</p><p>关于这个问题，首先需要了解一下 <code>clickOutside</code> 指令的内部逻辑，源码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">documentHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>binding<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        binding<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    el<span class="token punctuation">.</span>__vueClickOutside__ <span class="token operator">=</span> documentHandler    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> documentHandler<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">unbind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> el<span class="token punctuation">.</span>__vueClickOutside__<span class="token punctuation">)</span>    <span class="token keyword">delete</span> el<span class="token punctuation">.</span>__vueClickOutside__  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意看，它只有两个有效的钩子函数：<code>bind</code> 与 <code>unbind</code>。当首次绑定指令时，会往 <code>document</code> 上添加一个 <code>click</code> 事件监听，回调方法是经过处理后的 <code>handleClose</code>。也即只有当前点击元素不是指令绑定元素或者指令绑定元素的后代元素时，才会触发 <code>handleClose</code>。</p><p>而当我们重写 <code>handleClose</code> 方法后，虽然会触发指令的 <code>update</code> 钩子，但是它是空的，压根不会对 <code>document</code> 上绑定的方法有任何影响，绑定的依然是最开始的 <code>handleClose</code>，不是当前最新的 <code>handleClose</code>。那么，如果在 <code>update</code> 钩子里，先触发 <code>unbind</code>，再触发 <code>bind</code> 是不是就能绑定最新的 <code>handleClose</code> 了？其实还能再简单的，或许我们可以直接解绑这个指令，也就是下面要介绍的方法，手动触发 <code>unbind</code> 钩子。</p><h5 id="3-手动触发-unbind-钩子"><a href="#3-手动触发-unbind-钩子" class="headerlink" title="3. 手动触发 unbind 钩子"></a>3. 手动触发 <code>unbind</code> 钩子</h5><p>首先，需要得到这个指令，每个组件上配置的属性都可以在 <code>$options</code> 上找到，而注册的指令对应的就是 <code>$options.directives</code> 中。</p><p>于是，就可以写出下面的代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>poptip<span class="token punctuation">.</span>$el<span class="token keyword">const</span> clickOutside <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>poptip<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>directives<span class="token punctuation">.</span>clickOutsideclickOutside<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span></code></pre><p>如此一来，指令就被卸载了，无论怎么点击浮层外的区域都不会让浮层消失。</p><p>但是，这与最初想要的 “禁区” 有些不一样，“禁区” 是某块区域内点击时不会关闭浮层，而现在除了浮层外的所有区域都是 “禁区” 了，也不能满足最终的功能要求。</p><p>上述的三种方法，都不如以满足功能需求，都是自己在摸索过程中走的一些弯路。有些倒是挺有趣的，扩展了知识面，也算是积累经验了吧。下面的才是可靠的解决方案，就一句代码，这也印证了那句：一个功能应该实现起来越简单越好，如果很复杂，那么可能实现方式有问题。先将复杂的问题简单化，再逐个击破。</p><h4 id="就一行代码的事"><a href="#就一行代码的事" class="headerlink" title="就一行代码的事"></a>就一行代码的事</h4><p>先展示结果，戳一戳下面，体验一波。</p><div class="iframe-codepen" src="https://codepen.io/olderk/full/QWxxWZw" width="100%" height="500"></div><p>其实就是，阻止禁区元素的 <code>click</code> 事件向上冒泡就可以了。用 <em>Vue</em> 的写法就是下面这样：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div @click<span class="token punctuation">.</span>stop<span class="token operator">></span>禁区<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>是的，就这么简单。是不是感觉上面说的一大堆方案看起来好傻，哈哈。</p><p>关于事件的冒泡，这就要聊聊 <em>JS</em> 中 <em>DOM</em> 元素事件的传播方式，主要有两种：<big>捕获</big> 和 <big>冒泡</big>，先看下图。</p><img src="/5a84071bd45a/event.png" class=""><p>关于这两个名词，先看看官方的解释：</p><ul><li><p>捕获阶段：事件对象通过目标的祖先从 <em>Window</em> 传播到目标的父级。</p></li><li><p>冒泡阶段：事件对象以相反的顺序传播到目标的祖先，从目标的父级开始，到 <em>Window</em> 结束。</p></li></ul><p>简单点说：捕获是自上而下传播，冒泡是自下而上传播。冒泡是默认开启的，而捕获时默认关闭的。</p><p>这是捕获：</p><img src="/5a84071bd45a/capture.gif" class=""><p>这是冒泡：</p><img src="/5a84071bd45a/bubble.gif" class=""><p>这也就解释了，为什么 <code>clickOutside</code> 在 <code>document</code> 上绑定点击事件，点击某个元素时，也会触发这个 <code>click</code> 事件。</p><p>如果想阻止冒泡就可以通过事件对象的 <code>stopPropagation</code> 方法来实现。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 点击时触发</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>如果想开启捕获，可以在注册事件时，携带第三个参数 <code>useCapture</code>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">"click"</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 点击时触发</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><blockquote><p>更多详细内容，可以查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener"><em>MDN</em></a>。</p></blockquote><h4 id="扩展小知识"><a href="#扩展小知识" class="headerlink" title="扩展小知识"></a>扩展小知识</h4><p><em>ViewDesign</em> 中带浮层的组件有很多，而且并不是所有都能只通过关闭 “禁区” 元素的冒泡实现。如果想给其他携带浮层的组件添加 “禁区”，先仔细阅读组件官方文档的 <em>API</em> ，如果 <em>props</em> 中有下面这一项：</p><img src="/5a84071bd45a/4.png" class=""><p>也即会默认开启 <code>capture</code> 模式。因为是自上而下传递，如果仅仅只是在 “禁区” 元素上阻止冒泡是不行的，“禁区” 元素的祖先元素同样会触发事件，依然会关闭浮层，所以还需要将 <code>capture</code> 模式关闭，方才可行。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ViewDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截网页请求并处理数据 &lt;W12&gt;</title>
      <link href="/a9732faecdfe.html"/>
      <url>/a9732faecdfe.html</url>
      
        <content type="html"><![CDATA[<img src="/a9732faecdfe/banner.jpg" class=""><blockquote><p>有时候需要拦截网页的某个请求，收集响应数据，单个请求直接操作就好了；如果是多个相同 API 的请求，如果有个批处理数据的工具岂不美哉。于是，它来了。本来打算弄成一个油猴插件，但是浏览器总是会把插件的打印日志给 “吞掉”，那就先直接在控制台运行脚本，更简单明了。</p></blockquote><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>用到了一个插件 <a href="https://github.com/wendux/ajax-hook">ajaxhook</a>，官方是这样介绍的：</p><blockquote><p>在 <code>XMLHttpRequest</code> 对象发起请求之前、收到响应内容之后以及发生错误时获得处理权，通过它你可以提前对请求、响应以及错误进行一些预处理。</p></blockquote><p>要想在网站上用其他的脚本，首先需要将它引入，这里是通过动态创建 <code>script</code> 标签的方式，将这个标签插入到当前页面中，然后浏览器会自动获取这个 <code>JS</code> 资源。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span>script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text/javascript"</span><span class="token punctuation">)</span>script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>  <span class="token string">"src"</span><span class="token punctuation">,</span>  <span class="token string">"https://unpkg.com/ajax-hook@2.1.3/dist/ajaxhook.min.js"</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span></code></pre><p>创建完标签还不行，还要检测当前是否已经引入完成了。引入完成后，<code>ajaxhook</code> 会在全局定义一个名叫 <code>ah</code> 的变量，那么就可以根据这个变量来判断。</p><p>通过在一个 <code>Promise</code> 实例里，定时检测是否 <code>ah !== undefined</code> 来判断。虽然看起来很笨拙，但是很实用 🤭。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> ajaxHookTimer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ah <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>ajaxHookTimer<span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>脚本其余部分都是按照官网案例，可以自行查阅。</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p>完整的脚本代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* --- 收集数据 Start --- */</span>  <span class="token comment">// 用来收集数据的数组对象</span>  <span class="token keyword">const</span> resData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 需要拦截的请求地址</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment">// 自定义的数据格式化方法</span>  <span class="token keyword">function</span> <span class="token function">formatData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 处理 data */</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* --- 收集数据 End --- */</span>  <span class="token function">injectAjaxHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开启拦截"</span><span class="token punctuation">)</span>    <span class="token function">openIntercept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 注入第三方插件</span>  <span class="token keyword">function</span> <span class="token function">injectAjaxHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"拦截准备中..."</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span>    script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text/javascript"</span><span class="token punctuation">)</span>    script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>      <span class="token string">"src"</span><span class="token punctuation">,</span>      <span class="token string">"https://unpkg.com/ajax-hook@2.1.3/dist/ajaxhook.min.js"</span>    <span class="token punctuation">)</span>    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> ajaxHookTimer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>ah <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>ajaxHookTimer<span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 开启数据拦截</span>  <span class="token keyword">function</span> <span class="token function">openIntercept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ah<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">// 请求发起前进入</span>        <span class="token function-variable function">onRequest</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 请求发生错误时进入，比如超时；注意，不包括http状态码错误，如404仍然会认为请求成功</span>        <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>type<span class="token punctuation">)</span>          handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 请求成功后进入</span>        <span class="token function-variable function">onResponse</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> url <span class="token operator">=</span> res<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUsefulUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>response<span class="token punctuation">)</span>              <span class="token function">formatData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      window    <span class="token punctuation">)</span>    <span class="token comment">// 是否是有效链接</span>    <span class="token keyword">function</span> <span class="token function">isUsefulUrl</span><span class="token punctuation">(</span><span class="token parameter">testUrl</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> path <span class="token operator">=</span> testUrl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\.\w+)?(\/\w+)+(?=(\?|$))</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> testUrl<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>以百度图片搜索为例，每次切换图片时，会发起这个请求。</p><img src="/a9732faecdfe/2.png" class=""><p>假如需要收集响应数据中的 <code>bfe_log_id</code> 字段。</p><img src="/a9732faecdfe/1.png" class=""><p>那么在收集数据部分就可以写成下面这样：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* --- 收集数据 Start --- */</span><span class="token comment">// 用来收集数据的数组对象</span><span class="token keyword">const</span> resData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// 需要拦截的请求地址</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"https://image.baidu.com/simple/simplesearch"</span><span class="token comment">// 自定义的数据格式化方法</span><span class="token keyword">function</span> <span class="token function">formatData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  resData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>bfe_log_id<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/* --- 收集数据 End --- */</span></code></pre><p>打开控制台，粘贴脚本代码，回车。当控制台出现【开启拦截】时，说明拦截器已经加载完毕，就可以发请求了。</p><img src="/a9732faecdfe/result.gif" class=""><p>大功告成，快去试试吧。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 浏览器脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现曲线导航菜单 &lt;W11&gt;</title>
      <link href="/e7cef8a1b722.html"/>
      <url>/e7cef8a1b722.html</url>
      
        <content type="html"><![CDATA[<img src="/e7cef8a1b722/banner.jpg" class=""><blockquote><p>最近看到一个这样的效果，挺有意思的，打算自己动手试一试。</p></blockquote><img src="/e7cef8a1b722/problem.gif" class=""><h2 id="拆解"><a href="#拆解" class="headerlink" title="拆解"></a>拆解</h2><p>首先，看到这个缺口，心里想，这玩意要怎么弄，一头雾水。不过，对于这种形状怪异的，大多数都可以通过多个图形组合做出来，对于这个，可以拆成由下面三部分组成。</p><img src="/e7cef8a1b722/1.png" class=""><center style="margin-bottom: 1em; font-size: 16px; font-weight: bold; color: #000">↓ ↓ ↓</center><img src="/e7cef8a1b722/2.png" class=""><p>对于左右两边的，可以通过圆角半径实现，重点是中间部分：缺口是个半圆的图形。在脑海里迅速头脑风暴一下，<em>CSS</em> 中可以实现一个圆形缺口有关的方案。</p><p><strong>1</strong>. 用伪元素画一个圆，然后背景色与当前整体背景色相同。</p><img src="/e7cef8a1b722/3.gif" class=""><p>这种方法，应该是最容易想到的。不过，有一点不足之处就是，依赖当前整体背景色，如果背景色变化了，或者不是纯色，就很容易暴露问题。较好的办法就是，让这个圆形缺口是透明的，不依赖任何背景色，这样无论背景怎么变，都不会影响到这个缺口。那么就可以采用第二种方案：径向渐变 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/gradient/radial-gradient"><em>radial-gradient</em></a>。</p><p><strong>2</strong>. 径向渐变</p><p>使用下面的样式，很容易就能实现一个缺口为圆形的矩形。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle at top<span class="token punctuation">,</span> transparent 50px<span class="token punctuation">,</span> #000 51px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* transparent 50px, #000 51px */</span><span class="token punctuation">&#125;</span></code></pre><img src="/e7cef8a1b722/4.png" class=""><p>颜色过渡时，适当地添加一点偏移，否则会有很明显的锯齿感。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle at top<span class="token punctuation">,</span> transparent 50px<span class="token punctuation">,</span> #000 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* transparent 50px, #000 50px */</span><span class="token punctuation">&#125;</span></code></pre><img src="/e7cef8a1b722/5.png" class=""><p>就差了 <code>1px</code> 而已，最后的呈现效果天壤之别。</p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>缺口实现了，把三部分组合在一起看看效果。</p><img src="/e7cef8a1b722/6.png" class=""><p>emm，不是那么地严丝合缝。可以通过负 <code>margin-left</code> 和负 <code>margin-right</code> 让左右两边向中间靠拢。不过这可能会导致后续位置的计算有偏差，于是就没采用。只是想往两者中间填充一点东西，也可以通过 <code>box-shadow</code> 实现。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 1.5px 0 #fefdfe<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> -1.5px 0 #fefdfe<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><img src="/e7cef8a1b722/7.png" class=""><p>完美！多么优美的线条！😁</p><h2 id="动起来"><a href="#动起来" class="headerlink" title="动起来"></a>动起来</h2><p>因为这个缺口是可以动的，就想着它和图标区域是分离开的，还有悬浮的小球也是，最后也是分成了三部分来实现：背景缺口，悬浮球，导航栏。</p><p><strong>1</strong>. 背景缺口</p><p>缺口的移动，类似于轮播图，主体区域宽度固定，超出范围的都隐藏。</p><img src="/e7cef8a1b722/8.gif" class=""><p><strong>2</strong>. 悬浮球</p><p>悬浮球要和缺口的移动保持一致，保证每次都在缺口的正中间。</p><p><strong>3</strong>. 导航栏</p><p>将每一小块导航的宽度与缺口的宽度保持一致，这样移动起来也方便计算。触发 <code>active</code> 时，图标上移，显示文字，一个简单的小动画。</p><p>戳一戳下面，体验一波。</p><div class="iframe-codepen" src="https://codepen.io/olderk/full/OJEmqrd" width="100%" height="500"></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>那个曲线，也是折腾了好久，才弄得那么完美，因为对这种曲线也不是特别熟，只能一点点微调，不过最后的结果还是不错的。</li><li>移动位置的偏移量计算那块，因为是三部分，要保证每部分的移动要一致，还是有点麻烦，感觉不是很好。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的类型转换 &lt;W10&gt;</title>
      <link href="/73e1f0916820.html"/>
      <url>/73e1f0916820.html</url>
      
        <content type="html"><![CDATA[<img src="/73e1f0916820/banner.jpg" class=""><h2 id="JS-中的数据类型"><a href="#JS-中的数据类型" class="headerlink" title="JS 中的数据类型"></a>JS 中的数据类型</h2><p>基础数据类型（又称为原始值）：<em>null</em> 、<em>undefined</em> 、<em>boolean</em> 、<em>string</em> 、<em>number</em> 。</p><ul><li>声明时：用栈存储，栈中存放的是对应的值；</li><li>赋值时：生成一块相同值的栈，两个变量对应不同的地址。</li></ul><p>动态数据类型：<em>Array</em> 、<em>Object</em> 、<em>Set</em> 、<em>Map</em> 等。</p><ul><li>声明时：值存放在堆中，栈中存放指向堆的地址；</li><li>赋值时：将栈中的地址赋给另一个变量，也就是两个变量指向堆中的同一个对象。</li></ul><blockquote><p>动态数据类型，可以理解为：长度不固定的数据类型，可以新增或者删除元素。</p></blockquote><h2 id="转换为原始值"><a href="#转换为原始值" class="headerlink" title="转换为原始值"></a>转换为原始值</h2><p>值得一提的是，无论是基础数据类型还是动态数据类型都能转换为原始值。这一点很重要，为变量间的隐式类型转换提供了有力的支持。</p><h3 id="转为-boolean-类型"><a href="#转为-boolean-类型" class="headerlink" title="转为 boolean 类型"></a>转为 <em>boolean</em> 类型</h3><blockquote><p>如果是隐式转换，则内部采用 <code>Boolean()</code> 方法。</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center"><code>undefined</code></td><td align="center"><code>false</code></td></tr><tr><td align="center"><code>null</code></td><td align="center"><code>false</code></td></tr><tr><td align="center"><code>0</code></td><td align="center"><code>false</code></td></tr><tr><td align="center"><code>NaN</code></td><td align="center"><code>false</code></td></tr><tr><td align="center"><code>&quot;&quot;</code>(空字符串)</td><td align="center"><code>false</code></td></tr><tr><td align="center">任何非零数字</td><td align="center"><code>true</code></td></tr><tr><td align="center">任何非空字符串</td><td align="center"><code>true</code></td></tr><tr><td align="center">任何对象类型</td><td align="center"><code>true</code></td></tr></tbody></table><h3 id="转为-string-类型"><a href="#转为-string-类型" class="headerlink" title="转为 string 类型"></a>转为 <em>string</em> 类型</h3><blockquote><p>如果是隐式转换，则内部采用 <code>String()</code> 方法。</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center"><code>undefined</code></td><td align="center"><code>&quot;undefined&quot;</code></td></tr><tr><td align="center"><code>null</code></td><td align="center"><code>&quot;null&quot;</code></td></tr><tr><td align="center"><code>true</code></td><td align="center"><code>&quot;true&quot;</code></td></tr><tr><td align="center"><code>false</code></td><td align="center"><code>&quot;false&quot;</code></td></tr><tr><td align="center">任何数字</td><td align="center">调用 <code>String()</code> 方法</td></tr></tbody></table><ul><li><p><em>Date</em> 转 <em>String</em> ，返回一个描述当前日期的字符串。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Sat Nov 05 2022 14:46:39 GMT+0800 (中国标准时间)"</span></code></pre></li><li><p><em>Array</em> 转 <em>String</em> ，内部调用 <code>toString()</code> 方法，等同于 <code>Array.prototype.join()</code>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "1,2"</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "1,2"</span></code></pre></li><li><p><em>Function</em> 转 <em>String</em> ，内部调用 <code>toString()</code> 方法，返回定义的函数源码字符串。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">1</span>f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "() => 1"</span></code></pre></li><li><p><em>RegExp</em> 转 <em>String</em> ，转成一个 <em>RegExp</em> 字面量字符串。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>reg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "/hello/"</span></code></pre></li><li><p>其余对象 转 <em>String</em> ，内部调用 <code>toString()</code> 方法，返回一个 <code>&quot;[object 当前类型]&quot;</code> 的字符串。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "[object Object]"</span>set<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "[object Set]"</span>map<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "[object Map]"</span></code></pre></li></ul><blockquote><p>以上转换规则，仅适用于在不改变原型对象上 <code>valueOf()</code> 与 <code>toSting()</code> 这两个方法的前提下。</p></blockquote><h3 id="转为-number-类型"><a href="#转为-number-类型" class="headerlink" title="转为 number 类型"></a>转为 <em>number</em> 类型</h3><blockquote><p>如果是隐式转换，则内部采用 <code>Number()</code> 方法。</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center"><code>undefined</code></td><td align="center"><code>NaN</code></td></tr><tr><td align="center"><code>null</code></td><td align="center"><code>0</code></td></tr><tr><td align="center"><code>true</code></td><td align="center"><code>1</code></td></tr><tr><td align="center"><code>false</code></td><td align="center"><code>0</code></td></tr><tr><td align="center"><code>&quot;&quot;</code>(空字符串或全为空格)</td><td align="center"><code>0</code></td></tr><tr><td align="center">其余字符串</td><td align="center">调用 <code>Number()</code> 方法</td></tr></tbody></table><ul><li><em>Date</em> 转 <em>Number</em> ，返回一个毫秒级时间戳，等同于 <code>Date.prototype.getTime()</code>。</li></ul><blockquote><p>以上转换规则，仅适用于在不改变原型对象上 <code>valueOf()</code> 与 <code>toSting()</code> 这两个方法的前提下。</p></blockquote><h2 id="valueOf-与-toString"><a href="#valueOf-与-toString" class="headerlink" title="valueOf() 与 toString()"></a><code>valueOf()</code> 与 <code>toString()</code></h2><p>JS 中所有类型都会继承这两个方法，而且在隐式类型转换阶段，转换结果完全取决于这两个方法的返回值。</p><ul><li><code>valueOf()</code> 把对象转换为原始值（如果存在这样一个原始值），对于大多数对象而言都无法通过原始值表示，所以直接返回当前对象本身。而对于原始值类型，<code>valueOf()</code> 返回的也是原始值本身。</li><li><code>toSting()</code> 返回对象的字符串表示（前文已经介绍过了，这里不再赘述）。</li></ul><p>JS 中的三种对象到原始值转换算法：</p><ul><li><p>偏字符串算法</p><p>返回原始值，尽可能返回一个字符串。首先尝试 <code>toString()</code>，如果该方法有定义并且返回一个原始值，则使用该原始值（即使这个值不是字符串）。如果 <code>toString()</code> 不存在，或者返回值不是一个原始值，则再尝试 <code>valueOf</code> 方法。如果该方法有定义且返回一个原始值，则使用该值。否则，转换失败，报错 <code>TypeError</code>。</p></li><li><p>偏数值算法</p><p>返回原始值，尽可能返回一个数值。与偏字符串算法类似，只不过先尝试 <code>valueOf()</code>，再尝试 <code>toString()</code>。如果转换失败，同样报错 <code>TypeError</code>。</p></li><li><p>无偏好算法</p><p>在转为原始值时，不倾向任何原始值。JS 中除了 <code>Date</code> 对象，使用偏字符串算法，其余类型的对象，都采用偏数值算法。</p></li></ul><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>什么是隐式类型转换？又或者什么时候会发生隐式类型转换？</p><p>总结成一句话就是：当前操作的类型与需要的类型不一致时，就会发生隐式类型转换。比如，在 <code>if</code>、<code>while</code> 等判断语句里，需要一个 <em>Boolean</em> 类型，而传过来一个 <em>Number</em> 或者 <em>String</em> ，这时候就会把这个非 <em>Boolean</em> 类型隐式转化为 <em>Boolean</em> 类型。这种算是比较常见的隐式类型转换了，而且也比较容易理解，接下来重点讲讲几种晦涩难懂的隐式转换。</p><h3 id="操作符"><a href="#操作符" class="headerlink" title="+ 操作符"></a><code>+</code> 操作符</h3><h4 id="一个操作数"><a href="#一个操作数" class="headerlink" title="一个操作数"></a>一个操作数</h4><p>当只有一个操作数时，<code>+</code>（<code>-</code> 也可以，转换后再乘以 <code>-1</code>） 会对当前的值进行隐式 <em>Number</em> 转换。如果是原始值类型，就如前文表中所述的转换规则进行转换 <a href="#转为-number-类型">👆(回到上方表格)</a>。否则，由于需要一个 <em>Number</em> 类型，所以会采用偏数值算法对当前值进行转换。</p><ul><li><p>当操作数是 <em>Array</em> 类型时</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token comment">/** * 转换流程 * 先调用 valueOf() 方法，返回当前数组本身 []，不是原始值 * 再调用 toString() 方法，返回一个字符串 ""，是原始值 * 将 "" 转为 Number 类型，就是 0，所以最后的结果就是 0 */</span></code></pre></li><li><p>当操作数是 <em>Object</em> 类型时</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token comment">/** * 转换流程 * 先调用 valueOf() 方法，返回当前对象本身 &#123;&#125;，不是原始值 * 再调用 toString() 方法，返回一个字符串 "[object Object]"，是原始值 * 将 "[object Object]" 转为 Number 类型，就是 NaN，所以最后的结果就是 NaN */</span></code></pre></li><li><p>如果更改了内部的 <code>valueOf()</code> 或 <code>toString()</code> 方法</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>obj<span class="token punctuation">)</span> <span class="token comment">// -1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>obj2<span class="token punctuation">)</span> <span class="token comment">// -2</span></code></pre></li></ul><h4 id="两个操作数"><a href="#两个操作数" class="headerlink" title="两个操作数"></a>两个操作数</h4><p>当操作数有两个时，不仅可以进行数值加法运算，还可以进行字符串拼接。同为数值或者同为字符串的情况就不考虑了，着重介绍如果操作数中有对象的情况。可以铭记的一点是：<font style="border-bottom: 1px solid #4a4a4a"><em>任何类型与字符串进行 <code>+</code> 运算得到的一定是字符串</em></font>。</p><ul><li><p>操作数中有一个是对象</p><p>先将该对象转为原始值（<code>Date</code> 采用偏字符串算法，其余对象采用偏数值算法），如果另一个操作数是字符串，则将该对象的原始值转为字符串，再拼接两个字符串。否则，都转成数值再相加。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"hi"</span><span class="token punctuation">)</span> <span class="token comment">// Sat Nov 05 2022 20:10:14 GMT+0800 (中国标准时间)hi</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment">// Sat Nov 05 2022 20:10:14 GMT+0800 (中国标准时间)25</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// "[object Object]" + 1 = "[object Object]1"</span><span class="token comment">/** * 转换流程 * obj 先调用 valueOf() 方法，返回当前对象本身 &#123;&#125;，不是原始值 * 再调用 toString() 方法，返回一个字符串 "[object Object]"，是原始值 * "[object Object]" + 1 = "[object Object]1" */</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token comment">// "[object Object]" + "1" = "[object Object]1"</span><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 3 + 1 = 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//  true => 1 -> 3 + 1 = 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// null => 0 -> 3 + 0 = 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">+</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false => 0 -> 3 + 0 = 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// undefined => NaN -> 3 + NaN = NaN</span></code></pre></li><li><p>两个操作数都是对象</p><p>都先转为原始值，再进行原始值 <code>+</code> 运算。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">+</span> obj2<span class="token punctuation">)</span> <span class="token comment">// "[object Object]" + "" = "[object Object]"</span><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">+</span> obj3<span class="token punctuation">)</span> <span class="token comment">// "[object Object]" + "1,2" = "[object Object]1,2"</span><span class="token keyword">const</span> obj4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">4</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">5</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4 <span class="token operator">+</span> obj5<span class="token punctuation">)</span> <span class="token comment">// 4 + 5 = 9</span></code></pre></li></ul><blockquote><p>由于 <code>+</code> 运算是从左到右进行的，如果是多个操作数的情况，只不过是先计算前一步的结果，然后再与后面的进行运算，同样遵循两个操作数的规则。</p></blockquote><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><p><code>==</code> 、<code>!=</code> 、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code> 和 <code>&gt;=</code> 在进行比较时，允许进行类型转换。</p><ul><li><p>在原始值间比较</p><ul><li><p><code>null</code> 与 <code>undefined</code> 除了它俩之间宽松相等外，它们不与任何原始值宽松相等。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token comment">// 特殊的是，在进行大小比较时，null会先被转为数值后，再进行比较</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">>=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// false</span></code></pre></li><li><p>其余原始值在进行比较时，会转为数值后再进行比较。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">"1.0000"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span> <span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">>=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">>=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">>=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span> <span class="token operator">>=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre></li></ul></li><li><p>对象与原始值比较</p><p>将对象转为原始值后，再比较。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"1,2"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">==</span> <span class="token string">"[object Object]"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">&lt;=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre></li><li><p><code>Date</code> 类型的比较</p><p>由于 <code>&gt;</code> 和 <code>&lt;</code> 使用偏数值的算法，而 <code>Date</code> 转为数值后，是一个表示时间的毫秒时间戳，也就意味着使用 <code>&gt;</code> 和 <code>&lt;</code> 来比较两个日期是可行的。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript-权威指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现状态的「伪更新」? &lt;W9&gt;</title>
      <link href="/039b4a276713.html"/>
      <url>/039b4a276713.html</url>
      
        <content type="html"><![CDATA[<img src="/039b4a276713/banner.jpg" class=""><blockquote><p>最近要做一个与颜色选择器有关功能：当用户在颜色面板里预选颜色时，需要同时更新当前画布的颜色；如果取消选择，则将画布背景重置为初始颜色；如果确定了颜色，则更新当前画布颜色。比较容易想到的方法是，用两个变量分别记录初始值 <em>originValue</em> 与当前值 <em>value</em> ：如果只是选择，那就用去更新 <em>value</em> ；如果取消选择，重置为 <em>originValue</em> ；如果选中，将 <em>originValue</em> 更新为 <em>value</em> 。不过，除了颜色，还有背景图，也需要用到这个类似的功能。既然多个地方用到了，那就写的优雅一点，封装一个类来实现吧。</p></blockquote><p>与上述逻辑相同，需要两个变量用来记录 <em>originValue</em> 和 <em>value</em> ，而且根据不同的操作，可以划分为三种更新方式：</p><ul><li><em>change</em> ：更新 <em>value</em> ；</li><li><em>update</em> ：将 <em>originValue</em> 改为 <em>value</em> ；</li><li><em>reset</em> ：将 <em>value</em> 改为 <em>originValue</em> 。</li></ul><p>在实例化时，需要传入一个初始值，用以构造函数内部初始化。</p><p>大体思路有了，先来实现一个简单的版本。我给它起了一个高大上的名字：<em>PseudoUpdate（伪更新）</em> 。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// PseudoUpdate 1.0</span><span class="token keyword">class</span> <span class="token class-name">PseudoUpdate</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>originValue <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span>  <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>originValue <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span>  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>originValue  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>用法也很简单。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PseudoUpdate</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token comment">// 当预选颜色时</span><span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">newColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  color<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>newColor<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 当确定颜色时</span><span class="token keyword">function</span> <span class="token function">handleUpdate</span><span class="token punctuation">(</span><span class="token parameter">newColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  color<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>newColor<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 当取消选择时</span><span class="token keyword">function</span> <span class="token function">handleReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  color<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><em>ViewDesign</em> 中的 <em>ColorPicker</em> 刚好提供了三个 <em>event</em> ：</p><img src="/039b4a276713/api.png" class=""><p>两者搭配使用就是：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>color<span class="token operator">-</span>picker  v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"color.value"</span>  @on<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleUpdate"</span>  @on<span class="token operator">-</span>active<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleChange"</span>  @on<span class="token operator">-</span>open<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"isOpen => !isOpen &amp;&amp; handleReset()"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><div class="iframe-codepen" src="https://codepen.io/olderk/full/WNyvWqp" width="100%" height="500"></div><p>而实际开发的时候，<em>color</em> 不一定是当前组件中的，有可能是从其他组件中传过来的，这时候，如果需要更新其他组件中的 <em>color</em> ，就需要监听 <code>color.value</code> 的值，然后通知其他组件去更新。</p><p>再或者，可以在类的构造函数中，再传入一个 <em>callback</em> 函数，当内部的 <em>value</em> 发生变化时，去执行这个 <em>callback</em> 方法。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// PseudoUpdate 2.0</span><span class="token keyword">class</span> <span class="token class-name">PseudoUpdate</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>originValue <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>callback <span class="token operator">=</span> callback  <span class="token punctuation">&#125;</span>  <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>originValue <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span>  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>originValue    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>如果在 <em>callback</em> 内部使用到了 <em>this</em> ，这里需要额外谨慎！</p></blockquote><p>两者其实差别不大，相比之下，第二种方法更清晰一点，只需要定义一个 <em>callback</em> 方法，其余的交给 <em>PseudoUpdate</em> 内部去做就可以了，无需关心其他问题。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue：beforeCreate -&gt; created &lt;W8&gt;</title>
      <link href="/9cc2e610b92e.html"/>
      <url>/9cc2e610b92e.html</url>
      
        <content type="html"><![CDATA[<img src="/9cc2e610b92e/banner.png" class=""><blockquote><p>如上图所示，Vue 在 <code>beforeCreate -&gt; created</code> 阶段，按这个步骤进行初始化操作。按照这个顺序，也就意味着后者初始化的时候，可以使用前者已经初始化的变量。例如：在 <code>data</code> 中可以使用 <code>methods</code> 里定义的方法，也可以用 <code>props</code> 引入的属性进行初始化。</p></blockquote><h2 id="initInjections"><a href="#initInjections" class="headerlink" title="initInjections"></a>initInjections</h2><p><em><code>inject</code> 的使用请参考<a href="https://v2.cn.vuejs.org/v2/api/#provide-inject">官方文档</a>。</em></p><ul><li><p>先获取当前实例上注册的 <code>inject</code>，读取每一个 <code>key</code>；</p></li><li><p>然后自底向上不断循环获取父组件的 <code>provide</code> 中是否有提供该 <code>key</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 自底向上循环，获取父组件的 provide</span><span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>provide <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> curr<span class="token punctuation">.</span>provide<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token keyword">break</span>  <span class="token punctuation">&#125;</span>  curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>$parent<span class="token punctuation">&#125;</span></code></pre><ul><li>若找到了，则跳出循环，并返回结果；</li><li>若未找到，则使用配置的默认值 <code>default</code>；</li><li>特殊的，对于 <code>default</code> 为 <code>function</code> 类型（非原始值的默认值），则会将该方法通过 <code>call</code> 修改 <code>this</code> 为当前实例后，再将执行结果返回；</li><li>如果既没找到，也没设置 <code>default</code>，则抛出一个 <code>非生产警告</code>。</li></ul><b></li><li><p>然后对于收集到的结果，会遍历每一个 <code>key</code>，然后通过 <code>defineReactive</code> 注册到当前实例上，而在 <code>defineReactive</code> 前会有一个 “取消响应式” 的操作：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">observerState<span class="token punctuation">.</span>shouldConvert <span class="token operator">=</span> <span class="token boolean">false</span></code></pre><p>这一步就是通知 <code>defineReactive</code> 不要将接下来挂载的数据转换成响应式数据，这也就印证了官方说的 <code>inject</code> 注入的内容不是响应式数据。其实就是把提供的 <code>provide</code> 的内容在引入 <code>inject</code> 的实例上，重新复制了一份。如果是基本数据类型，只是值复制，那么自然而然不是响应式数据，但是如果是引用类型，还是引用的同一个地址，如果源数据是响应式的，那么 <code>inject</code> 引入的也是响应式数据。</p><p>如果想实现基础数据类型的响应式呢？换个角度，如果我们把 <code>provide</code> 提供的属性的 <code>this</code> 绑定在原实例上，那么是否就能通过原实例的 <code>this</code> 访问到原实例上的一些响应式的数据？那么 <code>inject</code> 注入的内容是不是就是响应式的呢？</p><p>看一个例子：</p><b><ul><li><p>父组件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// parent</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">getMsg</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">,</span>      <span class="token function">getMsg2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">getMsg3</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getMsg3<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"parent msg"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><b></li><li><p>子组件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// child</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>getMsg<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>getMsg2<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg2 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>getMsg3<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg3 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"getMsg"</span><span class="token punctuation">,</span> <span class="token string">"getMsg2"</span><span class="token punctuation">,</span> <span class="token string">"getMsg3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">msg1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">msg2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMsg2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">msg3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMsg3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul></li></ul><p>子组件中的 <code>msg1</code> 和 <code>msg3</code> 是响应式的，而 <code>msg2</code> 为空（<code>&quot;&quot;</code>）。这其实就是 <code>this</code> 指向的问题：</p><ul><li><code>msg1</code>：箭头函数的 <code>this</code> 是由创建时的环境决定的，也即 <code>this == ParentVm(父组件实例)</code>，所以 <code>getMsg() == &quot;parent msg&quot;</code>。</li><li><code>msg2</code>：正常的函数调用的 <code>this</code> 由当前的执行环境决定，也即 <code>this == ChildVm(子组件实例)</code>，因为子组件上没有定义 <code>msg</code>，所以 <code>getMsg2() == undefined</code>，通过 <code>&#123;&#123;&#125;&#125;</code> 渲染到页面上就是 <code>&quot;&quot;(空字符串)</code>。</li><li><code>msg3</code>：根据结果论，<code>getMsg</code> 和 <code>getMsg3</code> 的 <code>this</code> 都指向 <code>ParentVm</code>，这里就涉及到 <code>methods</code> 的初始化了，在下面 <code>initMethods</code> 章节里会有详细说明。</li></ul><h2 id="initState"><a href="#initState" class="headerlink" title="initState"></a>initState</h2><h3 id="initProps"><a href="#initProps" class="headerlink" title="initProps"></a>initProps</h3><p><em><code>props</code> 的使用请参考<a href="https://cn.vuejs.org/v2/guide/components-props.html">官方文档</a>。</em></p><ul><li><p>在解析模板生成 render 函数的阶段，会将解析到的 <code>props</code> 数据传递给子组件，在子组件中使用 <code>props</code> 中的参数，会触发对应参数的 <code>getter</code>，然后将子组件中对应的 <code>Watcher</code> 放入当前参数的依赖中，从而实现在父组件更新值后，子组件也会同步更新。</p></li><li><p>在父组件模板中给子组件传递属性，既可以以短杠的形式 <code>user-name</code>，也可以用小驼峰的形式 <code>userName</code>，不过在子组件中注册到 <code>props</code> 中，只能以 <code>userName</code> 的形式接收。</p></li><li><p>只有在当前是根组件时，才会将 <code>props</code> 中的数据转换为响应式数据。因为从父组件传入的 <code>props</code> 都已经在父组件中定义成响应式了，子组件只是引入，并在使用的时候，再往 <code>props</code> 里添加对应的依赖，所以不需要转为响应式。特殊的，对于父组件没有提供，且定义了 <code>default</code> 的 <code>prop</code>，需要将默认值转为响应式。</p></li><li><p><code>Boolean</code> 类型 <code>prop</code> 的处理：以下四种情况都会将子组件的 <code>prop</code> 设置为 <code>true</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>child name <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>child name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>child userName<span class="token operator">=</span><span class="token string">"user-name"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>child user<span class="token operator">-</span>name<span class="token operator">=</span><span class="token string">"user-name"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>比对时，会将 <code>key</code> 进行驼峰转化，即 <code>userName -&gt; user-name</code>，如果与提供的值相等，那么也设置为 <code>true</code>。</p></li><li><p>最后，遍历 <code>props</code> 中的每一项，然后将不在当前 <code>vm</code> 实例上的，设置一层代理，然后挂载在 <code>vm</code> 实例上。</p></li></ul><h3 id="initMethods"><a href="#initMethods" class="headerlink" title="initMethods"></a>initMethods</h3><ul><li>遍历 <code>$options.methods</code>，先检验是否有与 <code>props</code> 中的有重复的，如果有，则抛出一个 <code>非生产警告</code>。注意这只是一个警告，如果没有修正，那么依然还会将当前 <code>methods</code> 挂载在当前实例上（也即，如果某一个 <code>key</code> 同时存在于 <code>props</code> 和 <code>methods</code> 上，那么最后使用时，使用的是 <code>methods</code> 上的）。</li><li>挂载时会通过 <code>bind</code> 修改 <code>methods</code> 的 <code>this</code> 为当前实例。</li></ul><h3 id="initData"><a href="#initData" class="headerlink" title="initData"></a>initData</h3><ul><li><p>特殊的，<code>data</code> 必须是一个对象，或者是一个返回对象的函数。</p></li><li><p>遍历 <code>data</code> 的校验阶段：</p><ul><li>先判断，如果属性已存在于 <code>methods</code> 中，则抛出一个 <code>非生产警告</code>；</li><li>再判断，如果属性已存在于 <code>props</code> 中，抛出一个 <code>非生产警告</code>，但是不会挂载，只有当前属性不以 <code>$</code> 或 <code>_</code> 开头时，才会代理到实例上。</li></ul></li></ul><blockquote><p>Vue 内部使用的代理方法</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">noop</span> <span class="token operator">=</span> <span class="token parameter">_</span> <span class="token operator">=></span> _<span class="token keyword">const</span> sharePropertyDefinition <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">get</span><span class="token operator">:</span> noop<span class="token punctuation">,</span>  <span class="token literal-property property">set</span><span class="token operator">:</span> noop<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> sourceKey<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  sharePropertyDefinition<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">proxyGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  sharePropertyDefinition<span class="token punctuation">.</span><span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">proxySetter</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> sharePropertyDefinition<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></blockquote><h3 id="initComputed"><a href="#initComputed" class="headerlink" title="initComputed"></a>initComputed</h3><p><em><code>computed</code> 的使用请参考<a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7">官方文档</a>。</em></p><ul><li>先检验，如果当前的属性名已存在 <code>vm</code> 上，则不会处理这个属性。</li><li>收集当前 <code>getter</code> 中所有用到的属性的依赖，当这些属性变化时，通知 <code>computed Watcher</code> 去更新。</li></ul><blockquote><p>在 18 年有人提了一个 <em>Issue</em> ：<code>computed</code> 依赖的值发生了变化，但 <code>computed</code> 的值没有改变，仍然会触发 <code>render</code>。官方虽然在后续也重新解决了，不过我最近用最新版的 <em>Vue2.7</em> 试了试，貌似还存在这个问题（<a href="https://codepen.io/olderk/pen/XWqvyKV">戳这里</a>）。</p></blockquote><p>粗略地看了看，尝试解释一下。比如下面这个：<em>sum</em> 依赖于 <em>a</em> 和 <em>b</em> ，其中 <em>sum</em> 的 <em>Watcher</em> 有一个：<code>render Watcher</code>，按理说 <em>a</em> 和 <em>b</em> 的 <em>Watcher</em> 应该只有一个 <code>computed Watcher</code>，那就是当 <em>a</em> 或 <em>b</em> 发生变化后，通知计算属性 <em>sum</em> 重新计算，但是这样无法通知 <em>sum</em> 的 <em>Watcher</em> 去更新。所以 <em>sum</em> 的每个依赖里都会把 <em>sum</em> 的 <em>Watcher</em> 存一份，也即 <em>a</em> 和 <em>b</em> 的 <em>Watcher</em> 里还有一份 <code>render Watcher</code>。然后就导致，就算 <em>a</em> 和 <em>b</em> 的值同时改变了，但是 <em>sum</em> 的结果没变，还是会触发 <code>render Watcher</code>，重新执行一次 <em>render</em> 。虽然在 <em>diff</em> 阶段，最新的一次 <em>render</em> 没有任何变化，但还是会造成性能的浪费。（个人愚见哈 😂）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> sum <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="initWatch"><a href="#initWatch" class="headerlink" title="initWatch"></a>initWatch</h3><p><em><code>watch</code> 的使用请参考<a href="https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8">官方文档</a>。</em></p><p>初始化时，创建 <code>Watcher</code> 与 <code>$watch</code> 使用的是同一个方法。参数类型可以为 <code>String</code>、<code>Function</code>、<code>Object</code> 和 <code>Array</code> 这四种类型。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'handlerWatchB'</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">function</span> <span class="token function">handlerWatchD1</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token function">handlerWatchD2</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>鉴于参数的特殊性，需要对类型为 <code>Array</code> 的特殊处理，批量创建 <code>Watcher</code>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建 Watcher</span><span class="token keyword">function</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    options <span class="token operator">=</span> handler    handler <span class="token operator">=</span> handler<span class="token punctuation">.</span>handler  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    handler <span class="token operator">=</span> vm<span class="token punctuation">[</span>handler<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="initProvide"><a href="#initProvide" class="headerlink" title="initProvide"></a>initProvide</h2><p><em><code>provide</code> 的使用请参考<a href="https://v2.cn.vuejs.org/v2/api/#provide-inject">官方文档</a>。</em></p><ul><li>如果是 <code>object</code> 类型，则直接挂载在当前实例上；</li><li>如果是 <code>function</code> 类型，则通过 <code>call</code> 修改 <code>this</code> 为当前实例后，再将执行结果返回。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 源码 </tag>
            
            <tag> 深入浅出-Vue-js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-resize：监听 DOM 尺寸变化</title>
      <link href="/3240137ccfb8.html"/>
      <url>/3240137ccfb8.html</url>
      
        <content type="html"><![CDATA[<img src="/3240137ccfb8/banner.jpg" class=""><blockquote><p>前两天一个同事遇到一个问题：从当前子应用再切换到另一个子应用，然后再切回来，当前子应用里 <em>echarts</em> 图表的宽度发生了变化，整体都变宽了一些，而且这个问题只有在测试环境下才有，线下开发环境一切正常。试了试，只要触发一次 <em>echarts</em> 自带的 <code>resize</code> 方法，就能将图表样式调整为正常样式了。于是就想到了，之前看过一个 UI 库出的指令 <code>v-resize</code>：当前 DOM 宽高发生变化时，触发对应的方法。本来打算看看它的实现源码，但是这个 UI 库只提供了打包后的版本（花了钱，连源码都看不到 😂），于是打算实现一个【平替版】😁。</p></blockquote><div class="iframe-codepen" src="https://codepen.io/olderk/full/ZEoZpoB" width="100%" height="500"></div><h2 id="ResizeObserver"><a href="#ResizeObserver" class="headerlink" title="ResizeObserver"></a>ResizeObserver</h2><p>采用 <em>ResizeObserver</em> 去监听 DOM 元素的尺寸变化，浏览器兼容性还可以（除了 IE）。如何使用，MDN 上有案例（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver">戳这里</a>），这里就不多说了。</p><img src="/3240137ccfb8/compatibility.png" class=""><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在 <code>new ResizeObserver(handler)</code> 时传入的回调 <code>handler</code> 同 <code>window.resize</code> 一样，只要窗口稍稍改变一点就会频繁触发多次，所以需要给它外面包裹一层节流。试了试节流时间为 <em>200ms</em> 时效果就很好，当然为了扩展性，这个节流时间可由用户自定义，以 <code>v-resize:300=&quot;handler&quot;</code> 的形式传入，就是设置节流时间为 <em>300ms</em> 。如果需要立即触发，添加修饰符 <code>immediate</code>，即 <code>v-resize.immediate=&quot;handler&quot;</code>。其中 <code>handler</code> 为触发的回调方法，必须是个函数。</p><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// directives/resize.js</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">200</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">let</span> isFirstTime <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFirstTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span>      isFirstTime <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">noop</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> wait <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>arg<span class="token punctuation">)</span>    <span class="token keyword">let</span> immediate <span class="token operator">=</span> binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">.</span>immediate <span class="token operator">||</span> <span class="token boolean">false</span>    wait <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>wait<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> wait    <span class="token keyword">const</span> callback <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token operator">||</span> noop    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 是否立即触发</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        immediate <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> rect <span class="token operator">=</span> entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contentRect      <span class="token comment">// 将当前 DOM 的信息返回</span>      <span class="token function">callback</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>    el<span class="token punctuation">.</span>_observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>    el<span class="token punctuation">.</span>_observe<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">unbind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span>_observe<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">delete</span> el<span class="token punctuation">.</span>_observe  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="在-Vue-中使用"><a href="#在-Vue-中使用" class="headerlink" title="在 Vue 中使用"></a>在 Vue 中使用</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"wrap"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>resize<span class="token operator">=</span><span class="token string">"handleResizeLeft"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> leftWidth <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> resize <span class="token keyword">from</span> <span class="token string">'./directives/resize'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> resize <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">leftWidth</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handleResizeLeft</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> width <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>leftWidth <span class="token operator">=</span> width    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ivu-input-number-union &lt;W7&gt;</title>
      <link href="/e8d67c6bb4f7.html"/>
      <url>/e8d67c6bb4f7.html</url>
      
        <content type="html"><![CDATA[<img src="/e8d67c6bb4f7/banner.jpg" class=""><blockquote><p>最近朋友问我，多个数字输入框联动怎么做？他遇到一个需求，表格里的某一列是输入数字输入框，有多行，而最后一行是这些数字的总和。要达到的效果是，当输入框中的数字和超出总和时，清空所有输入框；如果未超出最大值，且还剩一个输入框未输入时，自动对最后一个输入框赋值。刚好前一段时间，做了一个下拉框联动的，两者的大体思路是相同的。首先是采用指令去实现，过程稍稍有点复杂，于是最后又实现了一个二次封装组件的版本。（下面直接通过 iframe 引用了 codepen 上写好的一个案例，可以试一试）</p></blockquote><div class="iframe-codepen" src="https://codepen.io/olderk/full/eYrQBVm" width="100%" height="500"></div><h2 id="指令版本"><a href="#指令版本" class="headerlink" title="指令版本"></a>指令版本</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>多个组件联动，首先想到的就是需要有一个【组】的概念，用来记录这些组件的信息。而要把多个绑定相同指令的组件联系起来，就需要通过它们的组件上下文实例进行联系，也即，要把【组】的信息挂在当前 Vue 实例上，这样绑定在同一个组下的每个组件都能访问到这个【组】里的信息了。为了方便分组，需要在指令里传入一个组名，这里通过指令的 <code>arg</code> 参数传入组名。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>InputNumber v<span class="token operator">-</span>input<span class="token operator">-</span>number<span class="token operator">-</span>union<span class="token operator">:</span>group1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>InputNumber<span class="token operator">></span></code></pre><p>在指令的 <code>bind</code> 阶段，进行初始化操作：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> arg <span class="token punctuation">&#125;</span> <span class="token operator">=</span> binding    <span class="token keyword">const</span> groupName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_ivu-input-number-union-group-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">const</span> that <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context    <span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token punctuation">(</span>that<span class="token punctuation">[</span>groupName<span class="token punctuation">]</span> <span class="token operator">=</span> that<span class="token punctuation">[</span>groupName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>光挂载还不行，还要把当前组件的实时信息同步到【组】中，也即，需要监听每个输入框的值变化，将变化同步到【组】中。只监听也不行，如果当前组件被卸载了，那么监听还存在，可能会产生一些 <em>SideEffect</em> 。所以，还要在指令的解绑阶段，移除监听。在指令中监听属性，采用的是 <em>Vue</em> 的 <code>$watch</code> 方法。这个方法执行完后会返回一个卸载的方法，执行这个方法就会将监听从监听对象的依赖中移除。因此，还需要保存这些监听返回的方法。与 <code>group</code> 类似，也要挂在当前组件上下文中。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>    <span class="token keyword">const</span> watcherName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>groupName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-watch</span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">const</span> that <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context    <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token punctuation">(</span>that<span class="token punctuation">[</span>watcherName<span class="token punctuation">]</span> <span class="token operator">=</span> that<span class="token punctuation">[</span>watcherName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这个监听对象，可能是一个普通属性，也可能是某个对象下的属性。例如，它可以是 <code>value</code>，也可以是 <code>obj.value</code>。这两种形式，<code>$watch</code> 都可以监听得到，前提是需要在指令中提供这个属性的链式字符串。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>InputNumber v<span class="token operator">-</span>input<span class="token operator">-</span>number<span class="token operator">-</span>union<span class="token operator">:</span>group1<span class="token operator">=</span><span class="token string">"&#123; value: 'value' &#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>InputNumber<span class="token operator">></span><span class="token comment">// 或者</span><span class="token operator">&lt;</span>InputNumber v<span class="token operator">-</span>input<span class="token operator">-</span>number<span class="token operator">-</span>union<span class="token operator">:</span>group1<span class="token operator">=</span><span class="token string">"&#123; value: 'obj.value' &#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>InputNumber<span class="token operator">></span></code></pre><p>知道这个需要监听的属性后，就可以收集监听了。同样在 <code>unbind</code> 阶段，卸载对应的监听。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> key <span class="token punctuation">&#125;</span> <span class="token operator">=</span> binding<span class="token punctuation">.</span>value    <span class="token comment">// 收集监听</span>    watcher<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> that<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      group<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal      <span class="token comment">/* ... */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">unbind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> key <span class="token punctuation">&#125;</span> <span class="token operator">=</span> binding<span class="token punctuation">.</span>value    <span class="token keyword">const</span> that <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context    <span class="token comment">// 解绑指令时，卸载监听，移除 watcher 中的属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      watcher<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">delete</span> watcher<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接下来就是监听函数内部的逻辑（重中之重），列一下整体步骤：</p><ul><li>将最新的值更新到【组】中；</li><li>特殊情况处理：<ul><li>如果新值为 <code>null</code>，说明是赋空操作，直接 <code>return</code>；</li><li>如果组中只有一个元素，直接提前 <code>return</code>；</li><li>如果组中有两个元素，当前值变化时，直接更新另一个值；</li><li>如果旧值为 <code>null</code>，并且未填写的输入框数量为 0，说明是对最后一个输入框自动赋值，直接 <code>return</code>；</li></ul></li><li>如果当前已填写值的和大于最大值，则全部赋空，然后 <code>return</code>；</li><li>如果当前未填写值的输入框个数为 1，则对最后一个输入框自动赋值（最大值 - 当前和）。</li></ul><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><blockquote><p>在 <a href="https://codepen.io/olderk/pen/eYrQBVm">codepen.io</a> 中运行。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// input-number-union.js</span><span class="token keyword">const</span> <span class="token function-variable function">noop</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> arg<span class="token punctuation">,</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> binding    <span class="token keyword">const</span> groupName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_ivu-input-number-union-group-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">const</span> watcherName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>groupName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-watch</span><span class="token template-punctuation string">`</span></span>    el<span class="token punctuation">.</span>_group <span class="token operator">=</span> groupName    el<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> watcherName    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> max<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> key <span class="token punctuation">&#125;</span> <span class="token operator">=</span> value    el<span class="token punctuation">.</span>_key <span class="token operator">=</span> key    <span class="token keyword">const</span> that <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context    <span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token punctuation">(</span>that<span class="token punctuation">[</span>groupName<span class="token punctuation">]</span> <span class="token operator">=</span> that<span class="token punctuation">[</span>groupName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token punctuation">(</span>that<span class="token punctuation">[</span>watcherName<span class="token punctuation">]</span> <span class="token operator">=</span> that<span class="token punctuation">[</span>watcherName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    group<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getVal</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment">// 收集监听</span>    watcher<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> that<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      group<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal      <span class="token comment">// 如果新值为 null 说明是清空操作，不需要走下面的逻辑</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>      <span class="token keyword">const</span> groupLen <span class="token operator">=</span> <span class="token function">getGroupLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>groupLen <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>groupLen <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果只有两个输入框时，特别处理</span>        <span class="token comment">// 一个输入框改变，直接更新另一个框的值</span>        <span class="token function">updateOtherKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> currSum <span class="token operator">=</span> <span class="token function">getCurrSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 求和后，大于最大值时，赋空所有值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currSum <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> noEditKeys <span class="token operator">=</span> <span class="token function">hasNoEditKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> noEditKeysLen <span class="token operator">=</span> noEditKeys<span class="token punctuation">.</span>length      <span class="token comment">// 对最后一个输入框自动赋值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>noEditKeysLen <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setVal</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> noEditKeys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max <span class="token operator">-</span> currSum<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">getGroupLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span>length    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">hasNoEditKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> group<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getCurrSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> sum <span class="token operator">+</span> curr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setVal</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">updateOtherKey</span><span class="token punctuation">(</span><span class="token parameter">currKey<span class="token punctuation">,</span> currVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currVal <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> otherKey <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">!==</span> currKey<span class="token punctuation">)</span>      <span class="token function">setVal</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> otherKey<span class="token punctuation">,</span> max <span class="token operator">-</span> currVal<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> keys</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> seqs <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> seqs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> seqs <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>seqs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj<span class="token punctuation">[</span>keys<span class="token punctuation">]</span> <span class="token operator">=</span> val      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> seqs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> key <span class="token operator">=</span> seqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> seqs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            obj <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">unbind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>watcher<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>el<span class="token punctuation">.</span>_watcher<span class="token punctuation">,</span> el<span class="token punctuation">.</span>_group<span class="token punctuation">,</span> el<span class="token punctuation">.</span>_key<span class="token punctuation">]</span>    <span class="token keyword">const</span> that <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context    <span class="token comment">// 组件卸载时，卸载监听，移除 group 中的属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">[</span>watcher<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      that<span class="token punctuation">[</span>watcher<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">delete</span> that<span class="token punctuation">[</span>watcher<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">delete</span> that<span class="token punctuation">[</span>groupName<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">delete</span> el<span class="token punctuation">.</span>_watcher    <span class="token keyword">delete</span> el<span class="token punctuation">.</span>_group    <span class="token keyword">delete</span> el<span class="token punctuation">.</span>_key    <span class="token comment">// 当该组下的输入框都清空后，移除挂载的属性</span>    <span class="token function">tryRemoveKey</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>    <span class="token function">tryRemoveKey</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">tryRemoveKey</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>that<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> that<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="细节方面"><a href="#细节方面" class="headerlink" title="细节方面"></a>细节方面</h3><ul><li>比如一些在 <code>unbind</code> 和 <code>bind</code> 阶段都用到的变量，可以直接在 <code>bind</code> 阶段挂载在当前的 <code>Element</code> 对象上。这样的好处是，不需要在 <code>unbind</code> 阶段再写一遍获取值的逻辑，注意在指令解绑时，把注册的属性删除，以防内存泄漏；</li><li>在当前组件上下文添加一个新属性，为了防止变量名重复，这里没有采用 <code>Symbol</code> 类型。因为要在确保同组下的组件都能访问到同一个组，而每个组件都是独立的，所以就没有使用 <code>Symbol</code> 类型。一般就是以一个几乎不会重复的名称当作前缀，确保唯一即可；</li><li>为了确保用户操作时不会有一些额外的影响，开启了输入框失焦时才去更新当前值。</li></ul><h2 id="组件版本"><a href="#组件版本" class="headerlink" title="组件版本"></a>组件版本</h2><h3 id="与指令版本的差异"><a href="#与指令版本的差异" class="headerlink" title="与指令版本的差异"></a>与指令版本的差异</h3><ul><li>关于 <code>group</code> 和 <code>key</code> 的传参都通过 <code>props</code> 传入。由于 <em>Vue</em> 内部不允许使用 <code>key</code> 关键字作为属性名，就换成了 <code>iKey</code>；</li><li>不需要考虑依赖的卸载。因为是在组件内部监听，卸载会随着组件生命周期的结束而自行移除监听。</li></ul><h3 id="额外遇到的问题"><a href="#额外遇到的问题" class="headerlink" title="额外遇到的问题"></a>额外遇到的问题</h3><p>在对所有值赋空时，出现了一点小问题。当总和超出最大值时，不会对当前编辑的最后一个输入框赋空？</p><img src="/e8d67c6bb4f7/problem.gif" class=""><p>监听的内部逻辑和指令版本的内部逻辑一模一样，怎么到组件这里就不行了？试了在各种组件实例上使用 <code>$forceUpdate</code> 都不行，最后误打误撞试出来的解决办法是，用 <code>$nextTick</code> 把 <code>clearAll</code> 方法包起来。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* ... */</span><span class="token keyword">const</span> currSum <span class="token operator">=</span> <span class="token function">getCurrSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 求和后，大于最大值时，赋空所有值</span><span class="token keyword">if</span> <span class="token punctuation">(</span>currSum <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">/* ... */</span></code></pre><p>仔细思考了一下，新增的输入框初始值为 <code>null</code>，然后当它输入了一个值（它的值由 <code>null -&gt; newVal</code>），导致当前和大于最大值，然后就会执行 <code>clearAll</code> 方法，将所有输入框赋空，它的值又从 <code>newVal -&gt; null</code>，也即 <code>null -&gt; newVal -&gt; null</code>。这一系列操作都是在一轮事件循环里，而 <em>Vue</em> 内部会对同一轮事件循环中多次触发的回调，进行优化，只会执行一次。也即虽然输入框的值改变了两次，最后也只会调用一次回调。</p><p>在 <code>watch</code> 里打印了一下，然而结果是它执行了两次回调：</p><ol><li><code>null -&gt; newVal</code>；</li><li><code>newVal -&gt; null</code>。</li></ol><p>理解错了吗？其实也不完全错，思路是对的，因为值变化了两次，<code>watch</code> 里的打印也很合理。不过这个【只执行一次的回调】在这里就不是 <code>watch</code> 中的监听函数，而是触发 <code>render</code> 的回调。在 <code>updated</code> 里打印日志，发现只会打印一次。<em>Vue</em> 会将同一轮事件循环中的回调全部执行完之后，才会调用 <code>render</code> 去更新视图，防止频繁更新视图，造成一些没必要的效率问题。然而在使用 <code>$nextTick</code> 后，<code>updated</code> 里的日志就会打印两次，也即 <code>render</code> 函数触发了两次。为什么添加了 <code>$nextTick</code> 后就能更新视图了呢？</p><p>未使用 <code>$nextTick</code> 前，由于它的值在这一系列操作下来，还是和初始值相同，在 <em>diff</em> 时，就认为这两个节点是相同的，也就没有更新节点，直接复用，从而导致视图没有更新。而在使用 <code>$nextTick</code> 后，对于触发的两次 <code>render</code> 先命名一下：这里将 <code>null -&gt; newVal</code> 阶段的渲染命名为 <code>renderA</code>，<code>newVal -&gt; null</code> 阶段的渲染命名为 <code>renderB</code>。</p><ul><li>在 <code>renderA</code> 阶段，值由 <code>null -&gt; newVal</code>，在 <em>diff</em> 时，由于绑定的值不同，于是就用新值去更新节点，然后重新渲染。</li><li>在 <code>renderB</code> 阶段，值由 <code>newVal -&gt; null</code>，同样在 <em>diff</em> 时，新老节点还是不同的，依然用新值去更新节点，然后重新渲染。</li></ul><p>这也就解释得通：为什么使用 <code>$nextTick</code> 后就能更新视图了（又对 <em>Vue</em> 底层加深了理解）。</p><p>那么为什么在指令里就能直接更新呢？😑</p><p>怀疑是因为给 <em>InputNumber</em> 包裹了一层导致的，而且是以 <code>&#123; props: $attrs &#125;</code> 的形式传递的参数，<code>$attrs</code> 还不是响应式的，当内部的 <code>$attrs.value</code> 发生变换时不会触发 <code>render</code>。二次封装第三方的组件，感觉坑还很多，以后估计有得踩。。。</p><h3 id="整体代码-1"><a href="#整体代码-1" class="headerlink" title="整体代码"></a>整体代码</h3><blockquote><p>在 <a href="https://codepen.io/olderk/pen/Baxbdpg">codepen.io</a> 中运行。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// input-number-union.vue</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'input-number-union'</span><span class="token keyword">function</span> <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> seqs <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>seqs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">[</span>keys<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> seqs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> seqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> seqs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">group</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'default'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">iKey</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">currVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$attrs<span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">currMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$attrs<span class="token punctuation">.</span>max    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">inputNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">groupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-group-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">watcherName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-watch</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">currVal</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>groupList<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>iKey<span class="token punctuation">]</span> <span class="token operator">=</span> newVal      <span class="token keyword">const</span> groupListLen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getGroupListLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>groupListLen <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>groupListLen <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateOtherKey</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iKey<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> noEditKeys <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNoEditKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> noEditKeysLen <span class="token operator">=</span> noEditKeys<span class="token punctuation">.</span>length      <span class="token comment">// 如果新值为 null 说明是清空操作，不需要走下面的逻辑</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>      <span class="token keyword">const</span> currSum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCurrSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 求和后，大于最大值时，赋空所有值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currSum <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>currMax<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 对最后一个输入框自动赋值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>noEditKeysLen <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">,</span> noEditKeys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currMax <span class="token operator">-</span> currSum<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>iKey<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">]</span> <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>iKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currVal    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">getCurrSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> sum <span class="token operator">+</span> curr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">getGroupListLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupList<span class="token punctuation">)</span><span class="token punctuation">.</span>length    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">getNoEditKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">updateOtherKey</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>currMax<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> otherKey <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> v <span class="token operator">!==</span> key<span class="token punctuation">)</span>      <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">,</span> otherKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currMax <span class="token operator">-</span> val<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">clearOther</span><span class="token punctuation">(</span><span class="token parameter">currKey</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> currKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'InputNumber'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>$attrs<span class="token punctuation">,</span>        <span class="token literal-property property">activeChange</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$listeners<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ViewDesign </tag>
            
            <tag> ivu-0extends </tag>
            
            <tag> ivu-0input-0number </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ivu-select-union &lt;W6&gt;</title>
      <link href="/f956d546f141.html"/>
      <url>/f956d546f141.html</url>
      
        <content type="html"><![CDATA[<img src="/f956d546f141/banner.jpg" class=""><blockquote><p>有这样一个场景，多个下拉框共用同一个下拉列表，如果有一个下拉框选中了某一项，那么该项不能被其他下拉框选中，也就是选中项不能重复。同时每个下拉框的下拉列表也是动态的，会根据已选中的值的变化而变化（看下图）。</p></blockquote><img src="/f956d546f141/result.gif" class=""><h2 id="方案一（外部实现）"><a href="#方案一（外部实现）" class="headerlink" title="方案一（外部实现）"></a>方案一（外部实现）</h2><p>用一个「列表」记录当前所有下拉框已选中的值，每个下拉框的下拉列表都会根据已选中值和当前下拉框的值的变化而变化，前提是 <em>Option</em> 是采用 <code>v-for</code> 渲染的。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>Select v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(_, key) in formData"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"key"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"formData[key]"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Option        v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in getUnselectedList(list, formData[key])"</span>        <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.value"</span>        <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"item.value"</span>        <span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>label <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Option      <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Select<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ivu-select-union-outer"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"a"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"b"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"c"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">formData</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">select1</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token literal-property property">select2</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 所有已选中的值的集合，用 Set 去重</span>    <span class="token function">selectedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> values <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>formData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">!==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据基础列表与当前选中的值，对列表进行过滤</span>    <span class="token function">getUnselectedList</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> currVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectedValue<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> v<span class="token punctuation">.</span>value <span class="token operator">===</span> currVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>这种方案的局限性就是，<em>Option</em> <font style="border-bottom: 1px solid #4a4a4a"><em>必须用</em></font> <code>v-for</code> 的形式渲染（因为需要对 <em>OptionList</em> 进行过滤展示），不能采用静态列举的方式（下面这种）。</p><blockquote><p>这里的 「必须用」 不是绝对的，也可以通过对生成的 <em>VNode</em> 节点进行过滤，不过这与对 <em>OptionList</em> 过滤相比，就稍显麻烦了。后续的方案二用到的就是对 <em>VNode</em> 节点进行过滤，可以自行斟酌。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Select<span class="token operator">></span>  <span class="token operator">&lt;</span>Option value<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span>  <span class="token operator">&lt;</span>Option value<span class="token operator">=</span><span class="token string">"b"</span><span class="token operator">></span><span class="token constant">B</span><span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span>  <span class="token operator">&lt;</span>Option value<span class="token operator">=</span><span class="token string">"c"</span><span class="token operator">></span><span class="token constant">C</span><span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Select<span class="token operator">></span></code></pre><p>一开始的实现，也是采用这种方式，在原有的代码逻辑基础上，改动还是比较小的。不过我想把改动降到最小，于是就有了方案二。</p><h2 id="方案二（内部实现）"><a href="#方案二（内部实现）" class="headerlink" title="方案二（内部实现）"></a>方案二（内部实现）</h2><p>我在想能不能让组件内部自身对下拉列表进行过滤展示，不需要追加任何外界的代码逻辑？</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>最开始是想通过一个指令实现，不过，最后发现不可取。顺便谈谈我对指令的理解：<font style="border-bottom: 1px solid #4a4a4a"><em>仅限于在已渲染后的组件上追加新功能或新属性</em></font> 。这里需要对 <em>VNode</em> 节点进行操作，肯定是在渲染前的阶段进行，所以无法使用指令，于是就采用对组件的二次封装的形式实现。二次封装的好处，可以得到当前组件下的所有待渲染的所有节点，进行中间层处理后再渲染。</p><p>这里你可能会好奇，为什么要对 <em>VNode</em> 进行操作，为什么不对 <code>v-for</code> 的 <em>OptionList</em> 进行操作？如果对 <em>OptionList</em> 进行操作，那么就和方案一相同了，这里我们就是不要对 <em>OptionList</em> 有任何操作，如果不对 <em>OptionList</em> 操作，那么如何对下拉列表里的选项进行过滤展示呢？所以，那就需要对 <em>VNode</em> 进行操作了。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在封装后的下拉框组件（<code>SelectUnion</code>）上添加一个额外的属性 <code>group</code> 。通过这个 <em>group</em> 给每个 <em>Select</em> 进行分组，同组的之间才会有选中值唯一的限制。与方案一类似，每个组都需要一个已选值的集合（采用 <code>Set</code> 类型），就打算把这个集合挂在父组件上。有了已选值的集合还不行，还需要在当前下拉框选中值变化时，将新值更新到已选值的集合中，同时将旧值从已选值集合中移除。当已选值集合变化时，需要通知组内的其他下拉框更新下拉列表。大体思路就是这些，看看整体代码，就 100 行左右，除去注释，不到 100 行。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">/** * 查找兄弟组件 * @param &#123;VNode&#125; context 当前组件上下文 * @param &#123;string&#125; componentName 组件名称 * @param &#123;string&#125; group 组名 * @param &#123;boolean&#125; exceptMe 是否包含当前组件自己 * @returns &#123;VNode[]&#125; */</span><span class="token keyword">function</span> <span class="token function">findBrothersComponents</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> componentName<span class="token punctuation">,</span> group<span class="token punctuation">,</span> exceptMe <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> context<span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>$children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name <span class="token operator">===</span> componentName <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>group <span class="token operator">===</span> group<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>_uid <span class="token operator">===</span> context<span class="token punctuation">.</span>_uid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptMe<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 获取 Option 上绑定的 value 值 */</span><span class="token keyword">function</span> <span class="token function">getOptionVal</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">.</span>propsData<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 判断当前输入框的值是否为空 * @param &#123;*&#125; val 需要判断的值 * @return &#123;boolean&#125; */</span><span class="token keyword">function</span> <span class="token function">isEmptyVal</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> val <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"ivu-select-union"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">group</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">groupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-group-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">groupValueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">currVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$attrs<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">currVal</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmptyVal</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>groupValueList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>groupValueList<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateSiblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">initGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">updateSiblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> siblings <span class="token operator">=</span> <span class="token function">findBrothersComponents</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      siblings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">vc</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        vc<span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>groupValueList<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currVal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateSiblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">filterSelectedValue</span> <span class="token operator">=</span> <span class="token parameter">vnode</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">getOptionVal</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupValueList<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> val <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>filterSelectedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>      <span class="token string">"Select"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$attrs<span class="token punctuation">,</span>        <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$listeners<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      children<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li><p>因为是基于 <em>Select</em> 进行封装，所以要保留原组件上的一些属性和事件，确保它们依然可用，那就需要用到 <code>v-bind=&quot;$attrs&quot;</code>（<font style="border-bottom: 1px solid #3273dc"><a href="https://v2.cn.vuejs.org/v2/api/#vm-attrs"><em>$attrs</em></a></font>） 和 <code>v-on=&quot;$listeners&quot;</code>（<font style="border-bottom: 1px solid #3273dc"><a href="https://v2.cn.vuejs.org/v2/api/#vm-listeners"><em>$listeners</em></a></font>），在二次封装组件中，这两个方法很常见。</p></li><li><p>关于如何得到同组的其他下拉框，借鉴了 <code>ViewDesign</code> 内部的一个方法 <code>findBrothersComponents</code>，这个方法是在父组件下找同类型的兄弟组件，在它的基础上加了个组名的判断。</p></li><li><p>因为 <code>Set</code> 类型在 <code>Vue2</code> 是无法监听到数据变化的，所以换了一个思路：当前下拉框选中值变化时，就去更新一次同组的其他下拉框。更新其他下拉框，通过 <code>$forceUpdate</code>（<font style="border-bottom: 1px solid #3273dc"><a href="https://v2.cn.vuejs.org/v2/api/#vm-forceUpdate"><em>$forceUpdate()</em></a></font>） 实现。</p></li><li><p>在组件销毁时，也要将当前下拉框的值从已选中值集合移除，同时更新兄弟组件。</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>与 <em>Select</em> 的用法一致，如果需要指定 <em>group</em> ，传一个 <em>group</em> 就行，默认为 <code>default</code>（下面的按索引分组）。因为是对 <em>VNode</em> 进行操作，所以无论 <em>Option</em> 使用 <code>v-for</code> 渲染的还是静态列举的，都是可行的。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>SelectUnion  v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(_, key) in data"</span>  <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"key"</span>  v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"data[key]"</span>  <span class="token literal-property property">clearable</span>  <span class="token operator">:</span>group<span class="token operator">=</span><span class="token string">"key % 2"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Option value<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span>  <span class="token operator">&lt;</span>Option value<span class="token operator">=</span><span class="token string">"b"</span><span class="token operator">></span><span class="token constant">B</span><span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span>  <span class="token operator">&lt;</span>Option value<span class="token operator">=</span><span class="token string">"c"</span><span class="token operator">></span><span class="token constant">C</span><span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>SelectUnion<span class="token operator">></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>看下分组后的效果（蓝色阴影为一组，红色阴影为一组）。</p><img src="/f956d546f141/result2.gif" class=""><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>方案一</p><ul><li><p>优点：列表的过滤方式完全可控。</p></li><li><p>缺点：需要额外添加一个变量与一个方法。</p></li></ul></li><li><p>方案二</p><ul><li><p>优点：不用在乎内部的逻辑，只管按照 <em>Select</em> 的使用方式使用；如果后续不需要这个功能，给 <em>group</em> 传递一个唯一的值，使用起来与正常的 <em>Select</em> 并不两样，或者直接替换组件名，绑定的属性与事件完全不用动。</p></li><li><p>缺点：会往父组件上添加新属性（使用时未知），可能会造成一些副效应（与已有的属性名冲突，不过大概率不会）。</p></li></ul></li></ul><p>具体使用，还是看项目里用哪种方案实现起来更方便。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ViewDesign </tag>
            
            <tag> ivu-0extends </tag>
            
            <tag> ivu-0select </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-set-title-attr &lt;W5&gt;</title>
      <link href="/82d33ae12cf8.html"/>
      <url>/82d33ae12cf8.html</url>
      
        <content type="html"><![CDATA[<img src="/82d33ae12cf8/banner.jpg" class=""><blockquote><p>有个需求，下拉框里的选项分组后，因为组名可能会很长，于是就想添加一个文本超出时显示省略号的样式，这个用 CSS 就能做到，小意思。不过，如果文本超出后，我还想有一个能展示当前文字所有信息的提示。因为本身就是一个浮层了，再添加一个浮层就感觉很怪（说实话也不好加 😂），于是就想用原生的 title 实现（先看效果，如下图所示）。</p></blockquote><img src="/82d33ae12cf8/result.gif" class=""><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先可能会想到，把 <em>OptionGroup</em> 上加一个 <em>title</em> 属性，不过这会导致一个问题（以下面的代码为例）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Select style<span class="token operator">=</span><span class="token string">"width:200px"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>OptionGroup    label<span class="token operator">=</span><span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAA"</span>    title<span class="token operator">=</span><span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAA"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>Option v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in cityList1"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"item.value"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.value"</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>label <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>OptionGroup<span class="token operator">></span>  <span class="token operator">&lt;</span>OptionGroup    label<span class="token operator">=</span><span class="token string">"BBBBBBBBBBBBBBBBBBBBBBBB"</span>    title<span class="token operator">=</span><span class="token string">"BBBBBBBBBBBBBBBBBBBBBBBB"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>Option v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in cityList2"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"item.value"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.value"</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>label <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>OptionGroup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Select<span class="token operator">></span></code></pre><img src="/82d33ae12cf8/problem.gif" class=""><p>首先要清楚 <em>title</em> 生效的范围，给元素加上这个属性后，只要是在这个元素的区域内，鼠标移入都会有这个 <em>title</em> 的提示。所以，鼠标在移入每个 <em>Option</em> 上时，出现这个提示，也没毛病。不过，这给用户就会有误导，明明 <em>Option</em> 中的文本是这个，提示出来的却是另一个。所以，这个方法有瑕疵，不可取 🙁。</p><p>先想一想上面的问题，归根结底是没有把 <em>title</em> 加到真正的组名上。翻了翻 <em>OptionGroup</em> 的内部实现，也没有关于 <em>label</em> 的插槽什么的，就是单纯的一个 <code>div</code>。显然，通过组件自身提供的一些属性已经不能达到我们的目的了。我们需要找到那个组名对应的 <em>DOM</em> 节点，然后给这个节点添加一个 <em>title</em> 的属性。给 <em>DOM</em> 节点设置属性，那就需要用到一个方法： <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/setAttribute">Element.setAttribute()</a></em> 。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>通过上面的分析，我们需要得到组名对应的那个 <em>DOM</em> 节点，在 <em>Vue</em> 中操作原生 <em>DOM</em> ，你是不是想到了指令。指令的生命周期方法中的第一个参数（<code>el</code>）就是当前的 <em>DOM</em> 节点。当然，这个 <em>el</em> 不一定就是组名的 <em>DOM</em> 节点（在控制台打印一下就能知道了），如果不是，那组名的 <em>DOM</em> 一定是 <em>el</em> 的子元素，所以我们需要在 <em>el</em> 中查找组名的 <em>DOM</em> 节点，在当前节点下查找后代节点，就需要用到另一个方法： <em><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/querySelector">Element.querySelector()</a></em> 。</p><p>打开控制台，查看一下组名的 <em>DOM</em> 节点的 <em>class</em> （<code>ivu-select-group-title</code>），然后我们只需要按照下面的代码，就能给组名的 <em>DOM</em> 添加一个 <em>title</em> 属性了。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".ivu-select-group-title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"AAA"</span><span class="token punctuation">)</span></code></pre><p>归纳一下，把这个指令做得更通用一点，把那些容易变化的部分做成变量，在使用指令时传入。这里只有 <em>class</em> 与 <em>title</em> 需要外部传入。<em>title</em> 可以写在指令绑定的值中，而 <em>class</em> 可以用指令的 <em>arg</em> 传入。也即：<code>v-set-title-attr:ivu-select-group-title=&quot;title&quot;</code>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>最后的整体代码，很简短。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">setTitleAttr</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> arg <span class="token punctuation">&#125;</span> <span class="token operator">=</span> binding        <span class="token comment">// 判断是否传入了 arg</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>使用：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Select style<span class="token operator">=</span><span class="token string">"width:200px"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>OptionGroup    label<span class="token operator">=</span><span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAA"</span>    v<span class="token operator">-</span>set<span class="token operator">-</span>title<span class="token operator">-</span>attr<span class="token operator">:</span>ivu<span class="token operator">-</span>select<span class="token operator">-</span>group<span class="token operator">-</span>title<span class="token operator">=</span><span class="token string">"'AAAAAAAAAAAAAAAAAAAAAAAA'"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>Option v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in cityList1"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"item.value"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.value"</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>label <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>OptionGroup<span class="token operator">></span>  <span class="token operator">&lt;</span>OptionGroup    label<span class="token operator">=</span><span class="token string">"BBBBBBBBBBBBBBBBBBBBBBBB"</span>    v<span class="token operator">-</span>set<span class="token operator">-</span>title<span class="token operator">-</span>attr<span class="token operator">:</span>ivu<span class="token operator">-</span>select<span class="token operator">-</span>group<span class="token operator">-</span>title<span class="token operator">=</span><span class="token string">"'BBBBBBBBBBBBBBBBBBBBBBBB'"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>Option v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in cityList2"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"item.value"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.value"</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>label <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>OptionGroup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Select<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一周年啦！</title>
      <link href="/db10bdbda40c.html"/>
      <url>/db10bdbda40c.html</url>
      
        <content type="html"><![CDATA[<img src="/db10bdbda40c/banner.jpg" class=""><blockquote><p>封面的图用的还是去年这个时候的必应每日一图，就当做是一种传承吧 🤭。</p></blockquote><p>去年的这个时候，在我那小房间里研究怎么搭建博客，弄了一下午，晚上的时候才给搭好。转眼间，晃晃悠悠一年过去了，好快啊。回顾这一年，满打满算才写了 12 篇，差不多一个月一篇。今年有几个月都没写过，都是最近这两个月，开始坚持【每周一篇】系列，才给顶上来了，今后还要坚持 ✊。</p><p>想想去年的自己，偶尔上班还迟到 😂，下班回去打打游戏看看书，生活没什么压力，过的还算平静。毕竟，当时自己也没什么想法，就老老实实工作就好了，要学的东西还很多。不过，从今年开始，慢慢的觉得平常的任务，做来做去都是那些，也没什么成长空间。于是开始了解 Vue2 底层的实现原理（前提是把 Vue2 的所有的 API 差不多都用过一遍，除了一些比较冷门的），把《深入浅出 Vue.js》看了两遍，获益匪浅。第一遍看的时候，粗略地看一遍，等第二遍再看的时候，边看边记笔记，感觉这样挺不错的，以后看书都可以这样试一试。看完，觉得日常的开发也就不足为惧了，来来去去都是那些东西，也没什么难点了（哈哈，有点膨胀）。</p><p>有一个月，力扣刷了 50 道题，当时写完还挺开心的。不过，之后反思了一下，天天把这么多时间花在刷题上，值不值得。毕竟每天早上到公司，就是刷题。有时候早上没写出来，中午还得继续花时间，甚至有时候下班的时候还要继续写。而且，大部分的题工作中几乎用不到。想了想自己的初衷，不应该这样，还是应该多花时间在前端领域，刷题只是辅助。慢慢地把学习重心放在了前端知识的学习上，每天写写力扣每日一题就行了，如果太难了就不写了，锻炼自己的逻辑思维能力就可以了（每天动动脑子，防止生锈），没必要花太多时间。</p><p>如果说写博客能学到什么，我觉得如果把一件事情坚持一直做下去，是一件很有成就感的事。之前的做的一些任务，起初做的时候感觉还行，但是如果每天都是那些，慢慢地也就失去了开发的成就感，也就对工作失去了动力，天天就权当混日子了（当然，我必不能摆烂！）。就拿大屏组件开发来说，我差不多在这上面开发有半年多了，一个组件的开发流程已经固定了，无非就是实现方案的不同，但也没有啥太大的影响。流水线式的开发，如果一件事让我连着做几次，而且步骤都还相同，我就会思考有没有什么手段替代这种机械式的工作。最近就打算整个代码生成的图形界面，把那些机械化的步骤通过表单配置出来，然后生成一份代码，不知道最后开发出来到底有没有人用，但是兴趣使然，做这个确实比日常开发有意思多了。</p><p>我还是挺热爱前端这个岗位的，我不想因为周边人的影响导致我慢慢对这个岗位失去了兴趣。就像是把热爱当作了工作，但工作中会遇到各种各样的问题，迫使你不得不去违背你热爱的初衷，我不想有一天我会去讨厌我曾热爱的东西。正因为如此，才需要做一些事去维持自己热爱的初衷。况且，写文章还能锻炼自己的语言表达能力，这也是我有所欠缺的地方。有些东西虽然自己知道整个的来龙去脉，但是如何给别人讲明白，让别人也能听明白，也是一门功课。</p><p>以前的自己很没有定力，很难静下心来，说到的事情也做不到，有些事情也坚持不下来。慢慢地，自从坚持把一本书看完之后，似乎找到了点感觉。如果让高中的时候我畅想未来的某一天，我在家里抱着书在那看得津津有味，打死我也想不到。毕竟，高中的时候，我只买书，从不看书。人还是要逼一下的，万事开头难，走出第一步后，后面就简单了。每天早睡早起，早上提前到公司学会东西，晚上晚一点下班，学会东西再回去，这样的生活感觉很充实，贵在坚持，今后也要努力 ✊。</p><p>任何一个你不喜欢又离不开的地方，任何一种你不喜欢又摆脱不了的生活，就是监狱。如果你感到痛苦和不自由，希望你心里永远有一团不会熄灭的火焰，不要麻木，不要被同化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this、闭包和高阶函数 &lt;W4&gt;</title>
      <link href="/d50fc86ec9d3.html"/>
      <url>/d50fc86ec9d3.html</url>
      
        <content type="html"><![CDATA[<img src="/d50fc86ec9d3/banner.jpg" class=""><blockquote><p>这周没遇到什么比较有意思的地方，就拿这篇读书笔记凑数吧，写了也挺久的了，从 9.11 开始写，9.24 才结束，太能拖啦~</p></blockquote><h2 id="this"><a href="#this" class="headerlink" title="this"></a><em>this</em></h2><p><em>this</em> 的指向大致分为四种：</p><h3 id="作为对象的方法调用"><a href="#作为对象的方法调用" class="headerlink" title="作为对象的方法调用"></a>作为对象的方法调用</h3><p>当函数作为对象的方法调用时，<em>this</em> 指向该对象。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Tom"</span></code></pre><h3 id="作为普通函数调用"><a href="#作为普通函数调用" class="headerlink" title="作为普通函数调用"></a>作为普通函数调用</h3><p>当函数作为普通函数被调用时，此时的 <em>this</em> 总指向全局对象。在浏览器中全局对象是 <em>window</em> ，在 <em>Nodejs</em> 中全局对象是 <em>globalThis</em> 。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"globalName"</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> getName <span class="token operator">=</span> obj<span class="token punctuation">.</span>getName<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "globalName"</span></code></pre><p>如果在方法内部调用一个函数，<em>this</em> 也是指向全局对象。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"globalName"</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "globalName"</span></code></pre><p>如果想让内部函数的 <em>this</em> 指向该对象，需要设置一个当前 <em>this</em> 的引用。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"globalName"</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Tom"</span></code></pre><p>或者使用箭头函数定义内部函数，因为箭头函数没有自己的 <em>this</em> ，<em>this</em> 由函数定义时的上下文决定。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"globalName"</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Tom"</span></code></pre><h3 id="构造器调用"><a href="#构造器调用" class="headerlink" title="构造器调用"></a>构造器调用</h3><p>当通过 <code>new</code> 操作符调用函数时，该函数会返回一个对象。通常情况下，构造器里的 <code>this</code> 就指向这个返回的对象。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// Person &#123; name: "Tom", getName: function() &#125;</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Tom"</span></code></pre><p>如果构造器显式地返回了一个 <code>object</code> 类型的对象（<code>obj != null &amp;&amp; typeof obj == &quot;object&quot;</code> 或者 <code>function</code>），那么运算的结果将返回这个对象。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Person2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Jack"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Person3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Person4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// Person &#123; name: "Tom" &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token comment">// &#123; name: "Jack" &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span> <span class="token comment">// [1]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span> <span class="token comment">// [Function (anonymous)]</span></code></pre><p>如果不显式返回任何数据，或者是返回一个非对象类型的数据，那么就不会有上述的问题。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Person2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Person3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>  <span class="token keyword">return</span> <span class="token string">"1243"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Person4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// Person &#123; name: "Tom" &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token comment">// Person &#123; name: "Tom" &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span> <span class="token comment">// Person &#123; name: "Tom" &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span> <span class="token comment">// Person &#123; name: "Tom" &#125;</span></code></pre><h3 id="通过-call、apply-或-bind-调用"><a href="#通过-call、apply-或-bind-调用" class="headerlink" title="通过 call、apply 或 bind 调用"></a>通过 <code>call</code>、<code>apply</code> 或 <code>bind</code> 调用</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Jack"</span><span class="token punctuation">&#125;</span>obj1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Tom"</span>obj1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">// "Jack"</span>obj1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">// "Jack"</span><span class="token keyword">const</span> fn <span class="token operator">=</span> obj1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Jack"</span></code></pre><p>其中 <em>call</em> 和 <em>apply</em> 都是修改当前函数的 <em>this</em> 后，立即执行；而 <em>bind</em> 是修改当前函数的 <em>this</em> 后，并返回一个新的函数。</p><h4 id="call-和-apply-的区别"><a href="#call-和-apply-的区别" class="headerlink" title="call 和 apply 的区别"></a><em>call</em> 和 <em>apply</em> 的区别</h4><p>两者的第一个参数都是指定函数体内 <em>this</em> 对象的指向，如果不想修改 <em>this</em> ，传个 <code>null</code> ，函数体内的 <em>this</em> 默认指向宿主对象。后续的参数：<em>call</em> 需要把每个参数都罗列出来，而 <em>apply</em> 可以使用一个参数的集合，这个集合可以是数组，也可以是类数组。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 1 2 3</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 1 2 3</span></code></pre><p>如果参数数量固定，那么可以使用 <em>call</em> ，如果不固定，那就可以用 <em>apply</em> 。<em>call</em> 只是在 <em>apply</em> 上扩展的语法糖，能用 <em>call</em> 的地方，也能用 <em>apply</em> 。</p><h4 id="手写-call-、apply-和-bind"><a href="#手写-call-、apply-和-bind" class="headerlink" title="手写 call 、apply 和 bind"></a>手写 <em>call</em> 、<em>apply</em> 和 <em>bind</em></h4><p>主要实现原理：通过对象的方法来调用函数，那么函数的 <em>this</em> 指向该对象。在指定的 <em>this</em> 下新增一个方法，这个方法与原方法相同且接收同样的参数，最后将执行结果返回，同时删除该方法。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span> context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    context <span class="token operator">=</span> window  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span> context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    context <span class="token operator">=</span> window  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span> context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      context <span class="token operator">=</span> window    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args1<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">)</span>    <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span>    <span class="token keyword">return</span> res  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过 apply 实现 bind</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span> context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      context <span class="token operator">=</span> window    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>args1<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 <code>this</code></h3><p>箭头函数没有自己的 <code>this</code>，只会从作用域链的上一层继承 <code>this</code>。而且继承后，这个 <code>this</code> 永远不会改变，也即箭头函数的 <code>this</code> 在函数的定义阶段就已经确定了。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"globalName"</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"objName"</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "globalName"</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// "globalName"</span></code></pre><p>即使通过 <code>call</code> 改变 <code>this</code> 指向，对于箭头函数而言，也是毫无作用。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是什么？闭包就是一个函数能够读取其他函数内部的变量。先来看一个例子。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">function</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><em>getCount</em> 能够读取到 <em>fn</em> 内部定义的 <em>count</em> ，这就形成了闭包。</p></blockquote><p>再来看一个经典案例。给 <em>list</em> 中的每一项添加一个 <em>trigger</em> 方法，打印当前的 <em>i</em> ，<em>trigger</em> 方法使用了函数外部的变量，这也形成了闭包。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  el<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/** 输出333*/</span></code></pre><p>因为 <em>var</em> 存在提前变量声明，变量的作用域是整个封闭函数或者全局，而上面的代码不是在一个封闭函数中，那么 <em>i</em> 的作用域就是全局。三个 <em>trigger</em> 分别引用了变量 <em>i</em> ，由于执行 <em>trigger</em> 的时机发生在循环之后，所以当执行 <em>trigger</em> 时，循环就早已经执行完毕了，此时的 <em>i</em> 已经变成了 <em>3</em> 。因为 <em>i</em> 是全局的，所以三个 <em>trigger</em> 里引用的 <em>i</em> 也变成了 <em>3</em> 。按照这个思路，如果把 <em>i</em> 放在一个封闭函数中，是不是就能解决这个问题了？</p><blockquote><p>小知识：函数执行的时候使用的是 <em><strong>定义函数时</strong></em> 生效的变量作用域，而不是 <em><strong>调用函数时</strong></em> 生效的变量作用域。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** 输出012*/</span></code></pre><p>用一个自动执行函数把 <em>trigger</em> 赋值的操作包裹起来，把 <em>i</em> 当作变量传给每一个函数，相当于每个函数内部的 <em>j</em> ，都有了自己的作用域，触发 <em>trigger</em> 时，取各自作用域里的 <em>j</em> 。</p><p>上面的方法中，在每次遍历的时候，在内部定义了一个自动执行函数。遍历？函数？是不是想到了数组的一个方法：<em>forEach</em> 。那么使用 <em>forEach</em> 是不是也能呢？答案是肯定的。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  el<span class="token punctuation">.</span><span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/** 输出012*/</span></code></pre><p>上面两种方法都是采用函数来解决 <em>var</em> 声明变量的作用域是整个封闭函数问题。还可以使用一种更简单的方法：<em>let</em> 。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** 输出012*/</span></code></pre><p><em>let</em> 声明的变量作用域只在其声明的块或子块内部。先看一个例子：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 2</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// ReferenceError: b is not defined</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 2</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 3</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>每个 <code>&#123;&#125;</code> 可以算做一个块，对于 <em>let</em> ，块内声明变量的作用域只作用于当前块；而对于 <em>var</em> ，封闭函数才是它的作用域，所以无论是否在块中声明变量，只要在整个封闭函数内，都能获取该变量，而且对于已存在的变量还能重新定义。</p></blockquote><h3 id="闭包的运用"><a href="#闭包的运用" class="headerlink" title="闭包的运用"></a>闭包的运用</h3><h4 id="私有化变量"><a href="#私有化变量" class="headerlink" title="私有化变量"></a>私有化变量</h4><p>看一个经典的闭包案例。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cnt<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token comment">// ...</span></code></pre><p>在函数 <em>fn</em> 内部定义一个 <em>cnt</em> ，执行 <em>fn</em> 会返回一个新函数，每执行一次这个函数，就会将 <code>cnt + 1</code>。只能通过 <em>f</em> 来更改 <em>cnt</em> 的值，如果想销毁 <em>cnt</em> ，将 <em>f</em> 置空（<code>f = null</code>）。</p><p>把上面的代码，换成面向对象的风格：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">cnt</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token function">addCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cnt<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">addCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>obj<span class="token punctuation">.</span><span class="token function">addCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span></code></pre><h4 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h4><p>可以缓存数字之和的函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">cacheSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token function-variable function">computedSum</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> sum <span class="token operator">+</span> curr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"computed"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computedSum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">cacheSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "computed" 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 10</span></code></pre><p>拦截对象上的某个方法，执行返回的函数后，重置该方法。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> originKey <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">originKey</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> originKey  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi~"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span> <span class="token comment">// "Hi~ Tom"</span><span class="token keyword">const</span> teardownSayHi <span class="token operator">=</span> <span class="token function">intercept</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"sayHi"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I has be intercepted"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span> <span class="token comment">// "Hi~ Tom" "I has be intercepted"</span><span class="token function">teardownSayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span> <span class="token comment">// "Hi~ Tom"</span></code></pre><h3 id="闭包的问题"><a href="#闭包的问题" class="headerlink" title="闭包的问题"></a>闭包的问题</h3><p>引用 《JavaScript 设计模式与开发实践》中的一段话：</p><p>“一种耸人听闻的说法是闭包会导致内存泄漏，因为没能及时回收变量，导致内存泄漏，这听起来好像很合理。然而闭包和内存泄露有关系的地方是，使用闭包的同时比较容易形成循环引用，如果闭包的作用域链中保存着一些 DOM 节点，这时候就有可能造成内存泄露。但这本身并非闭包的问题，也并非 JavaScript 的问题。在 IE 浏览器中（ <em>IE</em> ：又鞭尸我是吧？），由于 BOM 和 DOM 中的对象是使用 C++以 COM 对象的方式实现的，而 COM 对象的垃圾收集机制采用的是引用计数策略。在基于引用计数策略的垃圾回收机制中，如果两个对象之间形成了循环引用，那么这两个对象都无法被回收，但循环引用造成的内存泄露在本质上也不是闭包造成的。”</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数指至少满足下列条件之一的函数：</p><ul><li>函数可以作为参数被传递；</li><li>函数可以作为返回值输出。</li></ul><blockquote><p>在闭包的<a href="#缓存数据"> 缓存数据 </a>部分，实现的拦截器函数 <code>intercept</code> 就是一个高阶函数。它不仅把函数当作参数传入，还返回一个新函数。</p></blockquote><h3 id="函数可以作为参数被传递"><a href="#函数可以作为参数被传递" class="headerlink" title="函数可以作为参数被传递"></a>函数可以作为参数被传递</h3><p>常见的就是数组上的一些方法：<em>sort</em> 、<em>map</em> 、<em>reduce</em> 等，都需要传一个函数作为参数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3, 4]</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">a</span> <span class="token operator">=></span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [2, 6, 4, 8, 0]</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> sum <span class="token operator">+</span> curr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 10</span></code></pre><h3 id="函数可以作为返回值输出"><a href="#函数可以作为返回值输出" class="headerlink" title="函数可以作为返回值输出"></a>函数可以作为返回值输出</h3><p>实现一个类型判断函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isType</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> type  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token function">isType</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token keyword">const</span> isNumber <span class="token operator">=</span> <span class="token function">isType</span><span class="token punctuation">(</span><span class="token string">"Number"</span><span class="token punctuation">)</span><span class="token keyword">const</span> isNull <span class="token operator">=</span> <span class="token function">isType</span><span class="token punctuation">(</span><span class="token string">"Null"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre><h3 id="实现-AOP"><a href="#实现-AOP" class="headerlink" title="实现 AOP"></a>实现 AOP</h3><blockquote><p>维基百科：面向切面的程序设计（Aspect-oriented programming，AOP，又译作面向方面的程序设计、剖面导向程序设计），是计算机科学中的一种程序设计思想，旨在将横切关注点与业务主体进行进一步分离，以提高程序代码的模块化程度。通过在现有代码基础上增加额外的通知（Advice）机制，能够对被声明为“切点（Pointcut）”的代码块进行统一管理与装饰，比如说：“对所有方法名以 <code>set*</code> 开头的方法添加后台日志”。该思想使得开发人员能够将与代码核心业务逻辑关系不那么密切的功能（如日志功能）添加至程序中，同时又不降低业务代码的可读性。面向切面的程序设计思想也是面向切面软件开发的基础。</p></blockquote><p>主要作用是把一些核心业务逻辑模块无关的功能抽离出来，这些跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。把这些功能抽离出来之后，再通过“动态织入”的方式掺入到业务逻辑模块中。这样做的好处首先是可以保证业务逻辑模块的纯净与高内聚性，其次是可以很方便地复用日志统计等功能模块。</p><p>实现两个方法：<em>before</em> 与 <em>after</em> ，挂载在 <em>Function.prototype</em> 上，<em>before</em> 在原函数之前执行，<em>after</em> 在原函数之后执行。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">before</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// 保存原函数的引用</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 执行新函数</span>    <span class="token keyword">return</span> <span class="token function">_this</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 执行原函数，并返回执行结果</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// 保存原函数的引用</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">_this</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 保存原函数的执行结果</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 执行新函数</span>    <span class="token keyword">return</span> res <span class="token comment">// 将原函数的执行结果返回</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fn <span class="token operator">=</span> fn  <span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">/** 输出123*/</span></code></pre><h3 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h3><p>有些场景下，有些事件可能会频繁触发（例如，<code>window.onresize</code>、<code>mousemove</code>等），假设 1 秒 10 次，然而实际上没必要触发那么多次，1 秒 2 次就能满足需要了，这时候就会造成性能问题。而节流和防抖就是解决函数触发频率太高的方案之一。</p><blockquote><p>节流就类似于游戏里的技能冷却时间，当技能未冷却完成时，不能使用。而防抖就类似于电梯，如果有人进来，就等一段时间再关门，关门前，如果又有人进来就再等等，直到一段时间没人进来后，关门再运行。</p></blockquote><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">let</span> isFirstTime <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 是否是第一次触发</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFirstTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>isFirstTime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 当前正在执行中，直接退出（技能还在冷却中）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 设置 timer（使用技能）</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> print <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"print"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">/** 输出printprint*/</span></code></pre><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments    <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment">// 在 wait 时间段内触发（有人进来，取消关闭电梯门的指令，重新打开电梯门）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 设置 timer（等待 wait 时间段后，关闭电梯门）</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> print <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"print"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">/** 输出print*/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript-设计模式与开发实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-scroll-to &lt;W3&gt;</title>
      <link href="/2b83328b89fc.html"/>
      <url>/2b83328b89fc.html</url>
      
        <content type="html"><![CDATA[<img src="/2b83328b89fc/banner.jpg" class=""><blockquote><p>实现的功能：将当前容器或子容器的滚动条移动到底部或顶部。主要源于，某个弹窗里有一个按钮可以将当前表格新增一行，如果弹窗内容过长，就会出现滚动条，然后测试说，点了新增后，是不是滚动条需要滚动到底部。这个效果，之前在另一个弹窗里实现过，怕不是他看到了，感觉这样更合理，然后给我提需求，算是自己埋了个坑。不过，也还好，想着如果用之前的代码，直接 <em>CV</em> 过来，太 <em>low</em> 了，打算写个指令，高端大气上档次！</p></blockquote><img src="/2b83328b89fc/problem.gif" class=""><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>主要依靠 <em>DOM</em> 元素的两个属性和一个方法：<em>clientHeight</em> 、 <em>scrollHeight</em> 和 <em>scrollTo</em> ，先看看 MDN 上的解释：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientHeight"><em>clientHeight</em></a>：元素内容区高度 + 内边距；</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollHeight"><em>scrollHeight</em></a>：该元素在不使用滚动条的情况下为了适应视口中所用内容所需的最小高度；</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTo"><em>scrollTo</em></a>：使用时如果传两个参数 (x, y)，那么 x 是期望滚动到位置水平轴上距元素左上角的像素，y 是期望滚动到位置竖直轴上距元素左上角的像素。</p></li></ul><p>简单翻译一下：</p><ul><li><p><em>clientHeight</em> ：和当前容器的盒模型有关。</p><ul><li><p>对于 <em>content-box</em> : 在页面上的实际高度 <code>offsetHeight = borderTopWidth + paddinTop + height + paddingBottom + borderBottomWidth = 10px + 30px + 100px + 30px + 10px = 180px</code>，而 <code>contentHeight（内容区高度） == height == 100px</code>，那么 <code>clientHeight = contentHeight（内容区高度）+ paddingTop + paddingBottom = 100px + 30px + 30px = 160px</code>；</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.content-box</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 10px solid #000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>对于 <em>border-box</em> : 在页面上的实际高度 <code>offsetHeight = height = 100px</code>，而 <code>contentHeight（内容区高度）= height - borerTopWidth - paddingTop - paddingBottom - borderBottomWidth = 100px - 10px - 30px - 30px - 10px = 20px</code>，那么 <code>clientHeight = contentHeight（内容区高度）+ paddingTop + paddingBottom = 20px + 30px + 30px = 80px</code>。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.border-box</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 10px solid #000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p><em>scrollHeight</em> ：为了能容下子元素所有内容的最小高度。如果 <em>child</em> 的高度小于 <em>parent</em> 的高度，那么 <em>parent</em> 的 <code>scrollHeight == 200px</code>，如果 <em>child</em> 的高度（假设为 <code>400px</code>）大于 <em>parent</em> 的高度，那么 <em>parent</em> 的 <code>scrollHeight = 400px</code>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token punctuation">.</span>parent <span class="token punctuation">&#123;</span>  <span class="token literal-property property">width</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span>  <span class="token literal-property property">height</span><span class="token operator">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>child <span class="token punctuation">&#123;</span>  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  <span class="token literal-property property">height</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p><em>scrollTo</em> ：主要使用的是携带两个参数的用法，第一个参数是水平方向的滚动到的距离，第二个参数是垂直方向的滚动到的距离。比如：</p><ul><li><code>scroll(0, 0)</code>：滚动到左上角；</li><li><code>scroll(scrollWidth - clientWidth, 0)</code>：滚动到右上角；</li><li><code>scroll(0, scrollHeight - clientHeight)</code>：滚动到左下角；</li><li><code>scroll(scrollWidth - clientWidth, scrollHeight - clientHeight)</code>：滚动到右下角。</li></ul></li></ul><p>这里我们只需要置顶和置底，置顶不需要高度的计算，直接 <code>scrollTo(0, 0)</code> 就行；而置底需要计算一下，当 <em>scrollHeight</em> &gt; <em>clientHeight</em> 时，当前容器才会出现滚动条，而超出的距离就是需要滚动到底部的距离，即 <code>scrollHeight - clientHeight</code>，也就是 <code>scrollTo(0, scrollHeight - clientHeight)</code>，如果没有滚动条 <em>scrollHeight</em> 恒等于 <em>clientHeight</em> ，就算执行 <code>scrollTo(0, 0)</code> 也不会有任何影响。</p><h4 id="指令设计"><a href="#指令设计" class="headerlink" title="指令设计"></a>指令设计</h4><p>指令的表达式需要传一个对象，有三个属性：</p><ul><li><code>top</code>：一个方法名，当该方法执行后，并在下一轮事件循环中将滚动条滚动到顶部；</li><li><code>bottom</code>：一个方法名，当该方法执行后，并在下一轮事件循环中将滚动条滚动到底部；</li><li><code>selector</code>：选择器，如果想滚动的容器不是当前元素，而是它的子元素，可以提供一个子元素的选择器。</li></ul><p>方法执行后，在下一轮事件循环中移动滚动条，实现的主要思路就是，劫持当前方法，然后在 <code>$nextTick</code> 中移动滚动条，确保视图更新后，再移动滚动条。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> top<span class="token punctuation">,</span> selector <span class="token punctuation">&#125;</span> <span class="token operator">=</span> binding<span class="token punctuation">.</span>value    <span class="token keyword">let</span> container <span class="token operator">=</span> el    <span class="token comment">// 如果提供了选择器，在当前元素下查找元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selector <span class="token operator">&amp;&amp;</span> selector<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      container <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 未找到元素，直接结束，不再执行下面的代码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">const</span> _this <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> originTop <span class="token operator">=</span> _this<span class="token punctuation">[</span>top<span class="token punctuation">]</span>      _this<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">originTop</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>        _this<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          container<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 劫持当前实例下的方法，相当于给该方法重新赋值了，若想立即生效，需要调用一次 $forceUpdate()</span>    _this<span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>方法目前只支持同步执行，暂不支持异步，后续有遇到再优化。</p></blockquote><p>如果当前绑定指令的元素被卸载了，当前实例下的方法依然是被劫持后的方法，可能会产生一些副效应（ <em>SideEffect</em> )。所以，我们还要在指令的卸载阶段，将被劫持的方法重置为原方法。重置为原方法，肯定需要记录一下原方法，然后再取出来重新赋值。</p><p>这里的实现思路参考了 <em>Vue</em> 底层 <em>$watch</em> 的实现原理：使用 <em>$watch</em> 后会返回一个函数，执行这个函数就会将当前监听从目标的依赖中移除。而我们这里执行拦截器返回的函数就是将方法重置。考虑到，可能需要拦截两次方法，而且这个拦截的代码主体结构都相同，只有拦截后的回调不同，那就需要一个拦截器函数，专门用来拦截方法。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> originFn <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">originFn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> originFn  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>试试效果：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi~"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Hi~"</span><span class="token keyword">const</span> teardownSayHi <span class="token operator">=</span> <span class="token function">intercept</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"sayHi"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"intercept"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// "Hi~"</span><span class="token comment">// "intercept"</span><span class="token function">teardownSayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Hi~"</span></code></pre><p>很 Nice！没毛病！</p><h4 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> top<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> selector <span class="token punctuation">&#125;</span> <span class="token operator">=</span> binding<span class="token punctuation">.</span>value    <span class="token keyword">let</span> container <span class="token operator">=</span> el    <span class="token keyword">if</span> <span class="token punctuation">(</span>selector <span class="token operator">&amp;&amp;</span> selector<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      container <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">const</span> _this <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span>teardownTop <span class="token operator">=</span> <span class="token function">intercept</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> top<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        _this<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          container<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span>teardownBottom <span class="token operator">=</span> <span class="token function">intercept</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        _this<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> containerHeight <span class="token operator">=</span> container<span class="token punctuation">.</span>clientHeight          <span class="token keyword">const</span> contentHeight <span class="token operator">=</span> container<span class="token punctuation">.</span>scrollHeight          container<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> contentHeight <span class="token operator">-</span> containerHeight<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">||</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      _this<span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> originFn <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">originFn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> originFn      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">unbind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 解绑后，取消拦截</span>    <span class="token keyword">const</span> _this <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context    el<span class="token punctuation">.</span>teardownTop <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span><span class="token function">teardownTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    el<span class="token punctuation">.</span>teardownBottom <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span><span class="token function">teardownBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>teardownTop <span class="token operator">||</span> el<span class="token punctuation">.</span>teardownBottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      _this<span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>这里有个巧妙的点，因为需要在 <em>bind</em> 阶段设置方法，在 <em>unbind</em> 阶段卸载方法，为了让 <em>unbind</em> 阶段能取到方法名，可以直接将方法挂载到当前 DOM 对象上。卸载阶段执行后，直接将当前 DOM 删除了，所以也不需要删除挂载的方法，岂不美哉！</p></blockquote><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p>点击 <em>push</em> 添加，然后置底，点击 <em>shift</em> 移除第一项，然后置顶。除了原生的 HTML 元素，还试了 <em>el-table</em> 、<em>ivu-table</em> 以及 <em>ivu-modal</em> ，效果都不错。在组件上使用，主要是找到那个出现滚动条的元素，然后查看它的 CSS 选择器，最后传给 <code>selector</code> 就可以了。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> ivu<span class="token operator">-</span>table 只展示了指令的配置，省略了其他属性 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Table      v<span class="token operator">-</span>scroll<span class="token operator">-</span>to<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>        <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">'handleShift'</span><span class="token punctuation">,</span>        <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token string">'handlePush'</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">'.ivu-table-body'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Table<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> el<span class="token operator">-</span>table 只展示了指令的配置，省略了其他属性 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>table      v<span class="token operator">-</span>scroll<span class="token operator">-</span>to<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>        <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">'handleShift'</span><span class="token punctuation">,</span>        <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token string">'handlePush'</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">'.el-table__body-wrapper'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> ivu<span class="token operator">-</span>modal 只展示了指令的配置，省略了其他属性 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Modal      v<span class="token operator">-</span>scroll<span class="token operator">-</span>to<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>        <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">'handleModalShift'</span><span class="token punctuation">,</span>        <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token string">'handleModalPush'</span><span class="token punctuation">,</span>        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">'.ivu-modal-body'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><img src="/2b83328b89fc/result.gif" class="">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InputNumberUnit &lt;W2·中秋节不打烊&gt;</title>
      <link href="/8041fc82ec56.html"/>
      <url>/8041fc82ec56.html</url>
      
        <content type="html"><![CDATA[<img src="/8041fc82ec56/banner.jpg" class=""><blockquote><p>需求说，要把设置字体大小的数字输入框，添加一个字体的单位，<code>px</code> 或者是 <code>em</code>。这其实也没啥，<code>ViewDesign</code> 的 <code>InputNumber</code> 提供的有单位这个设置，不过：这个单位是通过格式化当前输入框中的内容得到的，也就是它和整个输入框的内容是一体的，也能删除，不过删除后，组件内部会给它重新加上。总感觉这个交互很诡异，不知道官方当时设计的时候，出于哪种考虑没把单位专门分离出来。既然他们的用起来不舒服，那就自己造一个！</p></blockquote><img src="/8041fc82ec56/problem.gif" class=""><h4 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h4><h5 id="方案一-🙁"><a href="#方案一-🙁" class="headerlink" title="方案一 🙁"></a>方案一 🙁</h5><p>基于 <code>ViewDesign</code> 的 <code>Input</code> 进行扩展，<code>Input</code> 可以设置文本框前后的插槽，可以通过这个来放置单位，然后设置 <code>type=&quot;number&quot;</code>，这样就能实现了。不过，这样就丢失了原来 <code>InputNumber</code> 的一些属性，比如 <code>min</code>，<code>max</code>，<code>step</code> 等等。况且 <code>Input</code> 自带的插槽样式，有点丑…，所以这个方案就毙掉了。</p><h5 id="方案二-🙂"><a href="#方案二-🙂" class="headerlink" title="方案二 🙂"></a>方案二 🙂</h5><p>基于 <code>ViewDesign</code> 的 <code>InputNumber</code> 进行扩展，将配置的单位，放置在输入框两边（前面或者后面）。如果只是这样，最终的效果图应该能想象的到，一定会很丑。所以，还要调整样式，做到和原生添加单位时，同样的展示效果（先贴一个最终的效果图，卖个关子）。</p><img src="/8041fc82ec56/1.png" class=""><h4 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h4><h5 id="属性（props）"><a href="#属性（props）" class="headerlink" title="属性（props）"></a>属性（props）</h5><p>确保原生 <code>InputNumber</code> 的属性依然能在这个组件上使用，在这个基础上，又扩展了两个新属性：</p><ul><li><code>unit</code>：单位，<code>String</code> 类型；</li><li><code>unitPlacement</code>：单位的位置，<code>String</code> 类型，<code>start</code>（在数字前） 或者 <code>end</code>（在数字后），默认为 <code>start</code>。</li></ul><h5 id="插槽（slots）"><a href="#插槽（slots）" class="headerlink" title="插槽（slots）"></a>插槽（slots）</h5><p>如果只能传一个单位的字符串，那么单位的样式太单一了，所以又加了一个 <code>unit</code> 的插槽，可以自定义单位的样式。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>InputNumberUnit  <span class="token operator">:</span>max<span class="token operator">=</span><span class="token string">"100"</span>  <span class="token operator">:</span>min<span class="token operator">=</span><span class="token string">"-10"</span>  <span class="token operator">:</span>step<span class="token operator">=</span><span class="token string">"2"</span>  unit<span class="token operator">=</span><span class="token string">"￥"</span>  unit<span class="token operator">-</span>placement<span class="token operator">=</span><span class="token string">"end"</span>  size<span class="token operator">=</span><span class="token string">"large"</span>  v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>span slot<span class="token operator">=</span><span class="token string">"unit"</span> style<span class="token operator">=</span><span class="token string">"color: red; font-weight: bold"</span><span class="token operator">></span><span class="token constant">AAA</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>InputNumberUnit<span class="token operator">></span></code></pre><p>上面代码的实现效果，对应下图中下面的那个。细心一点，可能会发现，上面的代码同时提供了 <code>unit=&quot;￥&quot;</code> 和 <code>slot=&quot;unit&quot;</code>，最后展示的是 <code>slot</code> 的内容。也即 <code>slot</code> 的优先级高于 <code>prop</code>。</p><img src="/8041fc82ec56/2.png" class=""><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"wrapClasses"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"unitClasses"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>slot v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"$slots.unit"</span> name<span class="token operator">=</span><span class="token string">"unit"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> unit <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>InputNumber      <span class="token operator">:</span>size<span class="token operator">=</span><span class="token string">"size"</span>      v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"$attrs"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"currValue"</span>      @on<span class="token operator">-</span>focus<span class="token operator">=</span><span class="token string">"handleFocus"</span>      @on<span class="token operator">-</span>blur<span class="token operator">=</span><span class="token string">"handleBlur"</span>    <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>InputNumber<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">const</span> prefixCls <span class="token operator">=</span> <span class="token string">"ivu-input-number-unit"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"InputNumberUnit"</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">unit</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">unitPlacement</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"start"</span><span class="token punctuation">,</span>      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token string">"end"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">isFocused</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">currValue</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">hasUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>unit <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">wrapClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-wrap</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ivu-input-number-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-start</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unitInStart<span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-end</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unitInEnd<span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-focus</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isFocused<span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-none-unit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hasUnit<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">unitClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"unit-in-end"</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unitInEnd<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">unitInStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unit <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unitPlacement <span class="token operator">===</span> <span class="token string">"start"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">unitInEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unit <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unitPlacement <span class="token operator">===</span> <span class="token string">"end"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handleFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isFocused <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">handleBlur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isFocused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped lang<span class="token operator">=</span><span class="token string">"less"</span><span class="token operator">></span><span class="token punctuation">.</span>ivu<span class="token operator">-</span>input<span class="token operator">-</span>number<span class="token operator">-</span>unit <span class="token punctuation">&#123;</span>  <span class="token operator">&amp;</span><span class="token operator">-</span>wrap <span class="token punctuation">&#123;</span>    <span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span>    align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> 4px<span class="token punctuation">;</span>    <span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid #dcdee2<span class="token punctuation">;</span>    <span class="token literal-property property">transition</span><span class="token operator">:</span> all <span class="token number">0</span><span class="token punctuation">.</span>2s linear<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>      border<span class="token operator">-</span>color<span class="token operator">:</span> #57a3f3<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">.</span>ivu<span class="token operator">-</span>input<span class="token operator">-</span>number <span class="token punctuation">&#123;</span>      <span class="token literal-property property">flex</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token literal-property property">border</span><span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token operator">-</span>small <span class="token punctuation">&#123;</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> 22px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token operator">&amp;</span><span class="token operator">-</span>large <span class="token punctuation">&#123;</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> 38px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token operator">&amp;</span><span class="token operator">-</span>focused <span class="token punctuation">&#123;</span>        box<span class="token operator">-</span>shadow<span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span>ivu<span class="token operator">-</span>input<span class="token operator">-</span>number<span class="token operator">-</span>handler<span class="token operator">-</span>wrap <span class="token punctuation">&#123;</span>        <span class="token literal-property property">display</span><span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>unit<span class="token operator">-</span><span class="token keyword">in</span><span class="token operator">-</span>end <span class="token punctuation">&#123;</span>      <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">&amp;</span><span class="token operator">-</span>start <span class="token punctuation">&#123;</span>    padding<span class="token operator">-</span>left<span class="token operator">:</span> 7px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">&amp;</span><span class="token operator">-</span>end <span class="token punctuation">&#123;</span>    padding<span class="token operator">-</span>right<span class="token operator">:</span> 7px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">&amp;</span><span class="token operator">-</span>focus <span class="token punctuation">&#123;</span>    border<span class="token operator">-</span>color<span class="token operator">:</span> #57a3f3<span class="token punctuation">;</span>    <span class="token literal-property property">outline</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    box<span class="token operator">-</span>shadow<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> 2px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">&amp;</span><span class="token operator">-</span>none<span class="token operator">-</span>unit <span class="token punctuation">&#123;</span>    padding<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">.</span>ivu<span class="token operator">-</span>input<span class="token operator">-</span>number <span class="token punctuation">.</span>ivu<span class="token operator">-</span>input<span class="token operator">-</span>number<span class="token operator">-</span>handler<span class="token operator">-</span>wrap <span class="token punctuation">&#123;</span>      <span class="token literal-property property">display</span><span class="token operator">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h4 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h4><ul><li>鼠标交互时的样式：首先需要把原生 <code>InputNumber</code> 鼠标聚焦时的样式都给取消掉，然后给 <code>InputNumber</code> 添加 <code>on-focus</code> 和 <code>on-blur</code> 事件，监听当前输入框的状态，根据状态，给整个父容器添加 <em>hover</em> 、聚焦和失焦时的样式。</li><li>不同尺寸的控件，让单位的字体大小也跟随变化：在接收的 <code>props</code> 中，特别把 <code>size</code> 属性单拎了出来。因为对于不同尺寸的控件，<code>InputNumber</code> 会通过一个 CSS 类 <code>ivu-input-number-[size]</code> 来设置字体的大小。这里很巧妙，直接把这个根据 <code>size</code> 动态变化的类设置在了父容器上，这样单位的字体大小就直接继承自父容器了，不需要根据 <code>size</code> 单独设置字体大小了。</li><li>单位的位置：你是不是以为分别在头部和尾部都设置了一个单位的容器，然后根据 <code>unitPlacement</code> 再只单独展示某一个。如果对 <code>flex</code> 布局熟悉的话，子元素可以通过 <code>order</code> 来设置当前排列的位置。也即，只需要在头部放置一个单位，然后通过 <code>order</code> 来调整它的位置就可以了。</li><li>没有设置 <code>unit</code> 时，展示原生 <code>InputNumber</code> 的样式：原生 <code>InputNumber</code> 在鼠标滑入时，会在右侧显示一个向上和向下调整的按钮，由于设置了单位后，这个按钮无论居左还是居右，在哪都不好看，索性就给去掉了。如果当前没有设置 <code>unit</code>，并且也没设置 <code>unit</code> 的插槽，那么就把按钮再显示出来就好了。</li></ul><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p>最后看一下，各个尺寸的整体效果吧。</p><img src="/8041fc82ec56/result.gif" class="">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ViewDesign </tag>
            
            <tag> ivu-0extends </tag>
            
            <tag> ivu-0input-0number </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ColorPicker 扩展指令 v-modify-opacity &lt;W1&gt;</title>
      <link href="/b7223ac0b473.html"/>
      <url>/b7223ac0b473.html</url>
      
        <content type="html"><![CDATA[<img src="/b7223ac0b473/banner.jpg" class=""><blockquote><p>产品提了个意见：颜色选择器的颜色能不能不要默认为透明，选完颜色后，就立马确认了，容易忘记设置不透明度（如下图所示）。由于这个颜色是和所有组件的背景色绑定的，设为透明是为了组件更好的展示，改默认颜色固然不可行。其实每当选中颜色的时候，上方的色块会显示当前的颜色，如果用的多，看到这个颜色没变，大概也能知道缺了啥。不过对于用户而言，这确实是个不好的体验，于是，就有了一个想法：如果当前颜色的透明度为 0 ，选择颜色时，将不透明度置为 1，这样上方的色块也能显示当前的颜色，体验会很不错。大体思路有了，开搞！</p></blockquote><img src="/b7223ac0b473/22-0902-1.gif" class=""><h4 id="组件内部逻辑"><a href="#组件内部逻辑" class="headerlink" title="组件内部逻辑"></a>组件内部逻辑</h4><p>展开颜色面板，鼠标在上面选中颜色时，会触发内部的回调 <code>childChange</code>，传递的参数是下面这样的：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"h"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"s"</span><span class="token operator">:</span> <span class="token number">0.49166666666666664</span><span class="token punctuation">,</span>  <span class="token property">"v"</span><span class="token operator">:</span> <span class="token number">0.8055555555555556</span><span class="token punctuation">,</span>  <span class="token property">"a"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 不透明度</span>  <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"hsva"</span><span class="token punctuation">&#125;</span></code></pre><p>这里我们只关心 <code>a</code> 的值就好，需要在一个合适的时机把这个 <code>a</code> 由 0 修改成 1。这个修改的只是当前选中颜色，而不是组件绑定的颜色，只有点击【确认】按钮时，才会更改组件绑定的颜色。</p><h4 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h4><p>首先，需要检查当前颜色（<code>v-model</code> 绑定的值）是否透明度为 0，写了一个工具函数 <code>isTransparent</code>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isTransparent</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"#"</span> <span class="token operator">&amp;&amp;</span> color<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> color<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"00"</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"rgba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> color<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">._,\s_([01]|0\.\d+)\)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"0"</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> color <span class="token operator">===</span> <span class="token string">"transparent"</span> <span class="token comment">// fix: 点击清空，再次打开不生效</span><span class="token punctuation">&#125;</span></code></pre><p>再判断触发 <code>childChange</code> 时，传入的 <code>data.a</code> 是否为 0，如果 <code>isTransparent(color) &amp;&amp; data.a === 0</code> 就触发 <code>modifyOpacity</code>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTransparent</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>a <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">modifyOpacity</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">modifyOpacity</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>这里会有一个问题：如果通过拖动设置透明度的滑块，将透明度改为 0 时，同样也会修改 <code>data.a</code> 的值，就会有一个 BUG，当透明度滑到 0 时，滑块会立马跳到 1 的位置。所以只写这两个判断还不能达到要求，我们还需要一个合理的触发时机。</p></blockquote><p>仔细想一想，修改 <code>data.a</code> 的值，应该在每次打开颜色面板后，只触发一次，后续的颜色选择，就不应该再触发了。那么触发的时机就和面板的 <code>visible</code> 相关联，我们需要一个标识 <code>canModifyOpacity</code> 一起约束上面的判断条件：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTransparent</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>a <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> canModifyOpacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">modifyOpacity</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><em>CodeReview</em> 的时候，同事提了一个意见，说上面的那个判断顺序换成下面这样，是不是好点？</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>canModifyOpacity <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>a <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isTransparent</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>首次展开面板选择颜色时，<code>canModifyOpacity</code> 一定为真，无论在前还是在后，都没有任何影响，并且第一次主要判断的是当前颜色不透明度是否为 <em>0</em> ，所以把它摆在了第一位，这很合理。当在展开后的面板再次选择颜色时，<code>canModifyOpacity</code> 一定为假，后续的判断都是多余的，所以最优的判断顺序应该是：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>canModifyOpacity <span class="token operator">&amp;&amp;</span> <span class="token function">isTransparent</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>a <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>首次展开面板，<code>isTransparent(color)</code> 优先级最高，所以先于 <code>data.a === 0</code>；后续再选择颜色，<code>canModifyOpacity</code> 为假，没必要再进行后面的判断了。</p></blockquote><p><code>canModifyOpacity</code> 初始值为 <code>true</code>，并且在触发 <code>modifyOpacity</code> 后，需要把 <code>canModifyOpacity</code> 置为 <code>false</code>，这里需要调整一下 <code>modifyOpacity</code>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">canModifyOpacity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">if</span> <span class="token punctuation">(</span>canModifyOpacity <span class="token operator">&amp;&amp;</span> <span class="token function">isTransparent</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>a <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">modifyOpacity</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">modifyOpacity</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>  canModifyOpacity <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></code></pre><p>在每次打开颜色面板后，需要将 <code>canModifyOpacity</code> 置为 <code>true</code>，需要监听 <strong><em>ColorPicker</em></strong> 的 <code>visible</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ColorPicker<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">"visible"</span><span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    canModifyOpacity <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>基本逻辑都已实现，下面就是 <code>childChange</code> 的劫持：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先存一份原函数</span><span class="token keyword">const</span> originChildChange <span class="token operator">=</span> ColorPicker<span class="token punctuation">.</span>childChange<span class="token comment">// 写自己的新函数</span><span class="token keyword">const</span> <span class="token function-variable function">newChildChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// v-model 绑定的值，传入 prop 的 name 就是 value</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>canModifyOpacity <span class="token operator">&amp;&amp;</span> <span class="token function">isTransparent</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>a <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">modifyOpacity</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">originChildChange</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 替换实例上的方法</span>ColorPicker<span class="token punctuation">.</span>childChange <span class="token operator">=</span> <span class="token function">newChildChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>ColorPicker<span class="token punctuation">)</span></code></pre><h4 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> canModifyOpacity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">const</span> originChildChange <span class="token operator">=</span> ColorPicker<span class="token punctuation">.</span>childChange<span class="token keyword">const</span> <span class="token function-variable function">newChildChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>canModifyOpacity <span class="token operator">&amp;&amp;</span> <span class="token function">isTransparent</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>a <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">modifyOpacity</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">originChildChange</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>ColorPicker<span class="token punctuation">.</span>childChange <span class="token operator">=</span> <span class="token function">newChildChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>ColorPicker<span class="token punctuation">)</span>ColorPicker<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">"visible"</span><span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    canModifyOpacity <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">modifyOpacity</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>  canModifyOpacity <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isTransparent</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"#"</span> <span class="token operator">&amp;&amp;</span> color<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> color<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"00"</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"rgba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> color<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*,\s*([01]|0\.\d+)\)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"0"</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> color <span class="token operator">===</span> <span class="token string">"transparent"</span><span class="token punctuation">&#125;</span></code></pre><h4 id="封装成指令"><a href="#封装成指令" class="headerlink" title="封装成指令"></a>封装成指令</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>ColorPicker v<span class="token operator">-</span>modify<span class="token operator">-</span>opacity <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"modify-opacity"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance        <span class="token keyword">let</span> canModifyOpacity <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">const</span> originChildChange <span class="token operator">=</span> vm<span class="token punctuation">.</span>childChange        <span class="token keyword">const</span> <span class="token function-variable function">newChildChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>canModifyOpacity <span class="token operator">&amp;&amp;</span> <span class="token function">isTransparent</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>a <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">modifyOpacity</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>          <span class="token function">originChildChange</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        vm<span class="token punctuation">.</span>childChange <span class="token operator">=</span> <span class="token function">newChildChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>        vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">"visible"</span><span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            canModifyOpacity <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">modifyOpacity</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>          canModifyOpacity <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">isTransparent</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"#"</span> <span class="token operator">&amp;&amp;</span> color<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> color<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"00"</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"rgba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> color<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*,\s*([01]|0\.\d+)\)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"0"</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> color <span class="token operator">===</span> <span class="token string">"transparent"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><img src="/b7223ac0b473/22-0902-2.gif" class="">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 每周一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ViewDesign </tag>
            
            <tag> ivu-0extends </tag>
            
            <tag> ivu-0color-0picker </tag>
            
            <tag> Vue-指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则学习笔记 + 案例</title>
      <link href="/1b3ec3018bbe.html"/>
      <url>/1b3ec3018bbe.html</url>
      
        <content type="html"><![CDATA[<img src="/1b3ec3018bbe/banner.jpg" class=""><blockquote><p>「JavaScript 正则表达式迷你书.pdf」<a href="https://www.aliyundrive.com/s/i77Fq6HocdT">https://www.aliyundrive.com/s/i77Fq6HocdT</a></p></blockquote><h4 id="匹配-16-进制颜色"><a href="#匹配-16-进制颜色" class="headerlink" title="匹配 16 进制颜色"></a>匹配 16 进制颜色</h4><ul><li><p>匹配 6 位的 16 进制</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#[0-9a-fA-F]{6}</span><span class="token regex-delimiter">/</span></span></code></pre><b></b></li><li><p>颜色也有可能是 3 位的，由于管道符也是贪婪匹配，所以需要先匹配 6 位再匹配 3 位</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#[0-9a-fA-F]{6}|[0-9a-fA-F]{3}</span><span class="token regex-delimiter">/</span></span></code></pre></li></ul><h4 id="匹配时间"><a href="#匹配时间" class="headerlink" title="匹配时间"></a>匹配时间</h4><ul><li><p>匹配小时，00-19，20-23</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([01][0-9]|2[0-3])</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>匹配分钟，00-59</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-5][0-9]</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>最终结果</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([01][0-9]|2[0-3]):[0-5][0-9]$</span><span class="token regex-delimiter">/</span></span></code></pre></li></ul><h4 id="匹配日期"><a href="#匹配日期" class="headerlink" title="匹配日期"></a>匹配日期</h4><ul><li><p>匹配年份，0000-xxxx</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d{4}</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>匹配月份，01-12</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(0[1-9]|1[0-2])</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>匹配日，01-31</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0[0-9]|[12][0-9]|3[01]</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>最终结果</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span class="token regex-delimiter">/</span></span></code></pre></li></ul><h4 id="匹配文件路径"><a href="#匹配文件路径" class="headerlink" title="匹配文件路径"></a>匹配文件路径</h4><ul><li><p>匹配磁盘</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]:\\</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>匹配文件夹</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\:*&lt;&gt;|"?\r\n/]+\\</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>完整路径</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]:\\([^\\:*&lt;&gt;|"?\r\n/]+\\)*([^\\:*&lt;&gt;|"?\r\n/]+?$)</span><span class="token regex-delimiter">/</span></span></code></pre></li></ul><blockquote><p>位置：</p><ul><li><code>^</code>: 开头</li><li><code>$</code>: 结尾</li><li><code>\b</code>: 单词边界，<code>\w</code> 与 <code>\W</code> 之间的位置（<code>\w</code> === <code>[0-9a-zA-Z_]</code> 数字字母下划线）</li><li><code>\B</code>: 非单词的边界，</li><li><code>(?=p)</code>: 以 p 结尾</li><li><code>(?!p)</code>: 不以 p 结尾</li></ul></blockquote><h4 id="数字千分位分隔符"><a href="#数字千分位分隔符" class="headerlink" title="数字千分位分隔符"></a>数字千分位分隔符</h4><ul><li><p>添加最后一位的逗号</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"123456789"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">?=\d{3}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token comment">// =&gt; "123456,789"</span></code></pre></li><li><p>添加所有逗号</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"123456789"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=(\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token comment">// =&gt; ",123,456,789"</span></code></pre></li><li><p>去除开头的逗号</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"123456789"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token comment">// =&gt; "123,456,789"</span></code></pre></li><li><p>多组数字格式化</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"123456789 123456789"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!\b)(?=(\d{3})+\b)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token comment">// 等价于 =&gt;</span><span class="token string">"123456789 123456789"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B(?=(\d{3})+\b)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token comment">// =&gt; "123,456,789 123,456,789"</span></code></pre></li></ul><h4 id="验证密码"><a href="#验证密码" class="headerlink" title="验证密码"></a>验证密码</h4><ul><li><p>必须包含数字</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>必须包含汉字</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[\u4e00-\u9fa5])</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>必须包含数字和字母</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])(?=.*[a-zA-Z])</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>必须包含数字和汉字</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])(?=.*[\u4e00-\u9fa5])</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>必须包含字母和汉字</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[a-zA-Z])(?=.*[\u4e00-\u9fa5])</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>必须包含数字、字母和汉字，且至少包含两种字符，两两组合，那么组合数就是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.685ex;" xmlns="http://www.w3.org/2000/svg" width="2.825ex" height="2.572ex" role="img" focusable="false" viewBox="0 -833.9 1248.8 1136.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(845.3,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(748,-287.2) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g></svg></mjx-container>，三种情况</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])(?=.*[a-zA-Z])|(?=.*[0-9])(?=.*[\u4e00-\u9fa5])|(?=.*[a-zA-Z])(?=.*[\u4e00-\u9fa5])</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>再加一个位数限制：最低 6 位，最高 20 位</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*[0-9])(?=.*[a-zA-Z])|(?=.*[0-9])(?=.*[\u4e00-\u9fa5])|(?=.*[a-zA-Z])(?=.*[\u4e00-\u9fa5]))^[0-9a-zA-Z\u4e00-\u9fa5]{6,20}</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>如果再加两种字符：下划线( <code>_</code> )、短杠( <code>-</code> )，要是采用和上面相同的方式：两两组合，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.687ex;" xmlns="http://www.w3.org/2000/svg" width="2.825ex" height="2.573ex" role="img" focusable="false" viewBox="0 -833.9 1248.8 1137.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(845.3,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(748,-287.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></g></svg></mjx-container> == 10，意味着要写 10 种情况，工程量可想而知。换个角度，至少包含两种字符的对立事件就是：不能全都是数字、字母和汉字</p><ul><li><p>不能全为数字</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]+$)</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>不能全都是数字、字母和汉字</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]+$)(?!^[a-zA-Z]+$)(?!^[\u4e00-\u9fa5]+$)</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>最终版</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]{6,20}$)(?!^[a-zA-Z]{6,20}$)(?!^[\u4e00-\u9fa5]{6,20}$)(?!^-{6,20}$)(?!^_{6,20}$)^[0-9a-zA-Z\u4e00-\u9fa5\-_]{6,20}</span><span class="token regex-delimiter">/</span></span></code></pre></li></ul></li></ul><h4 id="格式化日期（分组引用）"><a href="#格式化日期（分组引用）" class="headerlink" title="格式化日期（分组引用）"></a>格式化日期（分组引用）</h4><ul><li><p><code>yyyy-mm-dd</code> 格式化成 <code>mm/dd/yyyy</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d{4})-(\d{2})-(\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token string">"2022-08-10"</span><span class="token keyword">const</span> result <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">"$2/$3/$1"</span><span class="token punctuation">)</span><span class="token comment">// =&gt; "08/10/2022"</span><span class="token comment">// 等价于 =&gt;</span><span class="token keyword">const</span> result <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>RegExp<span class="token punctuation">.</span>$2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>RegExp<span class="token punctuation">.</span>$3<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>RegExp<span class="token punctuation">.</span>$1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 等价于 =&gt;</span><span class="token keyword">const</span> result <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="匹配多种日期格式（反向引用）"><a href="#匹配多种日期格式（反向引用）" class="headerlink" title="匹配多种日期格式（反向引用）"></a>匹配多种日期格式（反向引用）</h4><ul><li><p>要匹配：<code>yyyy.mm.dd</code>、<code>yyyy-mm-dd</code> 和 <code>yyyy/mm/dd</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d{4}(\.|-|\/)\d{2}\1\d{2}</span><span class="token regex-delimiter">/</span></span></code></pre></li></ul><blockquote><ul><li><code>\10</code> 表示第 <code>10</code> 个分组，若想匹配 <code>\1</code> 和 <code>0</code>，请使用 <code>(?:\1)0</code> 或者 <code>\1(?:0)</code>（<code>(?:p)</code> 表示非捕获括号，不会对括号中的内容进行分组）；</li><li>若分组 <code>\5</code> 不存在，则匹配 <code>"\5"</code>，相当于对 <code>"5"</code> 进行了转义；</li><li>若分组后带有量词，则匹配最后一次捕获的结果。</li></ul></blockquote><h4 id="模拟字符串-trim-方法"><a href="#模拟字符串-trim-方法" class="headerlink" title="模拟字符串 trim 方法"></a>模拟字符串 <code>trim</code> 方法</h4><ul><li><p>匹配开头结尾的空白符，然后替换为空（效率更高）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+|\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>匹配整个字符串，然后用引用的部分替换整体</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s*(.*?)\s*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="单词首字母大写"><a href="#单词首字母大写" class="headerlink" title="单词首字母大写"></a>单词首字母大写</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">firstUppercase</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|\s)\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// =&gt; 如果添加修饰符 `g`，则是将所有单词首字母大写</span><span class="token comment">// =&gt; 如果不加修饰符 `g`，则只会将第一个单词的首字母大写</span></code></pre><h4 id="驼峰化"><a href="#驼峰化" class="headerlink" title="驼峰化"></a>驼峰化</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">camelize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\s]+(.)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="短杠化"><a href="#短杠化" class="headerlink" title="短杠化"></a>短杠化</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">kebablize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"-$1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\s]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="匹配成对标签"><a href="#匹配成对标签" class="headerlink" title="匹配成对标签"></a>匹配成对标签</h4><ul><li><p>匹配开标签</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;[^&gt;]+&gt;</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>匹配闭标签</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;\/[^&gt;]+&gt;</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>完整正则</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;([^&gt;]+)&gt;[\s\S]*&lt;\/\1&gt;</span><span class="token regex-delimiter">/</span></span></code></pre></li></ul><h4 id="需要转义的元字符"><a href="#需要转义的元字符" class="headerlink" title="需要转义的元字符"></a>需要转义的元字符</h4><p><code>^</code>、<code>$</code>、<code>.</code>、<code>*</code>、<code>+</code>、<code>?</code>、<code>|</code>、<code>\</code>、<code>/</code>、<code>(</code>、<code>)</code>、<code>[</code>、<code>]</code>、<code>{</code>、<code>}</code>、<code>=</code>、<code>!</code>、<code>:</code>、<code>-</code>、<code>,</code>，这些字符串匹配时要加 <code>\</code></p><h4 id="匹配-IPV4-地址"><a href="#匹配-IPV4-地址" class="headerlink" title="匹配 IPV4 地址"></a>匹配 IPV4 地址</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])$</span><span class="token regex-delimiter">/</span></span></code></pre><h4 id="匹配固定电话"><a href="#匹配固定电话" class="headerlink" title="匹配固定电话"></a>匹配固定电话</h4><p>要匹配：<code>055188888888</code>、<code>0551-88888888</code> 和 <code>(0551)88888888</code>，前四位为区号，后八位为号码</p><ul><li><p>第一种的匹配规则</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0\d{3}[1-9]{8}</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>第二种的匹配规则</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0\d{3}-[1-9]{8}</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>第三种的匹配规则</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\(0\d{3}\)[1-9]{8}</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>结合第一种和第二种</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0\d{3}-?[1-9]{8}</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>三种结合的最终匹配规则</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(0\d{3}-?|\(0\d{3}\))[1-9]{8}</span><span class="token regex-delimiter">/</span></span></code></pre></li></ul><h4 id="匹配浮点数"><a href="#匹配浮点数" class="headerlink" title="匹配浮点数"></a>匹配浮点数</h4><p>要匹配：</p><ul><li><p>情况一：<code>1.22</code>、<code>+1.22</code>、<code>-1.22</code></p></li><li><p>情况二：<code>10</code>、<code>+10</code>、<code>-10</code></p></li><li><p>情况三：<code>.2</code>、<code>+.2</code>、<code>-.2</code></p></li><li><p>情况一：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[+-]?\d+\.\d*$</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>情况二：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[+-]?\d+$</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>情况三：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[+-]?\.\d+$</span><span class="token regex-delimiter">/</span></span></code></pre></li><li><p>最终结果</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[+-]?(\d+\.\d*|\d+|\.\d+)$</span><span class="token regex-delimiter">/</span></span></code></pre></li></ul><h4 id="提升效率"><a href="#提升效率" class="headerlink" title="提升效率"></a>提升效率</h4><ul><li><p>使用具体型字符组来代替通配符，消除回溯</p><p>匹配 <code>123"456"789</code> 中的 <code>"456"</code></p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> /".*"/</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> /"[^"]*/</span></span></code></pre></li><li><p>使用非捕获分组</p><p>捕获分组，意味着需要额外的内存来保存分组的结果，对于不需要分组引用或反向引用的采用非捕获分组</p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> /^\d+("[^"]*")\d+$/</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> /^\d+(?:"[^"]*")\d+$/</span></span></code></pre></li><li><p>独立出确定字符：可以减少回溯，加快匹配速度</p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> /a+/</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> /aa*/</span></span></code></pre></li><li><p>提取分支公共部分</p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> /^abc|^def/</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> /^(?:abc|def)/</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> /this|that/</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> /th(?:is|at)/</span></span></code></pre></li><li><p>减少分支数量，缩小它们的范围，不过降低了可读性</p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> /red|read/</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> /rea?d/</span></span></code></pre></li></ul><h4 id="replace-的应用"><a href="#replace-的应用" class="headerlink" title="replace 的应用"></a><code>replace</code> 的应用</h4><ul><li><p>当第二个参数是字符串时，以下字符有特殊含义</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong><em><span>$</span>1,<span>$</span>2,···,<span>$</span>99</em></strong></td><td align="left">匹配第 <code>1-99</code> 个分组里捕获的文本</td></tr><tr><td align="left"><strong><em>$&amp;</em></strong></td><td align="left">匹配到的字符文本</td></tr><tr><td align="left"><strong><em>$`</em></strong></td><td align="left">匹配到的字符左边文本</td></tr><tr><td align="left"><strong><em>$’</em></strong></td><td align="left">匹配到的字符右边文本</td></tr><tr><td align="left"><strong><em>$$</em></strong></td><td align="left">美元符号</td></tr></tbody></table></li><li><p>当第二个参数是函数时，函数里的回调参数与使用 <code>match(非全局匹配)</code> 匹配到的结果类似</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"123abc456"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d+)[^\d]*(\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token comment">// =&gt; ['123abc456', '123', '456', index: 0, input: '123abc456', groups: undefined]</span><span class="token comment">// 第一个参数：匹配到的结果</span><span class="token comment">// 第二个参数：分组一的结果</span><span class="token comment">// 第三个参数：分组二的结果</span><span class="token comment">// 若还有多个分组，则列完分组结果...</span><span class="token comment">// 倒数第三个参数：匹配的开始索引</span><span class="token comment">// 倒数第二个参数：原字符串</span><span class="token comment">// 倒数第一个参数：没有修饰符 g，所以为 undefined</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"123abc456"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d+)[^\d]*(\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> index<span class="token punctuation">,</span> input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>match<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> index<span class="token punctuation">,</span> input<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// =&gt; ['123abc456', '123', '456', 0, '123abc456']</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h5 id="获取当前日期（yyyy-MM-dd-HH-mm-ss）"><a href="#获取当前日期（yyyy-MM-dd-HH-mm-ss）" class="headerlink" title="获取当前日期（yyyy-MM-dd HH:mm:ss）"></a>获取当前日期（yyyy-MM-dd HH:mm:ss）</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getCurrentDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/(\d)(?=(\/|\s))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"-0$1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="模拟-getElementByClassName"><a href="#模拟-getElementByClassName" class="headerlink" title="模拟 getElementByClassName"></a>模拟 <code>getElementByClassName</code></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getElementByClassName</span><span class="token punctuation">(</span><span class="token parameter">className</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(^|\\s)</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>className<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(\\s|$)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> element<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> element <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><h4 id="封装一个类型检验工具函数"><a href="#封装一个类型检验工具函数" class="headerlink" title="封装一个类型检验工具函数"></a>封装一个类型检验工具函数</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token string">"Boolean|String|Number|Function|Array|Date|RegExp|Object|Error"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  utils<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">is</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[object </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><h4 id="压缩字符串"><a href="#压缩字符串" class="headerlink" title="压缩字符串"></a>压缩字符串</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^=&amp;]+)=([^&amp;]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">full<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> value  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compress</span><span class="token punctuation">(</span><span class="token string">"a=1&amp;b=2&amp;a=3&amp;b=4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// =&gt; "a=1,3&amp;b=2,4"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript-正则表达式迷你书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 终端美化 + 使用 Code 命令用 VSCode 打开文件夹</title>
      <link href="/790474d02aa4.html"/>
      <url>/790474d02aa4.html</url>
      
        <content type="html"><![CDATA[<img alt="布满奇石的青海岛，日本北长门海岸国定公园" src="https://bing.com/th?id=OHR.OmijimaIsland_ZH-CN3328515301_UHD.jpg" loading="lazy" /><h4 id="在终端使用-Code-命令"><a href="#在终端使用-Code-命令" class="headerlink" title="在终端使用 Code 命令"></a>在终端使用 <code>Code</code> 命令</h4><p>垂涎 Mac 的终端，能直接用 <code>Code .</code> 然后在 VSCode 中打开当前文件夹，作为一个 Windows 的开发者羡慕不已。直到前几天，在网上冲浪，发现了某个视频博主在 Windows 下，居然能也能用 <code>Code .</code> 命令，于是顺藤摸瓜，找到了下面这个（<a href="https://code.visualstudio.com/docs/setup/windows">链接指路</a>）：</p><img src="/790474d02aa4/1.png" class=""><p>点击标注的那个下载链接，然后傻瓜式安装即可。安装完毕后，就能在终端中使用 <code>Code .</code> 命令，用 VSCode 打开文件夹了。</p><h4 id="美化-PowerShell"><a href="#美化-PowerShell" class="headerlink" title="美化 PowerShell"></a>美化 PowerShell</h4><p>为了方便后续的操作，先去 Windows 商店下载一个 Windows Terminal。</p><img src="/790474d02aa4/2.png" class=""><p>接下来开始操作：</p><h5 id="安装-on-my-posh"><a href="#安装-on-my-posh" class="headerlink" title="安装 on-my-posh"></a>安装 <a href="https://ohmyposh.dev/docs/installation/windows">on-my-posh</a></h5><p>在终端中执行安装命令。</p><pre class="language-bash" data-language="bash"><code class="language-bash">winget <span class="token function">install</span> JanDeDobbeleer.OhMyPosh <span class="token parameter variable">-s</span> winget</code></pre><p>然后在终端中，执行下面的命令，如果有彩色的字体出现，则证明安装成功了。</p><pre class="language-bash" data-language="bash"><code class="language-bash">oh-my-posh init pwsh <span class="token operator">|</span> Invoke-Expression</code></pre><h5 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h5><p><code>on-my-posh</code> 有提供一些字体，如果不使用这些特定的字体，终端就会出现乱码的情况（<a href="https://github.com/ryanoasis/nerd-fonts#patched-fonts">字体指路</a>）。</p><img src="/790474d02aa4/5.png" class=""><p>选一款下载完压缩包，解压后，全选，右键，安装。</p><h5 id="设置终端字体"><a href="#设置终端字体" class="headerlink" title="设置终端字体"></a>设置终端字体</h5><p>打开终端设置面板。</p><blockquote><p>小知识：在命令行一栏，在命令的最后添加 <code>-nologo</code> 后缀，这样每次打开终端就没有 “可恶” 的凭证信息了。</p></blockquote><img src="/790474d02aa4/6.png" class=""><p>言归正传，点开外观一栏。</p><img src="/790474d02aa4/7.png" class=""><p>设置刚才下载的字体，如果没加载出来，记得重启终端。设置完之后，记得保存。</p><img src="/790474d02aa4/8.png" class=""><h5 id="查看所有主题"><a href="#查看所有主题" class="headerlink" title="查看所有主题"></a>查看所有主题</h5><pre class="language-bash" data-language="bash"><code class="language-bash">Get-PoshThemes</code></pre><p>最后，会有个提示，告诉我们怎么设置其他主题。</p><img src="/790474d02aa4/3.png" class=""><p><font color="red">红下划线</font>标注的路径：设置终端主题的配置文件，如果没有，按照这个路径创建就行。<br><font color="blue">蓝下划线</font>标注的命令：设置当前终端的主题，不过只是临时的，重新打开新的终端就会失效。永久设置主题就需要把这段命令粘贴在刚刚新建的配置文件里。</p><img src="/790474d02aa4/4.png" class=""><p><font color="red">红下划线</font>标注的，也即当前的主题，可根据自己喜好切换即可。（<a href="https://ohmyposh.dev/docs/themes">官网主题大全</a>）。</p><h5 id="VSCode-配置"><a href="#VSCode-配置" class="headerlink" title="VSCode 配置"></a>VSCode 配置</h5><p>在 VSCode 里还需设置终端的配置（下面是我的配置）：</p><img src="/790474d02aa4/9.png" class=""><p>然后，在 VSCode 里打开一个终端就能看到炫酷的主题啦！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev-Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型和原型链</title>
      <link href="/cf1875787629.html"/>
      <url>/cf1875787629.html</url>
      
        <content type="html"><![CDATA[<img src="/cf1875787629/banner.jpg" class=""><blockquote><p>最近在看 <em>JavaScript 设计模式与开发实践</em> ，虽然是 <em>15</em> 年出版的书，但书中所讲的东西对我这个小白来说，还是很前沿的。书中在正式开始讲设计模式之前，先将 <em>JavaScript</em> 里高级基础知识： <em>原型</em> 、<em>this、call、apply</em> 、<em>闭包</em> 详细介绍了一遍，对我来说简直就是福音，打算把这些挨个写篇笔记，记录一下。</p></blockquote><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>一种用以创建对象的模式，如果要想创建一个对象，一种方法是先指定它的类型，然后通过类来创建一个对象；另一种是，不在关心对象的具体类型，通过克隆创建一个一模一样的对象。</p><p>基本规则：</p><ul><li>所有数据都是对象。</li><li>得到一个对象不是通过实例化类，而是找到一个对象作为原型并克隆它。</li><li>对象会记住它的原型。</li><li>如果对象无法响应某个请求，就会把这个请求 <strong>委托</strong> 给它的原型。</li></ul><h4 id="JavaScript-中的原型继承"><a href="#JavaScript-中的原型继承" class="headerlink" title="JavaScript 中的原型继承"></a><em>JavaScript</em> 中的原型继承</h4><p><em>JavaScript</em> 同样也遵守上面的基本规则，虽然分为两种类型机制：基本类型（ <em><code>undefined、null、number、boolean、string、symbol</code></em> ），引用类型（ <em><code>array、object</code></em> ），除了 <em><code>undefined</code></em> 和 <em><code>null</code></em> （它俩没有原型），这些类型都能通过构造函数的形式（ <em><code>new</code></em> 操作符）来创建，可以说万物皆对象。而对于这些对象，追根溯源都来自一个根对象，这个根对象就是 <em><code>Object.prototype</code></em> 。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 对于非 Object 类型，它的原型等于它构造器的原型，而它原型的原型最终还是等于 Object.prototype</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Number</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span><span class="token comment">// 对于 Object 类型，它的原型就等于 Object.prototype</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span><span class="token comment">// 为了避免死循环，Object.prototype 的原型指向 null</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span></code></pre><p>准确来说，并不能说对象有原型，而是对象的构造器有原型。对于“对象把请求委托给它的原型”，更好的说法是，对象把请求委托给它的构造器的原型。下面手动实现一下 <em><code>new</code></em> 操作，就知道它内部具体都做了哪些操作。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">objectFactory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> constructor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment">// 拿到外部传入的构造器</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype <span class="token comment">// 设置 __proto__ 指向构造器的原型</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 将外部传入的属性通过构造器创建对象</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj <span class="token comment">// 确保构造器返回的总是一个对象</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token comment">// 下面两句代码产生相同的结果</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">objectFactory</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>name <span class="token operator">===</span> b<span class="token punctuation">.</span>name <span class="token comment">// true</span></code></pre><blockquote><p>关于 <em><code>__proto__</code></em> 和 <em><code>prototype</code></em> ，网上大部分都是以隐式原型和显式原型相称。我感觉我无法理解这个原型的一大部分原因就是这两个叫法，着实给我整迷了 😅。而 <em><code>__proto__</code></em> 是 <em>JavaScript</em> 给对象提供的隐藏属性，是对象与它构造器的原型联系的纽带，默认都会将 <em><code>__proto__</code></em> 指向构造器的原型对象，即 <em><code>constructor.prototype</code></em> 。</p></blockquote><p>在被公开了 <em><code>__proto__</code></em> 的浏览器中，可以验证：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span></code></pre><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>对于对象无法响应的请求，对象会将这个请求委托给它的原型，如果它的原型也无法响应，那么还会接着把这个请求委托给它原型的原型…… 就这样一直追溯到原型链的源头，若还是没有，就返回 <em><code>undefined</code></em> ，这个追溯的过程就形成了一条原型链。</p><p>除了对象正常创建时，自继承的原型，还可以动态的修改原型，以达到继承的效果。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tom"</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// "Tom"</span></code></pre><p>上方这段代码执行的过程：</p><ul><li>首先，尝试遍历对象 <em><code>b</code></em> 中的所有属性，但没有找到 <em><code>name</code></em> 这个属性。</li><li>接着，将查找 <em><code>name</code></em> 属性这个请求委托给对象 <em><code>b</code></em> 构造器的原型，由于 <em><code>b.__proto__</code></em> 记录着构造器的原型，并且指向 <em><code>A.prototype</code></em> ，而 <em><code>A.prototype</code></em> 被设置成了 <em><code>obj</code></em> 。</li><li>最后，在对象 <em><code>obj</code></em> 中查找 <em><code>name</code></em> 属性，找到了并返回它的值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript-设计模式与开发实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“搞定”了稿定证件照</title>
      <link href="/50be54edf29e.html"/>
      <url>/50be54edf29e.html</url>
      
        <content type="html"><![CDATA[<img alt="太湖边盛开的樱花，无锡 (© Eric Yang/Getty Images)" src="https://cn.bing.com/th?id=OHR.TaihuCherry_ZH-CN9040685764_1920x1080.jpg&rf=LaDigue_1920x1080.jpg&pid=hp" loading="lazy" /><h4 id=""><a href="#" class="headerlink" title=""></a></h4><blockquote><p>事情是这样的，朋友找我帮他证件照换个背景，顺便调整一下图片尺寸，我首选是打开了稿定官网（证件照换底），但是背景提供的只有几种颜色，而且尺寸也没有我想要的，于是就有了下面的故事…</p></blockquote><h4 id="思考？"><a href="#思考？" class="headerlink" title="思考？"></a>思考？</h4><ul><li>页面上固定的几种背景色（尺寸）无非是两种方式：<ol><li>通过后端接口获取；</li><li>写死在前端代码里。</li></ol></li></ul><blockquote><p>顺便提一下，最开始走的弯路。起初是看了几个接口传参的数据，误以为是通过接口传参配置的图片信息，然后再生成，于是就一股脑想着通过更改接口数据的方式，去生成自定义的。结果反反复复发请求，测试了好久，发现不太对：有一个 <em>PUT</em> 接口像是上传了一个图片，往这里深挖，发现了这个请求上传一个类似缩略图的东西到 <em>Minio</em> ，除了尺寸不太对（而且还没水印），其他的没啥不一样的，而且每次图片的高度都是 <em>300px</em> ，从这里开始，才渐渐走上正道 😂。</p></blockquote><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>刷新页面，把接口挨个看了个遍，没有一个返回了背景色或者尺寸，说明在前端代码里。打开控制台，<code>Ctrl + Shift + F</code>，搜索颜色色值（hex&#x2F;rgb），或者颜色名，果不其然：</p><img src="/50be54edf29e/1.png" class=""><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>点进去一看，好家伙，一个没少，而且尺寸的列表就在上面，直接一锅端了。</p><img src="/50be54edf29e/2.png" class=""><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><img src="/50be54edf29e/3.png" class=""><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h4 id="Fiddler-登场"><a href="#Fiddler-登场" class="headerlink" title="Fiddler 登场"></a>Fiddler 登场</h4><p>知道了颜色和尺寸的源头，接下来就是“篡改”这个 <em>JS</em> 文件，通过 <em>Fiddler</em> 拦截这个 <em>JS</em> 文件的请求，然后把它替换成自定义的 <em>JS</em> 文件。</p><p>打开 <em>Fiddler</em> ，找到请求这个 <em>JS</em> 文件的链接地址，先打开 <em>Tab</em> 栏中的 <em>AutoResponder</em> ，然后把左侧这个请求拖到 <em>AutoResponder</em> 中。</p><img src="/50be54edf29e/4.png" class=""><h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4><p>然后点击下拉框，找到最下方的 <em>Find a file…</em> ，选择修改的 <em>JS</em> 文件。选完之后，点击右侧的 <em>Save</em> ，同时勾选上方的两个选框：<em>Enable rules</em> 和 <em>Unmatched requests passthrough</em> 。</p><img src="/50be54edf29e/5.png" class=""><h4 id="-5"><a href="#-5" class="headerlink" title=""></a></h4><p>重新刷新页面，如果有下面这个报错，则需要额外设置 <em>Access-Control-Allow-Origin</em> 。</p><img src="/50be54edf29e/6.png" class=""><h4 id="-6"><a href="#-6" class="headerlink" title=""></a></h4><p>打开 <em>Tab</em> 栏中的 <em>Filters</em> ，找到最下方的 <em>Set response header</em> ，左边的框框填：<code>Access-Control-Allow-Origin</code>，右边的框框填：<code>https://koutu.gaoding.com</code>。</p><img src="/50be54edf29e/7.png" class=""><h4 id="-7"><a href="#-7" class="headerlink" title=""></a></h4><p>填完之后，记得开启 <em>Filters</em> 。</p><img src="/50be54edf29e/8.png" class=""><h4 id="-8"><a href="#-8" class="headerlink" title=""></a></h4><p>到这里，添加自定义背景色和尺寸已达目的，贴一下自己修改的内容：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 尺寸</span><span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"大二寸"</span><span class="token punctuation">,</span> <span class="token literal-property property">subtitle</span><span class="token operator">:</span> <span class="token string">"35x53mm"</span><span class="token punctuation">,</span> <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">413</span><span class="token punctuation">,</span> <span class="token number">626</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"自定义尺寸"</span><span class="token punctuation">,</span> <span class="token literal-property property">subtitle</span><span class="token operator">:</span> <span class="token string">"480x640"</span><span class="token punctuation">,</span> <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token operator">...</span>  <span class="token comment">/**   * val 各个参数含义   * val[0]: 图片宽度   * val[1]: 图片高度   * val[2]: 距离顶部距离   * val[3]: 未知   * val[4]: 缩放比例，0.6挺好   */</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 背景色</span><span class="token literal-property property">backgrounds</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"自定义蓝"</span><span class="token punctuation">,</span> <span class="token literal-property property">bg</span><span class="token operator">:</span> <span class="token string">"#64c5ff"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"浅灰"</span><span class="token punctuation">,</span> <span class="token literal-property property">bg</span><span class="token operator">:</span> <span class="token string">"#E1E0E5"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h4 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h4><p>上文提到的，有一个请求会上传一个缩略图，这是关键。查看这个接口触发时，调用的一些方法，很明显这哥仨绝对有问题。</p><img src="/50be54edf29e/9.png" class=""><h4 id="-9"><a href="#-9" class="headerlink" title=""></a></h4><p>还是在添加背景色和尺寸的那个 <em>JS</em> 文件中，找到了这个 <em>exportImage</em> 方法。</p><img src="/50be54edf29e/10.png" class=""><h4 id="-10"><a href="#-10" class="headerlink" title=""></a></h4><p>代码解读</p><pre class="language-txt" data-language="txt"><code class="language-txt">t => 前端生成的 canvas 对象e => canvas 的宽度，i => canvas 的高度n => 缩放比例：高度和宽度分别与300做运算，取最小的值，也即保证宽或者高最大为300r => 缩放后的宽度，s => 缩放后的高度按照 width == r，height == s 生成一个新的 canvas 对象，绘制在画板上，然后返回这个 canvas</code></pre><p>这也就解释了，之前测试接口时，为什么得到的图片高度一直是 <em>300px</em> ，只要将 <em>r</em> 和 <em>s</em> 保持原尺寸即可。</p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> r = n * e, s = n * i</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> r = e, s = i</span></span></code></pre><p>每次切换完背景或者尺寸后，会有一个请求 <em><a href="https://gd-filems.oss-cn-hangzhou.aliyuncs.com/gaoding/gaoding/[imgId]/[imgName].jpg">https://gd-filems.oss-cn-hangzhou.aliyuncs.com/gaoding/gaoding/[imgId]/[imgName].jpg</a></em> ，这个请求也即之前上传的缩略图。</p><img src="/50be54edf29e/11.gif" class=""><h4 id="-11"><a href="#-11" class="headerlink" title=""></a></h4><p>和官网下载对比了一下，原始下载的图片和这个调整尺寸后的缩略图，几乎没啥两样（亮出你的火眼金睛，下面两张图中找不同！<em>PS</em> ：<em>左图为官网下载，右图为缩略图</em> ），而且文件大小从 <em>300kb</em> 缩小到了 <em>27kb</em> ，完美！</p><img src="/50be54edf29e/12.png" class=""><h4 id="-12"><a href="#-12" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Fiddler </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue风格指南（选项、属性顺序）</title>
      <link href="/099ef0fda68d.html"/>
      <url>/099ef0fda68d.html</url>
      
        <content type="html"><![CDATA[<img  alt="扶着树干的大熊猫，四川卧龙国家级自然保护区 (© Katherine Feng/Minden Pictures)"  src="https://cn.bing.com/th?id=OHR.PandaDay_ZH-CN6584061291_1920x1080.jpg&rf=LaDigue_1920x1080.jpg&pid=hp"  loading="lazy"/><!DOCTYPE html><html>  <head>    <meta charset="UTF-8" />    <meta name="viewport" content="width=device-width, initial-scale=1.0" />    <meta http-equiv="X-UA-Compatible" content="ie=edge" />    <title>Markmap</title>    <style>      * {        margin: 0;        padding: 0;      }      #mindmap {        display: block;        width: 100vw;        height: 100vh;      }    </style>    <link      rel="stylesheet"      href="https://cdn.jsdelivr.net/npm/markmap-toolbar@0.2.0/dist/style.css"    />  </head>  <body>    <svg id="mindmap" style="transform: translateX(-25%)"></svg>    <script src="https://cdn.jsdelivr.net/npm/d3@6.7.0"></script>    <script src="https://cdn.jsdelivr.net/npm/markmap-view@0.2.7"></script>    <script src="https://cdn.jsdelivr.net/npm/markmap-toolbar@0.2.0/dist/index.umd.min.js"></script>    <script>      ;(r => {        setTimeout(r)      })(() => {        const { markmap, mm } = window        const toolbar = new markmap.Toolbar()        toolbar.attach(mm)        const el = toolbar.render()        el.setAttribute("style", "position:absolute;bottom:20px;right:20px")        document.body.append(el)      })    </script>    <script>      ;((getMarkmap, getOptions, data) => {        const { Markmap } = getMarkmap()        window.mm = Markmap.create("svg#mindmap", getOptions == null ? void 0 : getOptions(), data)      })(() => window.markmap, null, {        t: "root",        d: 0,        v: "",        c: [          {            t: "heading",            d: 1,            p: { lines: [0, 1] },            v: "组件/实例选项的顺序",            c: [              {                t: "heading",                d: 2,                p: { lines: [2, 3] },                v: "副作用（<em>触发组件外的影响</em>）",                c: [{ t: "list_item", d: 4, p: { lines: [4, 5] }, v: "<em>el</em> ：" }],              },              {                t: "heading",                d: 2,                p: { lines: [6, 7] },                v: "全局感知（<em>要求组件以外的知识</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [8, 9] },                    v: "<em><strong>name：</strong></em>",                  },                  { t: "list_item", d: 4, p: { lines: [9, 10] }, v: "<em>parent：</em>" },                ],              },              {                t: "heading",                d: 2,                p: { lines: [11, 12] },                v: "组件类型（<em>更改组件类型</em>）",                c: [{ t: "list_item", d: 4, p: { lines: [13, 14] }, v: "<em>functional：</em>" }],              },              {                t: "heading",                d: 2,                p: { lines: [15, 16] },                v: "模板修改器（<em>改变模板的编译方式</em>）",                c: [                  { t: "list_item", d: 4, p: { lines: [17, 18] }, v: "<em>delimiters：</em>" },                  { t: "list_item", d: 4, p: { lines: [18, 19] }, v: "<em>comments：</em>" },                ],              },              {                t: "heading",                d: 2,                p: { lines: [20, 21] },                v: "模板依赖（<em>模板内使用的资源</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [22, 23] },                    v: "<em><strong>components：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [23, 24] },                    v: "<em><strong>directives：</strong></em>",                  },                  { t: "list_item", d: 4, p: { lines: [24, 25] }, v: "<em>filters：</em>" },                ],              },              {                t: "heading",                d: 2,                p: { lines: [26, 27] },                v: "组合（<em>向选项里合并的 property</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [28, 29] },                    v: "<em><strong>extends：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [29, 30] },                    v: "<em><strong>mixins：</strong></em>",                  },                ],              },              {                t: "heading",                d: 2,                p: { lines: [31, 32] },                v: "接口（<em>组件的接口</em>）",                c: [                  { t: "list_item", d: 4, p: { lines: [33, 34] }, v: "<em>inheritAttrs：</em>" },                  {                    t: "list_item",                    d: 4,                    p: { lines: [34, 35] },                    v: "<em><strong>model：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [35, 36] },                    v: "<em><strong>props/propsData：</strong></em>",                  },                ],              },              {                t: "heading",                d: 2,                p: { lines: [37, 38] },                v: "本地状态（<em>本地的响应式 property</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [39, 40] },                    v: "<em><strong>data：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [40, 41] },                    v: "<em><strong>computed：</strong></em>",                  },                ],              },              {                t: "heading",                d: 2,                p: { lines: [42, 43] },                v: "事件（<em>通过响应式事件触发的回调</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [44, 45] },                    v: "<em><strong>watch：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [45, 46] },                    v: "生命周期钩子（<em>按执行顺序</em>）",                    c: [                      {                        t: "list_item",                        d: 6,                        p: { lines: [46, 47] },                        v: "<em><strong>beforeCreate：</strong></em>",                      },                      {                        t: "list_item",                        d: 6,                        p: { lines: [47, 48] },                        v: "<em><strong>created：</strong></em>",                      },                      {                        t: "list_item",                        d: 6,                        p: { lines: [48, 49] },                        v: "<em><strong>beforeMount：</strong></em>",                      },                      {                        t: "list_item",                        d: 6,                        p: { lines: [49, 50] },                        v: "<em><strong>mounted：</strong></em>",                      },                      {                        t: "list_item",                        d: 6,                        p: { lines: [50, 51] },                        v: "<em>beforeUpdate：</em>",                      },                      { t: "list_item", d: 6, p: { lines: [51, 52] }, v: "<em>updated：</em>" },                      { t: "list_item", d: 6, p: { lines: [52, 53] }, v: "<em>activated：</em>" },                      { t: "list_item", d: 6, p: { lines: [53, 54] }, v: "<em>deactivated：</em>" },                      {                        t: "list_item",                        d: 6,                        p: { lines: [54, 55] },                        v: "<em><strong>beforeDestroy：</strong></em>",                      },                      { t: "list_item", d: 6, p: { lines: [55, 56] }, v: "<em>destroyed：</em>" },                    ],                  },                ],              },              {                t: "heading",                d: 2,                p: { lines: [57, 58] },                v: "非响应式的 property（<em>不依赖响应系统的实例 property</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [59, 60] },                    v: "<em><strong>methods：</strong></em>",                  },                ],              },              {                t: "heading",                d: 2,                p: { lines: [61, 62] },                v: "渲染（<em>组件输出的声明式描述</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [63, 64] },                    v: "<em><strong>template/render：</strong></em>",                  },                  { t: "list_item", d: 4, p: { lines: [64, 65] }, v: "<em>renderError</em>" },                ],              },            ],          },          {            t: "heading",            d: 1,            p: { lines: [66, 67] },            v: "元素 attribute 的顺序",            c: [              {                t: "heading",                d: 2,                p: { lines: [68, 69] },                v: "定义（<em>提供组件的选项</em>）",                c: [{ t: "list_item", d: 4, p: { lines: [70, 71] }, v: "<em>is：</em>" }],              },              {                t: "heading",                d: 2,                p: { lines: [72, 73] },                v: "列表渲染（<em>创建多个变化相同的元素</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [74, 75] },                    v: "<em><strong>v-for：</strong></em>",                  },                ],              },              {                t: "heading",                d: 2,                p: { lines: [76, 77] },                v: "条件渲染（<em>元素是否渲染/显示</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [78, 79] },                    v: "<em><strong>v-if：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [79, 80] },                    v: "<em><strong>v-else-if：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [80, 81] },                    v: "<em><strong>v-else：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [81, 82] },                    v: "<em><strong>v-show：</strong></em>",                  },                  { t: "list_item", d: 4, p: { lines: [82, 83] }, v: "<em>v-cloak：</em>" },                ],              },              {                t: "heading",                d: 2,                p: { lines: [84, 85] },                v: "渲染方式（<em>改变元素渲染方式</em>）",                c: [                  { t: "list_item", d: 4, p: { lines: [86, 87] }, v: "<em>v-pre：</em>" },                  { t: "list_item", d: 4, p: { lines: [87, 88] }, v: "<em>v-once：</em>" },                ],              },              {                t: "heading",                d: 2,                p: { lines: [89, 90] },                v: "全局感知",                c: [{ t: "list_item", d: 4, p: { lines: [91, 92] }, v: "<em>id：</em>" }],              },              {                t: "heading",                d: 2,                p: { lines: [93, 94] },                v: "唯一的 attribute",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [95, 96] },                    v: "<em><strong>ref：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [96, 97] },                    v: "<em><strong>key：</strong></em>",                  },                ],              },              {                t: "heading",                d: 2,                p: { lines: [98, 99] },                v: "双向绑定",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [100, 101] },                    v: "<em><strong>v-model：</strong></em>",                  },                ],              },              {                t: "heading",                d: 2,                p: { lines: [102, 103] },                v: "其他 attribute（<em>静态</em>）",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [104, 105] },                    v: "<em><strong>class：</strong></em>",                  },                  {                    t: "list_item",                    d: 4,                    p: { lines: [105, 106] },                    v: "<em><strong>style：</strong></em>",                  },                  { t: "list_item", d: 4, p: { lines: [106, 107] }, v: "<em>......</em>" },                ],              },              {                t: "heading",                d: 2,                p: { lines: [108, 109] },                v: "事件",                c: [                  {                    t: "list_item",                    d: 4,                    p: { lines: [110, 111] },                    v: "<em><strong>v-on：</strong></em>",                  },                ],              },              {                t: "heading",                d: 2,                p: { lines: [112, 113] },                v: "内容",                c: [                  { t: "list_item", d: 4, p: { lines: [114, 115] }, v: "<em>v-html：</em>" },                  { t: "list_item", d: 4, p: { lines: [115, 116] }, v: "<em>v-text：</em>" },                ],              },            ],          },        ],        p: {},      })    </script>  </body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-20】写在最后</title>
      <link href="/fc9c0d5977ec.html"/>
      <url>/fc9c0d5977ec.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    亲爱的读者，到这里本小册就要结束了，你是否从中学习到了属于你的知识呢？我们来回顾一下小册的内容吧。  </p>  <p>    Vue.js 在开发独立组件时，由于它的特殊性，无法使用 Vuex、Bus    这样的第三方插件来做组件通信，因此小册提到了 3    种组件间的通信方法，都是支持跨多级的：  </p>  <ol>    <li>      provide / inject：由父组件通过      <code>provide</code> 向下提供一个数据，子组件在需要时，通过      <code>inject</code> 注入这个依赖，就可以直接访问父级的数据了。    </li>    <li>      dispatch / broadcast：组件向上派发或向下广播一个自定义事件，组件通过      <code>$on</code> 来监听。    </li>    <li>      findComponents 系列：共包含 5 个方法，通过组件的      <code>name</code>      选项，遍历找到对应的实例，这是组件通信的终极方案，适用于所有场景。    </li>  </ol>  <p>本册总共讲解了 7 个组件的实例：</p>  <ol>    <li>具有数据校验功能的 Form 组件，它用到了第 1 种组件通信；</li>    <li>组合多选框 Checkbox 组件，它用到了第 2 种和第 3 种组件通信；</li>    <li>Display 组件，它利用 Vue.js 的构造器 extend 和手动挂载 $mount API；</li>    <li>      全局通知 $Alert 组件，也是利用了 $mount API，与传统组件不同的是，它基于      Vue.js 组件开发，但却是以 JavaScript 的形式调用的，并且组件会在 body      节点下渲染；    </li>    <li>      表格组件 Table，典型的数据驱动型组件，使用了函数式组件（Functional      Render）来自定义列模板；    </li>    <li>      表格组件 Table，与上例不同的是，它的自定义列模板使用了      <code>slot-scope</code>；    </li>    <li>      树形控件 Tree，典型的数据驱动型组件，也是典型的递归组件，其中利用 computed      做父子节点联动是精髓。    </li>  </ol>  <p>    最后的拓展部分，对 Vue.js 组件的常见 API 做了详细介绍，以及常见的 Vue.js    面试题分析和对开源的一些见解。  </p>  <p>    Vue.js 组件开发，归根到底拼的是 JavaScript 的功底，Vue.js    在其中只是决定了开发模式，所以，打好 JavaScript 基础才是最重要的。  </p>  <p>最后，祝愿亲爱的读者能在编程的道路上越走越远。</p>  <p>    <strong      >另外，如果您有关于 Vue.js 或其它前端相关的问题，可以通过      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fdev.iviewui.com%2Fissues"        title="https://dev.iviewui.com/issues"        ref="nofollow noopener noreferrer"        >iView 社区</a      >      付费向笔者提问，希望能对一部分人有所帮助。</strong    >  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-19】拓展：如何做好一个开源项目（下篇）</title>
      <link href="/a01654586660.html"/>
      <url>/a01654586660.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <h2 data-id="heading-1">持续运营</h2>  <p>    项目有了一定的规模和进展后，需要持续运营，让更多的人知道和使用。运营并不是个技术活，对于程序员来说，还是或缺的技能。最简单的运营手段，就是在一些技术社区分享“软文”，iView    在早期就是这样做的，还总结出了一个 “500 star    定律”，也就是说，每一次分享文章，差不多能在 GitHub 带来 500 个 star。star    对于一个开源项目来说，还是蛮重要的，它直接决定了用户是否会选择你的项目，但用户都是程序员，又不傻，如果项目质量低，star    就变的一文不值了，还会坏了口碑。切记，不要刷    star，前端圈堪比娱乐圈，会被针对的很惨。  </p>  <p>    当然，不是什么内容都能发，比如更新日志，最好就不要发了，除非像 2.0、3.0    这种大版本。即使是发大版本的更新内容，也不是说把更新日志一贴就完事，如果你足够重视你的开源项目，就应该重视每一篇文章，把更新的核心思路说清楚。典型的案例可以参考    iView：  </p>  <ul>    <li>      <a        target="_blank"        href="https://juejin.cn/post/6844903648456097800"        title="https://juejin.cn/post/6844903648456097800"        >iView 发布 3.0 版本，以及开发者社区等 5 款新产品</a      >    </li>    <li>      <a        target="_blank"        href="https://juejin.cn/post/6844903574544056333"        title="https://juejin.cn/post/6844903574544056333"        >iView 近期的更新，以及那些“不为人知”的故事</a      >    </li>    <li>      <a        target="_blank"        href="https://juejin.cn/post/6844903504394321927"        title="https://juejin.cn/post/6844903504394321927"        >iView 发布后台管理系统 iview-admin，没错，它就是你想要的</a      >    </li>  </ul>  <p>    标题的重要性就不必说了，在信息爆炸的时代，你的标题不够吸引人，根本没人看。  </p>  <p>目前，有几个社区是值得关注和积累粉丝的：</p>  <ul>    <li>      掘金：比较活跃的程序员社区，前端属性较浓，社区运营做的很好，对开源项目有扶持，相关的文章首次亮相，官方都会给予一定的资源支持。    </li>    <li>      知乎：流量最大的社区，大 V      属性，如果你是初入知乎，可以把文章投稿到热门的专栏，比如前端评论外刊、前端之巅等。因为自己起初是没有粉丝订阅的，发表了也不会有人看到，投稿就不一样了。而且，被某个大      V 赞一下，那效果就像中奖。    </li>    <li>v2ex：不用解释，就是很火的社区。</li>  </ul>  <p>    开源项目，一般都会在 GitHub    托管，不过也可以在开源中国（Gitee）同步一份，每个版本的更新日志，可以以新闻的形式，向开源中国投稿。开源中国在国内还是有一定的影响力的。  </p>  <p>    除了发表文章，一些技术分享大会也可以关注，可以以公司的名义申请成为嘉宾做分享。如果有机会，还可以到其它公司做技术分享，尤其是大厂商，这些都是难得推广开源项目的好机会。你的开源项目，如果有几个    BAT 这类的大厂使用，那会成为维护者、社区用户和观望者的信心来源。  </p>  <p>    还有发布会。在国内，开源项目搞发布会的，据我所知只有 iView。没错，18 年 7    月，iView 搞了一场新品发布会，线下进行，线上同步直播，当时有超过 2    万的在线用户观看，推广效果还是不错的。一场“合格”的活动，要分<strong>活动前</strong>、<strong>活动中</strong>、<strong>活动后</strong>。活动开始前一个月，就要散布消息，让用户有个初步印象，之间还可以爆料一些活动热点；活动进行中，要有专人负责现场，还要与观众互动；活动结束后，要加个班，把核心内容整理为文字，在第一时间通过官方渠道发表出来。这种大规模的活动，没有公司支持，个人很难完成的，因为这不是一两个人的事，需要很多工作人员一起完成，幕前幕后、直播的网络、现场    wifi，还要应对各种突破状况，不过，最重要的还是活动内容的策划准备了，否则一切都是纸上谈兵。  </p>  <p>    讲到这，你可能会说，老老实实做技术不好吗，非要弄这些花里胡哨的东西。的确，推广这件事，并不是做开源必须的，老实做技术没有错，推广只是让你的开源项目更快传达给目标用户。做这些事的目的就一个，让更多的人使用你的开源项目，让更多的开发者参与贡献代码。  </p>  <p>最后一点，如果你的公司或团队有经费，适当投放一点广告也是不错的。</p>  <h2 data-id="heading-2">国际化</h2>  <p>    是时候与世界接轨了。一般来说，国际化（Internationalization，简称 i18n）分 3    个部分，首先是你的开源项目支持多国语言，对于 UI    组件库来说，这个还是很好支持的，只需要提供一个多语言的配置文件就行，每种语言一个文件，然后由社区贡献更多的语言。以    Vue.js 为例，社区也提供了 vue-i18n 插件，那你的组件库还要兼容    vue-i18n，可能还要考虑兼容多个主流的版本。  </p>  <p>    另一部分是文档的国际化，除了中文，至少应该提供一个英文版本，毕竟英文算是通用的语言。如果文档内容不多，可以让社区来提供更多的翻译版本。维护多语言的文档是一件很辛苦的事，这意味着每一个版本更新都是中英双语的，并不是说文档翻译一遍就不管了。好在翻译文档是个一次性的技术活，前期多找一些英文好的热心用户一起翻译，后面只要确保每次更新都保持中英双语就好了。  </p>  <p>    做国际化，意味着要服务国际友人，那就不能强求他们用微信或    QQ。在开源界，比较通用的是    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgitter.im"      title="https://gitter.im"      ref="nofollow noopener noreferrer"      >Gitter</a    >，只需要关联一次 GitHub 的 repo 就行。除此之外，官方可以在 Twitter    开通一个账户，来更新一些动态，与其它 Twitter 互动。<a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fdiscordapp.com%2F"      title="https://discordapp.com/"      ref="nofollow noopener noreferrer"      >Discord</a    >    也是技术圈比较热门的一个 App，以 Vue.js 来说，你可以加入一个名为    <strong>Vue Land</strong> 的服务器，在里面找到    <strong>#ui-libraries</strong>    的频道，就可以和全世界的开发者讨论组件库的话题了。  </p>  <p>    支持国际化，短期来看，是一件付出回报比很低的事，但从长远利益出发，对国际化的支持，有助于更多的国外开发者成为核心    maintainers，让全世界能够参与进来，才是开源的意义所在。  </p>  <h2 data-id="heading-3">让更多的人参与</h2>  <p>    开源项目从来就不是一个人的事，一个健壮的开源项目，需要不断有人贡献代码。在项目有了一定知名度和使用人群后，自然会有不少    PR 进来，知名的开源项目 contributors 都有几百人，哪怕修改一行代码，只要被    merge，就算一个 contributors。最核心的维护者一般不会超过 5    人，而且除了作者本人，很多都是阶段性的，毕竟是开源，大多数人还是兼职做的，能贡献一点是一点，业务忙了就没顾不上了。  </p>  <p>    为开源项目贡献代码，主要以 PR 的形式进行，作为一个开源项目的 owner，即使    organization 的其他成员有直接 commit 的权限，也应该建议他们提交    PR，而不是直接 commit，owner 需要认真 review 每一个 PR    以确保代码质量。修复一个问题最怕的，是引起新的问题，或导致以前已修复的问题又复现，有时候，contributor    可能只为了 fix 某一个    issue，但它对整个项目是不了解的，而且对以前“发生的事情”都不了解，会导致一些他看不到的问题，这种情况作为    owner 就要认真审查了。  </p>  <p>    参与一个开源项目的方式有很多，除了最直接的 PR，还可以 review    issues。项目活跃时，每天都会有不少 issues 进来，owner    可能没时间及时处理，但可以<strong>打标签</strong>（labels）。一个 issue    被标记了 label，说明已经审核过此 issue，常见的 label 有以下几种：  </p>  <ul>    <li><strong>bug</strong>：已确定为 bug；</li>    <li><strong>feature request</strong>：已确定为请求新功能；</li>    <li><strong>invalid</strong>：无效的 issue，一般可以直接关闭；</li>    <li>      <strong>contribution welcome</strong>：owner      可能暂时没有精力处理，期望社区来贡献代码；    </li>    <li><strong>provide example</strong>：issue 需要提供复现示例；</li>    <li><strong>discussion</strong>：暂时无法断定，需要进一步讨论；</li>    <li>      <strong>may be supported in the future</strong      >：先标记一下，也许未来会支持。    </li>  </ul>  <p>    管理 issues    的另一个方式是用好<strong>里程碑</strong>（milestones）功能。milestones    可以按照版本号创建，把期望在这个版本解决的 issues 添加进去，发版前对当前    milestone 的所有 issues 集中查看，是否都处理完成了。  </p>  <p>    有一些<strong>有价值</strong>的 issues    可能会耗费不少精力处理，而且社区很多用户都希望能够解决，owner    当然也希望处理，只是没有时间。这种情况不妨<strong>有偿悬赏</strong>，推荐一个新起的国外社区    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fissuehunt.io%2F"      title="https://issuehunt.io/"      ref="nofollow noopener noreferrer"      >IssueHunt</a    >，用户可以为某一个 repo 的 issue 众筹，谁处理了，就可以得到全部赏金。  </p>  <p>    每一个版本发布后，记得创建一条    release，这样做一是有一个版本更新日志记录的地方，二是 watch    你项目的人都可以及时收到邮件通知提醒升级，三是 release 会打一个    tag，其它贡献者可以切换到此 tag。release    最好不要在发版前再创建，不然整理起来很费劲，建议每个 release    发布后，就新建下一个版本的 release 作为草稿（draft），处理一个    issue，就记录一条，避免遗漏。  </p>  <p>    版本号也是有讲究的，比如 3.2.1，这里的最后一位，代表只有 bug    fixed，中间一位代表有 new features，第一位代表有 break    changes。一般来说，除了第一位，剩下的版本都是兼容式的，就是说用户升级后不会影响当前项目，如果有    API 的变更，应该发布第一位版本号。  </p>  <p>    代码贡献越活跃，贡献者越多，开源项目也越健壮，作为    owner，应该及时联络有价值的贡献者，一个人的能力毕竟是有限的。当你与世界各地讲着不同语言的的人，一起完成一个开源项目，会觉得开源真是一件了不起的事情。  </p>  <h2 data-id="heading-4">让 Robot 来做“坏人”</h2>  <p>    开源项目有一定的规模后，社区就会很活跃，每天都会有大量的 issues，这些 issues    越积越多，不及时处理掉，对 owner    来说就是精神压力。在项目初期，由于使用者不多，是鼓励提 issues    的，建议、新功能请求、bug    反馈、问题咨询等各种内容都可以提交，而且作者有足够的时间和精力来认真回答。到了一定规模后，可能什么    issues 都会出现，不乏一些带有恶意的、言语攻击的，如果直接关闭    issue，可能还会继续“纠缠”，说 owner    态度不好之类的，这些都是笔者亲身经历过的。  </p>  <p>    除了恶意的 issues，还有很多 issues    不符合格式要求，连代码格式化都没有，甚至连问题都说不清楚，也没有描述，就一个标题，这些无效的    issues 一个个回复都会占据大量的精力，直接 close    还会被说没处理怎么就关闭了，实属无奈。  </p>  <p>    这时你需要一个 GitHub 机器人来充当“坏人”的角色，也就是注册另一个 GitHub    账户，用它来处理一些不符合要求的 issues，这是一个很聪明的做法，关闭 issues    这些活都让 robot 来操作。比如 iView 的“坏人”就是    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview-bot"      title="https://github.com/iview-bot"      ref="nofollow noopener noreferrer"      >iview-bot</a    >，不过它是一个智能的 robot，不需要 owner 控制，会自动关闭不合格的 issues    并回复提问者。GitHub 提供了 API 来接收每一个 issues 并通过 API 来操作    issues，包括关闭、打标签、回复等，只要给 robot 设置足够的权限就行。比如    iView 的 issues 机器人代码是    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview-bot"      title="https://github.com/iview/iview-bot"      ref="nofollow noopener noreferrer"      >github.com/iview/iview…</a    >。用户如果直接通过 GitHub 提交 issues，会被 robot 立即关闭，并回复：  </p>  <blockquote>    <p>      Hello, this issue has been closed because it does not conform to our issue      requirements. Please use the      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fwww.iviewui.com%2Fnew-issue"        title="https://www.iviewui.com/new-issue"        ref="nofollow noopener noreferrer"        >Issue Helper</a      >      to create an issue - thank you!    </p>  </blockquote>  <p>    就是说，用户必须通过    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fwww.iviewui.com%2Fnew-issue"      title="https://www.iviewui.com/new-issue"      ref="nofollow noopener noreferrer"      >Issue Helper</a    >    这个页面提交 issues    才可以，不是通过它提交的，会被检测出来立即关闭。在这个页面中，用户需要提供详细的描述才能通过表单验证。issues    只接受 bug 报告或是新功能请求 (feature    requests)，对于使用咨询等其它问题，都不能提交，而是鼓励到 Stackoverflow    之类的社区讨论。如果是    Bug，还必须提供能够最小化复现问题的在线链接，以及详细的复现步骤。  </p>  <p>    robot 还有一个作用：翻译。它会把中文的 issues    自动翻译为英文并把翻译内容自动创建一条回复，同时标题也会修改为英文。开源项目到这个规模，使用者和贡献者不仅仅是中国人了，世界各地的开发者都有，使用英文会让所有人都看懂    issues。  </p>  <p>    虽然 robot 能自动过滤 80% 不合格的    issues，但仍有浑水摸鱼的用户跳过这些验证，这时可以给 robot    设置一些快捷回复，人为来 comment &amp; close：  </p>  <ul>    <li>      <p>        Hello, this issue has been closed because similar problems exist or have        been explained in the documentation, please check carefully.        <em>已有相同 issues，或文档有说明</em>      </p>    </li>    <li>      <p>        Hello, this issue has been closed because it is not required to submit        or describe is not clear. <em>描述不清楚</em>      </p>    </li>    <li>      <p>        Hello, this issue has been closed because it has nothing to do with the        <strong>bug report</strong> or <strong>feature request</strong>. Maybe        you can ask normal question through        <a          target="_blank"          href="https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Ft%2Fiview"          title="https://segmentfault.com/t/iview"          ref="nofollow noopener noreferrer"          >SegmentFault</a        >        or        <a          target="_blank"          href="https://link.juejin.cn?target=https%3A%2F%2Fstackoverflow.com%2F"          title="https://stackoverflow.com/"          ref="nofollow noopener noreferrer"          >stackoverflow</a        >. <em>不是 bug 反馈或 新功能请求，请到社区讨论</em>      </p>    </li>    <li>      <p>        Hello, this issue has been closed because it is not a bug, but a usage        problem, please consult other communities. <em>用法不对</em>      </p>    </li>    <li>      <p>        Please provide online code. You can quickly create an example using the        following online link：<a          target="_blank"          href="https://link.juejin.cn?target=https%3A%2F%2Frun.iviewui.com%2F"          title="https://run.iviewui.com/"          ref="nofollow noopener noreferrer"          >run.iviewui.com/</a        >. <em>没有提供在线示例</em>      </p>    </li>  </ul>  <p>其实呢，这个“坏人”也没那么坏，还是挺可爱的。</p>  <h2 data-id="heading-5">赞助与商业化</h2>  <p>    开源项目的发展离不开资金的支持，向社区寻求赞助并不是一件“羞耻”的事情，而是理所当然的。  </p>  <p>    最简单的赞助方式就是通过二维码打赏，不过这种方式在国内几乎没有什么用，中国的开发者大多比较“囊中羞涩”，而且由于打赏的匿名性（微信），时不时收到个    1 分钱，也就呵呵了。  </p>  <p>    这里推荐几种比较好的“募资”方式：<a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fwww.patreon.com%2F"      title="https://www.patreon.com/"      ref="nofollow noopener noreferrer"      >patreon</a    >    和    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fopencollective.com%2F"      title="https://opencollective.com/"      ref="nofollow noopener noreferrer"      >opencollective</a    >    是开源项目最常用的，可以一次性支持，或周期性，以美元结算，可转至    PayPal。不过这两种都是美元，而且转到 owner    这里，扣除手续费可能少很多，不过对赞助者（往往是企业）来说，好处就是有发票。另一种方式是通过开源中国来赞助，开源中国的用户还是比较慷慨的。  </p>  <p>    另一种是投放广告，这里推荐    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fwww.carbonads.net%2F"      title="https://www.carbonads.net/"      ref="nofollow noopener noreferrer"      >Carbon</a    >，不同于 Google Ads    的是，它的广告都是与互联网相关的，而且样式可以完全自定义，很美观，不会让用户产生反感，广告根据展示和点击转化付费。Carbon    的中国市场负责人中文很溜哦，作为中国开发者，不用担心谈不来。  </p>  <p>    不过呢，最值得推荐的还是接入<strong>品牌广告</strong>，但前提是你的文档要有一定的流量。开源项目的文档有着最大的特点：访问者几乎都是程序员，所以你要是挂个某多多的广告，几乎会被喷死。在线教育、云主机服务商都是不错的选择。一般不会有人主动联系    owner 投放的，除非像 Vue.js    这种级别的，但你可以尝试发一封友好的邮件来询问。不知道发给谁？告诉你个好办法，去其它社区（比如    v2ex）看看都有哪些金主投放就知道了，既然已经投放，说明有投放广告的需求，都是潜在的目标“客户”。  </p>  <p>再来说说商业化。</p>  <p>    开源并不是意味着免费，根据开源协议的不同，有的开源软件在用于商业时，可能要购买授权，源码是开放的，但不一定可以免费使用。不过能够收取授权费，也说明你的软件确实无可替代。企业为了避免不必要的纠纷，肯定是愿意购买你的软件的。但是对于大多数    MIT 的开源项目，可以商业化吗？答案是肯定的。  </p>  <p>    首先要知道，能够付费的，都是企业，而非个人，个人也没有付费的必要。一种比较常见的模式就是软件免费，然后可以向企业提供额外的付费咨询服务或顾问。最懂开源项目的人，绝对是这个项目的    owner，如果企业是深度用户，还是很愿意支付一些费用来咨询问题的。我是做 to B    业务的，我们公司也是做 to B 的，公司高管大多也来自 Oracle（算是比较大的 to B    企业了），所以我对企业服务也有一定的理解，一款好的产品，绝对是技术加咨询服务。  </p>  <p>    商业化还是有很多方式的，具体要看开源项目的类型。以组件库为例，它本身是免费的，也可以无限制免费使用，但可能提供付费的高级组件或模板系统，以及其它生态产品，比如基于组件库的    IM 系统。  </p>  <p>    当然了，并不是所有的开源项目都要商业化，大部分还是完全免费的，商业化也有利弊，如果没有一定的实力，很有可能搞砸哦！  </p>  <p>    以上，就是我从事开源工作两年多的一些浅薄经验，希望能给聪明的你带来帮助。  </p>  <h2 data-id="heading-6">结语</h2>  <p>每个开发者，都应该尝试维护一个开源项目。</p>  <p>    每个开发者，都应该抱着一颗敬畏之心使用他人的开源项目，而不是“用你的是看得起你”。  </p>  <p>每个开发者，都应该适当地赞助一个帮助过你的开源项目。</p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-18】拓展：如何做好一个开源项目（上篇）</title>
      <link href="/9fcd9b1b6e43.html"/>
      <url>/9fcd9b1b6e43.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <h2 data-id="heading-1">iView 的故事</h2>  <p>    毕业四年以来，我一直觉得自己是一个很幸运的人，幸运参与过创业，幸运一路有大牛带，幸运开源了    iView 项目。  </p>  <p>    2016 年初，我还是一名普通的前端工程师，那时候还是 Vue.js 1.x    的时代，知名度也远不如现在，在大部分人眼中，Vue.js 就是一个轻量级的    Angular。  </p>  <p>    我所在的公司是做 to B 业务的，与大部分公司一样，那时主导 jQuery，把 Vue.js    引入团队乃至整个公司，是一件很不易的事，因为不是你自己在用，你要说服所有人用，现在看来，当初的决定是很正确的。如果你有兴趣，欢迎阅读扩展阅读    1，那篇文章详细介绍了我的 Vue.js “推广史”。  </p>  <p>    到了 16 年 7 月，我们团队已经完全认可了 Vue.js + Webpack    的技术栈，一直践行至今。一个偶然的机会，公司举办了一个创新大赛，作为可视化团队，我提议做一套自己的组件库。当初也只是一个想法，抱着试试看的态度就报名了。比赛的目的只是呼吁大家创新，后续就没有动作了，但是我没有就此放下，从那时起，几乎全职开发    iView，两年半来，我每天的工作基本就是维护    iView。不得不说，一个成功的开源项目，必须有 leader    的认可和公司的支持，缺一不可。  </p>  <p>    那时不比现在，优秀的 Vue.js 组件库非常少，文献更是少得可怜。一开始做 iView    没什么头绪，只是规划了一张 MindNode    脑图，罗列了一期要做的所有组件。这里有一个插曲，因为这张 todo 的脑图有贴在    GitHub 的 Readme，以至于一开始大部分 issues    都是问这个脑图是用什么软件做的，因为做的很好看，索性写了个提问须知，注明了脑图是用    MindNode 制作的。  </p>  <p>    起初对开源工作不是很了解，连一个编译工程都搭不起来，想了数日也搞不定。与大部分人一样，一开始也是要参考其它人的开源项目（就像现在很多人参考    iView 是一样的），那是我参考 Vux（移动端的 Vue.js 组件库，当时有 6k    star），向作者捐了杯咖啡钱，顺便加了好友（因为是支付宝捐赠，能加好友），请教了工程的问题，这才一步步搭起来，现在想想真是幸运。  </p>  <p>    万事开头难，把地基搭好，剩下的都是添砖加瓦的事。差不多 16 年底，iView    一期完成了（43    个组件），也发布了第一个正式版，有了第一批用户（当然，主要还是自己公司），然而在那个时候，又做了一个在今天看来稍晚但正确的决定——支持    Vue.js 2。  </p>  <p>    虽然是开源项目，但主要还是先满足自己团队和公司的需求，那个时候所有的项目都是    Vue.js 1.x 的，还没有用 Vue.js 2，但 2.x 已经发布有一段时间了，以至于在 2017    年初，GitHub 有很多 issues 问什么时候支持 2.x。很长一段时间没有升级到    2.x，主要因为要支持公司的项目，而我当时也觉得升级到 2.x    是一个很耗时的工作，就没有支持。后来，有一个人提交了一个非常大的    PR，将所有组件都支持了 2.x，而且只用了一个周末的时间。这件事让我意识到支持    Vue.js 2.x 的重要性了，于是花了 2 周时间研究，并升级到了 2.x（那个 pr    没有直接合并，而是参考，因为很多地方有    bug）。接下来的几个月，都在不断维护新的    iView，使用者也不断增多，社区又重新活跃起来。  </p>  <p>    如果当初没有及时转型（现在看来仍然是晚了），还在一味地维护 Vue.js 1.x    版本，那 iView    也许早就完了。有了好的开头，就要不放弃，不抛弃，坚持做下去，认真处理每一个    PR，因为质量是一个开源组件库最重要的，但并不是每一个 PR 都适合    merge，即使作者付出了很多时间提交这个 PR，也会有质量问题。  </p>  <p>    有了不错的口碑，在 2018    年继续完善，目前已经是同类产品里功能最丰富的组件库，而且在 18 年的 7 月 28    日（iView 两周年）成功举行了 3.0 发布会，一切都在朝着更好的一面发展着......  </p>  <p>    这就是我的 iView    开源的故事，一个成功的开源项目，或许带有一点小幸运，因为如今的同类开源产品已经数不胜数了，不过确实有很多值得分享的地方，如果你打算做一个开源项目，希望下面的些许经验能够帮助到你。  </p>  <h2 data-id="heading-2">不要盲目造轮子</h2>  <p>    每一个做开源项目的开发者，都是有目的的，如果你做一个开源项目没有任何目的，那你的目的多半是要造个轮子来提升下技术。  </p>  <p>    中国当前的开源环境和氛围虽不是很好，“拿来主义”者居多，但相比几年前，已是不错了，更多的人喜欢把自己杰出的代码开源出来。目前多数“正经”的开源项目，都是    KPI    导向的，不能说项目不好，只是一定时间后，可能就不维护了，而开源项目不仅仅要解决问题，持续维护也是观望着最在意的。  </p>  <p>    相比 React，Vue.js    的组件库开源项目要多的多，每隔一段时间就能看到几个新的，可能是因为 Vue.js    更容易上手，开发者很活跃。既然已经有这么的同类项目了，那为什么还要持续造轮子呢？因为中国的开发者就是喜欢自己折腾一个，而不是去维护一个现成的。  </p>  <p>    就以 Vue.js    组件库的开源现象来说，源源不断的轮子，主要还是市面上已有的组件库不能完全满足自己的业务，主要还是    UI    层面的，单论功能，市面上成熟的组件库足够完善，甚至超出你的业务需求。不好说这种现象是好是坏，好的是从头开发一个组件库，对技术的提升还是有的，它会督促你学习别人的代码，来改良自己的代码，否则造一个还不如别人的轮子也就没意义了。对于公司来说，也有了自己的    UI 组件库和规范（虽然很多只是 fork    后改的），感觉用自己的东西，对内对外都是一件很自豪的事。不好的就是，这是一种程序员向产品或    UI 或 leader    的妥协，因为没办法说服他们使用市面上成熟的组件库，否则，完全可以把造轮子的精力用于维护一个成熟的项目。  </p>  <p>    造轮子这个词，似乎成了前端圈的代名词，的确，前端的造轮子能力是极强的，但不能盲目造轮子。如果你只是仿照其它开源项目练习，那就不说了，如果是想认真做一个开源项目，而不是造个轮子玩玩，那一定要构思好你要做的东西。  </p>  <p>    一般来说，在决定做一个开源项目前，都是要做市场调研的，你要很清楚的知道，自己做的项目弥补了同类产品的哪些不足，或者有哪些新的特性，因为它们是用户选择你的开源项目的主要依据，否则内容都一样，为什么不选一个成熟的呢。  </p>  <p>    如果某个开源项目已经很不错，但你希望基于它进行改造，但不是以 PR    的形式，那你可以在开源协议允许的前提下，fork 后，基于某个 release 独立维护。  </p>  <p>    每个开源项目都有一个核心的功能，或是解决用户的核心痛点，比如 iView    就是解决用户建站的问题，相比同类产品，它的特点就是组件丰富程度最高，功能也是最全面的，生态完善，有技术支持渠道。如果你的开源项目解决的问题是其它任何开源项目没有的，那用户很有可能会使用。但对于相同功能的，用户更倾向于选择还在维护的、star    数多的（star    多，说明这个项目的关注度高，更活跃）。所以，在做开源时，你不仅要知道自己产品的核心技术和特性，还要了解市面同类产品，去其糟粕，取其精华，不断更新和修复    bug，逐渐就会获得第一批用户。  </p>  <h2 data-id="heading-3">做了东西要用</h2>  <p>    虽然我这两年的工作基本全是在维护 iView    开源项目，但偶尔也会穿插做几个项目，因为使用了，才能更好地了解自己的开源项目。  </p>  <p>    你可能会问，我每天都在维护    iView，还有我不了解的吗？还真是，维护和使用完全不一样，在开发组件库时，往往只聚焦在某个组件上，我们定义了    API，然后通过文档告诉使用者怎么用，有些功能是实现了，然而维护者只知道提供了这个功能，却不知在实际项目中好不好用，能用和好用是两个概念。  </p>  <p>    很多 feature，是自己用了才提炼出来的。比如 iView 的    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fwww.iviewui.com%2Fcomponents%2Fcell"      title="https://www.iviewui.com/components/cell"      ref="nofollow noopener noreferrer"      >单元格组件 Cell</a    >    和    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fwww.iviewui.com%2Fcomponents%2Ftime"      title="https://www.iviewui.com/components/time"      ref="nofollow noopener noreferrer"      >相对时间组件 Time</a    >，都是我在做项目时发现并增加的，没有项目的支持，可能觉得这个组件没什么意义，完全应该由使用者在业务里自己写，作为基础组件后，使用体验确实好很多。  </p>  <p>    如果你足够重视你的开源项目，应该亲自使用并且安利别人使用来收集反馈，对于组件库来说，细节是很重要的，而很多细节与我们的用户习惯有关，比如    iView 在 3.0 版本开始，对按钮 Button 组件提供了一个新的 props：    <code>to</code>，用于指定跳转路径，之前版本如果点击按钮跳转，必须监听它的    <code>@click</code> 事件，然后通过 vue-router 的编程式导航（也就是通过    JS）跳转，如果不亲自使用，绝对不知道这种原先的跳转模式写起来有多麻烦。如果你足够注重细节，这个    Button 组件在跳转时，还应该支持键盘的 Command 键（Windows 为    Ctrl，要做兼容）在新窗口打开链接。这些细节都与使用习惯息息相关，所以，一定要多用用自己的开源项目，在一个个小细节都处理好后，你会的开源项目自然会蒸蒸日上。  </p>  <h2 data-id="heading-4">第一批用户</h2>  <p>    开源项目做好后，要获得第一批使用者。现在的环境，大多是公司或团队主导做开源，个人的很少，所以你的公司或团队自然就是第一批用户，做开源的主要目的，也是服务他们。  </p>  <p>    第一批用户也可以算是开源项目的小白鼠，一开始说服全公司使用，还是比较困难的，可以先小范围推广使用。公司都希望自己的产品稳定，而新的开源项目前期必定会有不少    bug，在经历几个小项目试水后，再尝试向更多的团队推广。因为有了成功案例，又是“自家”的开源项目，给自己人推广还是比较容易的。  </p>  <p>    在第一批用户的推广中，你的 leader    可能会起到决定性作用。你的开源项目，八成市场上已经有同类的了，不得不承认，即使让“自己人”做技术选型，也更期望选市面上成熟的，这种情况，就需要你的    leader    出来“拍板”了，否则，你的开源项目也许永远不会有第一批用户来试错。记得当时我在团队推广    Vue.js 时，起初也是很多质疑，有一部分人坚持使用 jQuery + 前端模板，得到    leader 的认可后，试水了几个项目，大家都能感受到 Vue.js 和 webpack    带来的高效开发体验，从此就没人再用 jQuery    了。不过呢，你最好确保你的开源项目质量还不错，否则这锅就得 leader 替你背了。  </p>  <p>    与市面上同类成熟的开源项目相比，你的开源项目最大的优势就是你能为第一批用户提供优质的“售后”服务。如果是同事的问题，你可以很快直接解答；如果是通过    GitHub 提交的    issues（前期不会很多了），尽量在半小时内回复，这样使用者会觉得你确实在用心维护这个开源项目。通过前期的口碑积累，你的第一批用户也成为了最忠实的用户，这时可以组建微信或    QQ 群，更直接地提供“售后”，而这第一批忠实用户，会成为后期推广的重要人脉。  </p>  <h2 data-id="heading-5">生态</h2>  <p>    生态（ecosystem）不是与生俱来的，当你的开源项目有了一定的规模后，可以考虑发展生态体系。比如    iView，起初只是一个组件库，后续逐渐提供了 iview-project 工程、具有 GUI 的    iView CLI（这个概念可比 Vue CLI 3 早了一年）、后台模板 iview-admin、支持 Vue    CLI 3 的 vue-cli-plugin-iview，以及业务组件 iview-area 和 markdown 编辑器    iview-editor，再到后来支持 SSR、TS。  </p>  <p>    完善的生态体系对于新用户来说，可以最快速搭建产品，减少学习和开发成本；对于观望者（正在决定是否使用的人）来说，更愿意选择生态完善的开源项目。所以，你的开源项目生态越完善，使用者也会越多。  </p>  <p>    生态的另一个好处，就是让用户产生依赖。最典型的例子就是 Vue    全家桶，一般刚接触的人，只会用个 Vue.js，再后来 vue-router、vuex    都是必须的了，再后来搭配一个三方的组件库，比如    iView，各种业务都能轻松应对。一旦用户对你的生态足够依赖，就很难更换技术栈了，因为生态的深入，更换成本很大，这也是很多企业的老项目所谓的“历史原因”。  </p>  <p>    生态的建设，不一定都是官方的行为，但是最核心的还是要自己维护，用户既然选择你的开源项目，也就意味着信任你的技术实力，放心用你的生态。项目到了一定规模，自然有不少第三方的开发者一起建设生态，这些    contributors 都是最有价值的开发者，尽量联系他们，一起来贡献更多的代码。  </p>  <p>    对于 Vue.js 组件库来说，生态一般分为脚手架、后台模板和业务组件。最新的 Vue    CLI 3 提供了插件机制，现在的主流做法都是提供一个类似    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fvue-cli-plugin-iview"      title="https://github.com/iview/vue-cli-plugin-iview"      ref="nofollow noopener noreferrer"      >vue-cli-plugin-iview</a    >    的插件，很少有单独提供自己的工程了，在文档里，要推荐使用者用 Vue CLI 3    来管理项目，享受 Vue    的生态。后台模板是开箱即用的，默认配置好了路由、权限管理、多语言、登录等常规的后台系统功能，使用者    down 下来后，稍作修改就能很快开发自己的后台管理系统，主流的 UI    组件库，都会提供自家的后台模板，当然也有第三方专注在做后台模板的。最后一类业务组件，比如城市级联选择器    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview-area"      title="https://github.com/iview/iview-area"      ref="nofollow noopener noreferrer"      >iview-area</a    >，它基于 iView 的基础组件开发，但又不是基础组件，所以不能归到 iView    里，只能作为独立组件单独维护，业务组件理论上使用者可以自己封装，但是重复性的工作，还是交给社区做吧，这就是开源。  </p>  <p>下一篇，将介绍：</p>  <ul>    <li><strong>持续运营</strong></li>    <li><strong>国际化</strong></li>    <li><strong>让更多的人参与</strong></li>    <li><strong>让 Robot 来做“坏人”</strong></li>    <li><strong>赞助与商业化</strong></li>  </ul>  <h2 data-id="heading-6">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://juejin.cn/post/6844903461306236942"        title="https://juejin.cn/post/6844903461306236942"        >2016我的心路历程：从 Vue 到 Webpack 到 iView</a      >    </li>  </ul></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-17】拓展：Vue.js 面试、常见问题答疑</title>
      <link href="/476fc7dffb90.html"/>
      <url>/476fc7dffb90.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    在过去的很多面试中，我会经常问候选人一些关于 Vue.js    的问题。这些问题从题面来看很简单，但仔细想又不是那么简单，不同的人，会答出不同的层次，从而更好地了解一个人对    Vue.js 的理解程度。  </p>  <h2 data-id="heading-1">题目</h2>  <h3 data-id="heading-2">v-show 与 v-if 区别</h3>  <p>    第一题应该是最简单的，提这个问题，也是想让候选人不那么紧张，因为但凡用过    Vue.js，多少知道    <code>v-show</code> 和    <code>v-if</code>    的区别，否则就没得聊了。不过这最简单的一道题，有三个层次，我会逐一追问。首先，基本所有人都会说到：  </p>  <p>    <code>v-show</code> 只是 CSS 级别的 <code>display: none;</code> 和    <code>display: block;</code> 之间的切换，而    <code>v-if</code> 决定是否会选择代码块的内容（或组件）。  </p>  <p>    回答这些，已经可以得到 50 分了，紧接着我会追问，什么时候用    v-show，什么时候用 v-if    ？到这里一部分人会比较吞吐，可能是知道，但表达不出来。我比较倾向的回答是：  </p>  <p>    频繁操作时，使用 <code>v-show</code>，一次性渲染完的，使用    <code>v-if</code>，只要意思对就好。  </p>  <p>    第二问可以得到 80 分了，最后一问很少有人能答上：**那使用    <code>v-if</code> 在性能优化上有什么经验？**这是一个加分项，要对 Vue.js    的组件编译有一定的理解。说一下期望的答案：  </p>  <p>    因为当    <code>v-if="false"</code>    时，内部组件是不会渲染的，所以在特定条件才渲染部分组件（或内容）时，可以先将条件设置为    <code>false</code>，需要时（或异步，比如 $nextTick）再设置为    <code>true</code    >，这样可以优先渲染重要的其它内容，合理利用，可以进行性能优化。  </p>  <h3 data-id="heading-3">绑定 class 的数组用法</h3>  <p>    动态绑定 class    应该不陌生吧，这也是最基本的，但是这个问题却有点绕，什么叫**绑定 class    的数组用法？**我们看一下，最常用的绑定 class 怎么写：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span> <span>:class</span>=<span>"&#123;show: isShow&#125;"</span>&gt;</span>内容<span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    data () &#123;      <span>return</span> &#123;        <span>isShow</span>: <span>true</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    绑定 class    的对象用法能满足大部分业务需求，不过，在复杂的场景下，会用到<strong>数组</strong>，来看示例：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span> <span>:class</span>=<span>"classes"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>computed</span>: &#123;      classes () &#123;        <span>return</span> [          <span>`<span>$&#123;prefixCls&#125;</span>`</span>,          <span>`<span>$&#123;prefixCls&#125;</span>-<span>$&#123;<span>this</span>.type&#125;</span>`</span>,          &#123;            [<span>`<span>$&#123;prefixCls&#125;</span>-long`</span>]: <span>this</span>.long,            [<span>`<span>$&#123;prefixCls&#125;</span>-<span>$&#123;<span>this</span>.shape&#125;</span>`</span>]: !!<span>this</span>.shape,            [<span>`<span>$&#123;prefixCls&#125;</span>-<span>$&#123;<span>this</span>.size&#125;</span>`</span>]: <span>this</span>.size !== <span>'default'</span>,            [<span>`<span>$&#123;prefixCls&#125;</span>-loading`</span>]: <span>this</span>.loading != <span>null</span> &amp;&amp; <span>this</span>.loading,            [<span>`<span>$&#123;prefixCls&#125;</span>-icon-only`</span>]: !<span>this</span>.showSlot &amp;&amp; (!!<span>this</span>.icon || !!<span>this</span>.customIcon || <span>this</span>.loading),            [<span>`<span>$&#123;prefixCls&#125;</span>-ghost`</span>]: <span>this</span>.ghost          &#125;        ];      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    示例来自 iView 的 Button    组件，可以看到，数组里，可以是固定的值，还有动态值（对象）的混合。  </p>  <h3 data-id="heading-4">计算属性和 watch 的区别</h3>  <p>    回答该题前，一般都会思考一下。很多人会偏题，直接去答计算属性和 watch    怎么用，这是不得分的，因为题目是问<strong>区别</strong>，并不是用法。  </p>  <p>    计算属性是自动监听依赖值的变化，从而动态返回内容，监听是一个过程，在监听的值变化时，可以触发一个回调，并做一些事情。  </p>  <p>    所以区别来源于用法，只是需要动态值，那就用计算属性；需要知道值的改变后执行业务逻辑，才用    watch，用反或混用虽然可行，但都是不正确的用法。  </p>  <p>这个问题会延伸出几个问题：</p>  <ol>    <li>      <p>computed 是一个对象时，它有哪些选项？</p>    </li>    <li>      <p>computed 和 methods 有什么区别？</p>    </li>    <li>      <p>computed 是否能依赖其它组件的数据？</p>    </li>    <li>      <p>watch 是一个对象时，它有哪些选项？</p>    </li>  </ol>  <p>问题 1，已经在 16 小节介绍过，有 get 和 set 两个选项。</p>  <p>    问题 2，methods 是一个方法，它可以接受参数，而 computed 不能；computed    是可以缓存的，methods 不会；一般在    <code>v-for</code> 里，需要根据当前项动态绑定值时，只能用 methods 而不能用    computed，因为 computed 不能传参。  </p>  <p>问题 3，computed 可以依赖其它 computed，甚至是其它组件的 data。</p>  <p>问题 4，第 16 小节也有提到，有以下常用的配置：</p>  <ul>    <li>handler 执行的函数</li>    <li>deep 是否深度</li>    <li>immediate 是否立即执行</li>  </ul>  <h3 data-id="heading-5">事件修饰符</h3>  <p>这个问题我会先写一段代码：</p>  <pre><code lang="html" class=""><span>&lt;<span>custom-component</span>&gt;</span>内容<span>&lt;/<span>custom-component</span>&gt;</span></code></pre>  <p>    然后问：<strong      >怎样给这个自定义组件 custom-component 绑定一个<code>原生</code>的 click      事件？</strong    >  </p>  <p>    我一开始并不会问什么是事件修饰符，但是如果候选人说    <code>&lt;custom-component @click="xxx"&gt;</code    >，就已经错了，说明它对这个没有概念。这里的 <code>@click</code> 是自定义事件    click，并不是原生事件 click。绑定原生的 click 是这样的：  </p>  <pre><code lang="html" class=""><span>&lt;<span>custom-component</span> @<span>click.native</span>=<span>"xxx"</span>&gt;</span>内容<span>&lt;/<span>custom-component</span>&gt;</span></code></pre>  <p>    该问题会引申很多，比如常见的事件修饰符有哪些？如果你能说上    <code>.exact</code>，说明你是个很爱探索的人，会大大加分哦。  </p>  <blockquote>    <p>      .exact 是 Vue.js 2.5.0      新加的，它允许你控制由精确的系统修饰符组合触发的事件，比如：    </p>    <pre><code lang="html" class=""><span>&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><span>&lt;<span>button</span> @<span>click.ctrl</span>=<span>"onClick"</span>&gt;</span>A<span>&lt;/<span>button</span>&gt;</span><span>&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><span>&lt;<span>button</span> @<span>click.ctrl.exact</span>=<span>"onCtrlClick"</span>&gt;</span>A<span>&lt;/<span>button</span>&gt;</span><span>&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><span>&lt;<span>button</span> @<span>click.exact</span>=<span>"onClick"</span>&gt;</span>A<span>&lt;/<span>button</span>&gt;</span></code></pre>  </blockquote>  <p>你可能还需要了解常用的几个事件修饰符：</p>  <ul>    <li><code>.stop</code></li>    <li><code>.prevent</code></li>    <li><code>.capture</code></li>    <li><code>.self</code></li>  </ul>  <p>而且，事件修饰符在连用时，是有先后顺序的。</p>  <h3 data-id="heading-6">组件中 data 为什么是函数</h3>  <p>    为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue    实例里，data 可以直接是一个对象？  </p>  <p>    因为组件是用来复用的，JS 里对象是引用关系，这样作用域没有隔离，而 new Vue    的实例，是不会被复用的，因此不存在引用对象的问题。  </p>  <h3 data-id="heading-7">keep-alive 的理解</h3>  <p>    这是个概念题，主要考察候选人是否知道这个用法。简单说，就是把一个组件的编译缓存起来。在第    14 节有过详细介绍，也可以看看    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fcomponents-dynamic-async.html%23%25E5%259C%25A8%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%25E4%25B8%258A%25E4%25BD%25BF%25E7%2594%25A8-keep-alive"      title="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%9C%A8%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-keep-alive"      ref="nofollow noopener noreferrer"      >Vue.js 的文档</a    >。  </p>  <h3 data-id="heading-8">递归组件的要求</h3>  <p>    回答这道题，首先你得知道什么是<strong>递归组件</strong>。而不到 10%    的人知道递归组件。其实在实际业务中用的确实不多，在独立组件中会经常使用，第    14 节和 15    节专门讲过递归组件。那回到问题，递归组件的要求是什么？主要有两个：  </p>  <ul>    <li>要给组件设置 <strong>name</strong>；</li>    <li>要有一个明确的结束条件。</li>  </ul>  <h3 data-id="heading-9">自定义组件的语法糖 v-model 是怎样实现的</h3>  <p>    在第 16 节已经详细介绍过，这里的 v-model，并不是给普通输入框    <code>&lt;input /&gt;</code> 用的那种    v-model，而是在自定义组件上使用。既然是语法糖，就能够还原，我们先还原一下：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    &#123;&#123; currentValue &#125;&#125;    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleClick"</span>&gt;</span>Click<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>props</span>: &#123;      <span>value</span>: &#123;        <span>type</span>: <span>Number</span>,        <span>default</span>: <span>0</span>      &#125;    &#125;,    data () &#123;      <span>return</span> &#123;        <span>currentValue</span>: <span>this</span>.value      &#125;    &#125;,    <span>methods</span>: &#123;      handleClick () &#123;        <span>this</span>.currentValue += <span>1</span>;        <span>this</span>.$emit(<span>'input'</span>, <span>this</span>.currentValue);      &#125;    &#125;,    <span>watch</span>: &#123;      value (val) &#123;        <span>this</span>.currentValue = val;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    这个组件中，只有一个 props，但是名字叫 <code>value</code>，内部还有一个    <code>currentValue</code>，当改变 currentValue 时，会触发一个自定义事件    <code>@input</code>，并把 currentValue 的值返回。这就是一个    <code>v-model</code> 的语法糖，它要求 props 有一个叫    <code>value</code> 的项，同时触发的自定义事件必须叫    <code>input</code>。这样就可以在自定义组件上用 <code>v-model</code> 了：  </p>  <pre><code lang="html" class=""><span>&lt;<span>custom-component</span> <span>v-model</span>=<span>"value"</span>&gt;</span><span>&lt;/<span>custom-component</span>&gt;</span></code></pre>  <p>如果你能说到 <code>model</code> 选项，绝对是加分的。</p>  <h3 data-id="heading-10">Vuex 中 mutations 和 actions 的区别</h3>  <p>    主要的区别是，actions 可以执行异步。actions 是调用 mutations，而 mutations    来修改 store。  </p>  <h3 data-id="heading-11">Render 函数</h3>  <p>    这是比较难的一题了，因为很少有人会去了解 Vue.js 的 Render    函数，因为基本用不到。Render    函数的内容本小册已经很深入的讲解过了，遇到这个问题，一般可以从这几个方面来回答：  </p>  <ul>    <li>什么是 Render 函数，它的使用场景是什么。</li>    <li>createElement 是什么？</li>    <li>Render 函数有哪些常用的参数？</li>  </ul>  <p>    说到 Render 函数，就要说到虚拟 DOM（Virtual DOM）,Virtual DOM    并不是真正意义上的 DOM，而是一个轻量级的 JavaScript    对象，在状态发生变化时，Virtual DOM 会进行 Diff 运算，来更新只需要被替换的    DOM，而不是全部重绘。  </p>  <p>    它的使用场景，就是完全发挥 JavaScript 的编程能力，有时需要结合 JSX 来使用。  </p>  <p>    createElement 是 Render 函数的核心，它构成了 Vue Virtual DOM 的模板，它有 3    个参数：  </p>  <pre><code lang="js" class="">createElement () &#123;  <span>// &#123;String | Object | Function&#125;</span>  <span>// 一个 HTML 标签，组件选项，或一个函数</span>  <span>// 必须 return 上述其中一个</span>  <span>'div'</span>,    <span>// &#123;Object&#125;</span>    <span>// 一个对应属性的数据对象，可选</span>    <span>// 您可以在 template 中使用</span>    &#123;    <span>// 详细的属性</span>  &#125;,    <span>// &#123;String | Array&#125;</span>    <span>// 子节点（VNodes），可选</span>    [    createElement(<span>'h1'</span>, <span>'hello world'</span>),    createElement(MyComponent, &#123;      <span>props</span>: &#123;        <span>someProps</span>: <span>'foo'</span>      &#125;    &#125;),    <span>'bar'</span>  ]&#125;</code></pre>  <p>    常用的参数，主要是指上面第二个参数里的值了，这个比较多，得去看 Vue.js    的文档。  </p>  <h3 data-id="heading-12">怎样理解单向数据流</h3>  <p>    这个概念出现在组件通信。父组件是通过 prop 把数据传递到子组件的，但是这个    prop 只能由父组件修改，子组件不能修改，否则会报错。子组件想修改时，只能通过    <code>$emit</code> 派发一个自定义事件，父组件接收到后，由父组件修改。  </p>  <p>一般来说，对于子组件想要更改父组件状态的场景，可以有两种方案：</p>  <ol>    <li>      <p>在子组件的 data 中拷贝一份 prop，data 是可以修改的，但 prop 不能：</p>      <pre><code lang="js" class=""><span>export</span> <span>default</span> &#123;  <span>props</span>: &#123;    <span>value</span>: <span>String</span>  &#125;,  data () &#123;    <span>return</span> &#123;      <span>currentValue</span>: <span>this</span>.value    &#125;  &#125;&#125;</code></pre>    </li>    <li>      <p>如果是对 prop 值的转换，可以使用计算属性：</p>      <pre><code lang="js" class=""><span>export</span> <span>default</span> &#123;  <span>props</span>: [<span>'size'</span>],  <span>computed</span>: &#123;    <span>normalizedSize</span>: <span><span>function</span> (<span></span>) </span>&#123;      <span>return</span> <span>this</span>.size.trim().toLowerCase();    &#125;  &#125;&#125;</code></pre>    </li>  </ol>  <p>    如果你能提到 v-model 实现数据的双向绑定、.sync 用法，会大大加分的，这些在第    16 节已经详细介绍过。  </p>  <h3 data-id="heading-13">生命周期</h3>  <p>    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23%25E9%2580%2589%25E9%25A1%25B9-%25E7%2594%259F%25E5%2591%25BD%25E5%2591%25A8%25E6%259C%259F%25E9%2592%25A9%25E5%25AD%2590"      title="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90"      ref="nofollow noopener noreferrer"      >Vue.js 生命周期</a    >    主要有 8 个阶段：  </p>  <ul>    <li>      <p>        创建前 / 后（beforeCreate / created）：在 beforeCreate 阶段，Vue        实例的挂载元素 el 和数据对象 data 都为 undefined，还未初始化。在 created        阶段，Vue 实例的数据对象 data 有了，el 还没有。      </p>    </li>    <li>      <p>        载入前 / 后（beforeMount / mounted）：在 beforeMount 阶段，Vue 实例的        $el 和 data 都初始化了，但还是挂载之前为虚拟的 DOM 节点，data        尚未替换。在 mounted 阶段，Vue 实例挂载完成，data 成功渲染。      </p>    </li>    <li>      <p>        更新前 / 后（beforeUpdate / updated）：当 data 变化时，会触发        beforeUpdate 和 updated 方法。这两个不常用，且不推荐使用。      </p>    </li>    <li>      <p>        销毁前 / 后（beforeDestroy / destroyed）：beforeDestroy 是在 Vue        实例销毁前触发，一般在这里要通过 removeEventListener        解除手动绑定的事件。实例销毁后，触发 destroyed。      </p>    </li>  </ul>  <h3 data-id="heading-14">组件间通信</h3>  <p>    本小册一半的篇幅都在讲组件的通信，如果能把这些都吃透，基本上 Vue.js    的面试就稳了。  </p>  <p>这个问题看似简单，却比较大，回答时，可以拆分为几种场景：</p>  <ol>    <li>      <p>父子通信：</p>      <p>        父向子传递数据是通过 props，子向父是通过 events（$emit）；通过父链 /        子链也可以通信（$parent / $children）；<code>ref</code>        也可以访问组件实例；provide / inject API。      </p>    </li>    <li>      <p>兄弟通信：</p>      <p>Bus；Vuex；</p>    </li>    <li>      <p>跨级通信：</p>      <p>Bus；Vuex；provide / inject API。</p>    </li>  </ol>  <p>    除了常规的通信方法，本册介绍的 dispatch / broadcast 和 findComponents    系列方法也可以说的，如果能说到这些，说明你对 Vue.js 组件已经有较深入的研究。  </p>  <h3 data-id="heading-15">路由的跳转方式</h3>  <p>一般有两种：</p>  <ol>    <li>      通过 <code>&lt;router-link to="home"&gt;</code>，router-link 标签会渲染为      <code>&lt;a&gt;</code> 标签，在 template 中的跳转都是用这种；    </li>    <li>      另一种是编程式导航，也就是通过 JS 跳转，比如      <code>router.push('/home')</code>。    </li>  </ol>  <h3 data-id="heading-16">Vue.js 2.x 双向绑定原理</h3>  <p>    这个问题几乎是面试必问的，回答也是有深有浅。基本上要知道核心的 API 是通过    <code>Object.defineProperty()</code> 来劫持各个属性的 setter /    getter，在数据变动时发布消息给订阅者，触发相应的监听回调，这也是为什么    Vue.js 2.x 不支持 IE8 的原因（IE 8 不支持此 API，且无法通过 polyfill    实现）。  </p>  <p>    Vue.js 文档已经对    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Freactivity.html"      title="https://cn.vuejs.org/v2/guide/reactivity.html"      ref="nofollow noopener noreferrer"      >深入响应式原理</a    >    解释的很透彻了。  </p>  <h3 data-id="heading-17">什么是 MVVM，与 MVC 有什么区别</h3>  <p>    MVVM 模式是由经典的软件架构 MVC 衍生来的。当    View（视图层）变化时，会自动更新到 ViewModel（视图模型），反之亦然。View 和    ViewModel 之间通过双向绑定（data-binding）建立联系。与 MVC 不同的是，它没有    Controller 层，而是演变为 ViewModel。  </p>  <p>    ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model    之间的同步工作是由 Vue.js 完成的，我们不需要手动操作    DOM，只需要维护好数据状态。  </p>  <h2 data-id="heading-18">结语</h2>  <p>    一个人的简历，是由简单到复杂再到简单，技术是无止尽的，接触的越多，越能感到自己的渺小。  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-16】拓展：Vue.js 容易忽略的 API 详解</title>
      <link href="/dbc7419c2356.html"/>
      <url>/dbc7419c2356.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    前面的 15 小节已经覆盖了 Vue.js 组件的绝大部分内容，但还是有一些 API    容易忽略。本节则对 Vue.js 的一些重要且易忽略的 API 进行详细介绍。  </p>  <h2 data-id="heading-1">nextTick</h2>  <p>    nextTick 是 Vue.js 提供的一个函数，并非浏览器内置。nextTick    函数接收一个回调函数    <code>cb</code>，在下一个 DOM 更新循环之后执行。比如下面的示例：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>p</span> <span>v-if</span>=<span>"show"</span> <span>ref</span>=<span>"node"</span>&gt;</span>内容<span>&lt;/<span>p</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleShow"</span>&gt;</span>显示<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    data () &#123;      <span>return</span> &#123;        <span>show</span>: <span>false</span>      &#125;    &#125;,    <span>methods</span>: &#123;      handleShow () &#123;        <span>this</span>.show = <span>true</span>;        <span>console</span>.log(<span>this</span>.$refs.node);  <span>// undefined</span>        <span>this</span>.$nextTick(<span><span>()</span> =&gt;</span> &#123;          <span>console</span>.log(<span>this</span>.$refs.node);  <span>// &lt;p&gt;内容&lt;/p&gt;</span>        &#125;);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    当 <code>show</code> 被置为 true 时，这时 p 节点还未被渲染，因此打印出的是    undefined，而在 nextTick 的回调里，p 已经渲染好了，这时能正确打印出节点。  </p>  <p>    nextTick 的源码在    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fblob%2Fdev%2Fsrc%2Fcore%2Futil%2Fnext-tick.js"      title="https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js"      ref="nofollow noopener noreferrer"      >github.com/vuejs/vue/b…</a    >，可以看到，Vue.js 使用了 <code>Promise</code>、<code>setTimeout</code> 和    <code>setImmediate</code> 三种方法来实现    nextTick，在不同环境会使用不同的方法。  </p>  <h2 data-id="heading-2">v-model 语法糖</h2>  <p>    <code>v-model</code> 常用于表单元素上进行数据的双向绑定，比如    <code>&lt;input&gt;</code>。除了原生的元素，它还能在自定义组件中使用。  </p>  <p>    v-model 是一个语法糖，可以拆解为 props: value 和 events:    input。就是说组件必须提供一个名为 value 的 prop，以及名为 input    的自定义事件，满足这两个条件，使用者就能在自定义组件上使用    <code>v-model</code>。比如下面的示例，实现了一个数字选择器：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"increase(-1)"</span>&gt;</span>减 1<span>&lt;/<span>button</span>&gt;</span>    <span>&lt;<span>span</span> <span>style</span>=<span>"color: red;padding: 6px"</span>&gt;</span>&#123;&#123; currentValue &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"increase(1)"</span>&gt;</span>加 1<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'InputNumber'</span>,    <span>props</span>: &#123;      <span>value</span>: &#123;        <span>type</span>: <span>Number</span>      &#125;    &#125;,    data () &#123;      <span>return</span> &#123;        <span>currentValue</span>: <span>this</span>.value      &#125;    &#125;,    <span>watch</span>: &#123;      value (val) &#123;        <span>this</span>.currentValue = val;      &#125;    &#125;,    <span>methods</span>: &#123;      increase (val) &#123;        <span>this</span>.currentValue += val;        <span>this</span>.$emit(<span>'input'</span>, <span>this</span>.currentValue);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    props 一般不能在组件内修改，它是通过父级修改的，因此实现 v-model    一般都会有一个    <code>currentValue</code> 的内部 data，初始时从 value 获取一次值，当 value    修改时，也通过 watch 监听到及时更新；组件不会修改 value 的值，而是修改    currentValue，同时将修改的值通过自定义事件    <code>input</code> 派发给父组件，父组件接收到后，由父组件修改    value。所以，上面的数字选择器组件可以有下面两种使用方式：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>InputNumber</span> <span>v-model</span>=<span>"value"</span> /&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> InputNumber <span>from</span> <span>'../components/input-number/input-number.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; InputNumber &#125;,    data () &#123;      <span>return</span> &#123;        <span>value</span>: <span>1</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>或：</p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>InputNumber</span> <span>:value</span>=<span>"value"</span> @<span>input</span>=<span>"handleChange"</span> /&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> InputNumber <span>from</span> <span>'../components/input-number/input-number.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; InputNumber &#125;,    data () &#123;      <span>return</span> &#123;        <span>value</span>: <span>1</span>      &#125;    &#125;,    <span>methods</span>: &#123;      handleChange (val) &#123;        <span>this</span>.value = val;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    如果你不想用 <code>value</code> 和 <code>input</code> 这两个名字，从 Vue.js    2.2.0 版本开始，提供了一个    <code>model</code>    的选项，可以指定它们的名字，所以数字选择器组件也可以这样写：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"increase(-1)"</span>&gt;</span>减 1<span>&lt;/<span>button</span>&gt;</span>    <span>&lt;<span>span</span> <span>style</span>=<span>"color: red;padding: 6px"</span>&gt;</span>&#123;&#123; currentValue &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"increase(1)"</span>&gt;</span>加 1<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'InputNumber'</span>,    <span>props</span>: &#123;      <span>number</span>: &#123;        <span>type</span>: <span>Number</span>      &#125;    &#125;,    <span>model</span>: &#123;      <span>prop</span>: <span>'number'</span>,      <span>event</span>: <span>'change'</span>    &#125;,    data () &#123;      <span>return</span> &#123;        <span>currentValue</span>: <span>this</span>.number      &#125;    &#125;,    <span>watch</span>: &#123;      value (val) &#123;        <span>this</span>.currentValue = val;      &#125;    &#125;,    <span>methods</span>: &#123;      increase (val) &#123;        <span>this</span>.currentValue += val;        <span>this</span>.$emit(<span>'number'</span>, <span>this</span>.currentValue);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    在 model 选项里，就可以指定 prop 和 event 的名字了，而不一定非要用 value 和    input，因为这两个名字在一些原生表单元素里，有其它用处。  </p>  <h2 data-id="heading-3">.sync 修饰符</h2>  <p>    如果你使用过 Vue.js 1.x，一定对 <code>.sync</code> 不陌生。在 1.x    里，可以使用 .sync    双向绑定数据，也就是父组件或子组件都能修改这个数据，是双向响应的。在 Vue.js    2.x    里废弃了这种用法，目的是尽可能将父子组件解耦，避免子组件无意中修改了父组件的状态。  </p>  <p>    不过在 Vue.js 2.3.0 版本，又增加了 <code>.sync</code> 修饰符，但它的用法与    1.x 的不完全相同。2.x 的 .sync    不是真正的双向绑定，而是一个语法糖，修改数据还是在父组件完成的，并非在子组件。  </p>  <p>仍然是数字选择器的示例，这次不用 v-model，而是用 .sync，可以这样改写：</p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"increase(-1)"</span>&gt;</span>减 1<span>&lt;/<span>button</span>&gt;</span>    <span>&lt;<span>span</span> <span>style</span>=<span>"color: red;padding: 6px"</span>&gt;</span>&#123;&#123; value &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"increase(1)"</span>&gt;</span>加 1<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'InputNumber'</span>,    <span>props</span>: &#123;      <span>value</span>: &#123;        <span>type</span>: <span>Number</span>      &#125;    &#125;,    <span>methods</span>: &#123;      increase (val) &#123;        <span>this</span>.$emit(<span>'update:value'</span>, <span>this</span>.value + val);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>用例：</p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>InputNumber</span> <span>:value.sync</span>=<span>"value"</span> /&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> InputNumber <span>from</span> <span>'../components/input-number/input-number.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; InputNumber &#125;,    data () &#123;      <span>return</span> &#123;        <span>value</span>: <span>1</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    看起来要比 v-model 的实现简单多，实现的效果是一样的。v-model    在一个组件中只能有一个，但 .sync 可以设置很多个。.sync    虽好，但也有限制，比如：  </p>  <ul>    <li>      <strong>不能</strong>和表达式一起使用（如      <code>v-bind:title.sync="doc.title + '!'"</code> 是无效的）；    </li>    <li>      <strong>不能</strong>用在字面量对象上（如      <code>v-bind.sync="&#123; title: doc.title &#125;"</code> 是无法正常工作的）。    </li>  </ul>  <h2 data-id="heading-4">$set</h2>  <p>在上一节已经介绍过 <code>$set</code>，有两种情况会用到它：</p>  <ol>    <li>      <p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p>      <ol>        <li>          当利用索引直接设置一个项时，例如：<code            >this.items[index] = value</code          >;        </li>        <li>          当修改数组的长度时，例如：<code>vm.items.length = newLength</code>。        </li>      </ol>    </li>    <li>      <p>        由于 JavaScript 的限制，<strong>Vue 不能检测对象属性的添加或删除</strong        >。      </p>    </li>  </ol>  <p>举例来看，就是：</p>  <pre><code lang="js" class=""><span>// 数组</span><span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>items</span>: [<span>'a'</span>, <span>'b'</span>, <span>'c'</span>]    &#125;  &#125;,  <span>methods</span>: &#123;    handler () &#123;      <span>this</span>.items[<span>1</span>] = <span>'x'</span>;  <span>// 不是响应性的</span>    &#125;  &#125;&#125;</code></pre>  <p>使用 <code>$set</code>：</p>  <pre><code lang="js" class=""><span>// 数组</span><span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>items</span>: [<span>'a'</span>, <span>'b'</span>, <span>'c'</span>]    &#125;  &#125;,  <span>methods</span>: &#123;    handler () &#123;      <span>this</span>.$set(<span>this</span>.items, <span>1</span>, <span>'x'</span>);  <span>// 是响应性的</span>    &#125;  &#125;&#125;</code></pre>  <p>以对象为例：</p>  <pre><code lang="js" class=""><span>// 对象</span><span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>item</span>: &#123;        <span>a</span>: <span>1</span>      &#125;    &#125;  &#125;,  <span>methods</span>: &#123;    handler () &#123;      <span>this</span>.item.b = <span>2</span>;  <span>// 不是响应性的</span>    &#125;  &#125;&#125;</code></pre>  <p>使用 <code>$set</code>：</p>  <pre><code lang="js" class=""><span>// 对象</span><span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>item</span>: &#123;        <span>a</span>: <span>1</span>      &#125;    &#125;  &#125;,  <span>methods</span>: &#123;    handler () &#123;      <span>this</span>.$set(<span>this</span>.item, <span>'b'</span>, <span>2</span>);  <span>// 是响应性的</span>    &#125;  &#125;&#125;</code></pre>  <p>    另外，数组的以下方法，都是<strong>可以</strong>触发视图更新的，也就是响应性的：  </p>  <p>    <code>push()</code    >、<code>pop()</code>、<code>shift()</code>、<code>unshift()</code>、<code>splice()</code>、<code>sort()</code>、<code>reverse()</code>。  </p>  <p>    还有一种小技巧，就是先 copy 一个数组，然后通过 index    修改后，再把原数组整个替换，比如：  </p>  <pre><code lang="js" class="">handler () &#123;  <span>const</span> data = [...this.items];  data[<span>1</span>] = <span>'x'</span>;  <span>this</span>.items = data;&#125;</code></pre>  <h2 data-id="heading-5">计算属性的 set</h2>  <p>    计算属性（computed）很简单，而且也会大量使用，但大多数时候，我们只是用它默认的    get 方法，也就是平时的常规写法，通过 computed    获取一个依赖其它状态的数据。比如：  </p>  <pre><code lang="js" class="">computed: &#123;  fullName () &#123;    <span>return</span> <span>`<span>$&#123;<span>this</span>.firstName&#125;</span> <span>$&#123;<span>this</span>.lastName&#125;</span>`</span>;  &#125;&#125;</code></pre>  <p>    这里的 fullName 事实上可以写为一个 Object，而非 Function，只是 Function    形式是我们默认使用它的 get 方法，当写为 Object 时，还能使用它的 set 方法：  </p>  <pre><code lang="js" class="">computed: &#123;  <span>fullName</span>: &#123;    get () &#123;      <span>return</span> <span>`<span>$&#123;<span>this</span>.firstName&#125;</span> <span>$&#123;<span>this</span>.lastName&#125;</span>`</span>;    &#125;,    set (val) &#123;      <span>const</span> names = val.split(<span>' '</span>);      <span>this</span>.firstName = names[<span>0</span>];      <span>this</span>.lastName = names[names.length - <span>1</span>];    &#125;  &#125;&#125;</code></pre>  <p>    计算属性大多时候只是读取用，使用了 set    后，就可以写入了，比如上面的示例，如果执行    <code>this.fullName = 'Aresn Liang'</code>，computed 的 set    就会调用，firstName 和 lastName 会被赋值为 Aresn 和 Liang。  </p>  <h2 data-id="heading-6">剩余值得注意的 API</h2>  <p>    还有一些    API，可能不常用，也比较简单，只需知道就好，本册不详细展开介绍，可以通过指引到    Vue.js 文档查看。  </p>  <h3 data-id="heading-7">    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23delimiters"      title="https://cn.vuejs.org/v2/api/#delimiters"      ref="nofollow noopener noreferrer"      >delimiters</a    >  </h3>  <p>    改变纯文本插入分隔符，Vue.js 默认的是    <code>&#123;&#123; &#125;&#125;</code>，如果你使用其它一些后端模板，比如 Python 的 Tornado    框架，那 Vue.js 和 Tornado 的    <code>&#123;&#123; &#125;&#125;</code> 就冲突了，这时用它可以修改为指定的分隔符。  </p>  <h3 data-id="heading-8">    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23v-once"      title="https://cn.vuejs.org/v2/api/#v-once"      ref="nofollow noopener noreferrer"      >v-once</a    >  </h3>  <p>    只渲染元素和组件<strong>一次</strong>。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。  </p>  <h3 data-id="heading-9">    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23vm-isServer"      title="https://cn.vuejs.org/v2/api/#vm-isServer"      ref="nofollow noopener noreferrer"      >vm.$isServer</a    >  </h3>  <p>当前 Vue 实例是否运行于服务器，如果你的组件要兼容 SSR，它会很有用。</p>  <h3 data-id="heading-10">    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23inheritAttrs"      title="https://cn.vuejs.org/v2/api/#inheritAttrs"      ref="nofollow noopener noreferrer"      >inheritAttrs</a    >  </h3>  <p>    一些原生的 html 特性，比如 <code>id</code>，即使没有定义    props，也会被集成到组件根节点上，设置 inheritAttrs 为 false 可以关闭此特性。  </p>  <h3 data-id="heading-11">    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23errorHandler"      title="https://cn.vuejs.org/v2/api/#errorHandler"      ref="nofollow noopener noreferrer"      >errorHandler</a    >  </h3>  <p>使用 <code>errorHandler</code> 可以进行异常信息的获取。</p>  <h3 data-id="heading-12">    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23watch"      title="https://cn.vuejs.org/v2/api/#watch"      ref="nofollow noopener noreferrer"      >watch</a    >  </h3>  <p>    监听状态的变化，用的也很多了，但它和 computed 一样，也有 Object    的写法，这样能配置更多的选项，比如：  </p>  <ul>    <li>handler 执行的函数</li>    <li>deep 是否深度</li>    <li>immediate 是否立即执行</li>  </ul>  <p>完整的配置可以阅读文档。</p>  <h3 data-id="heading-13">    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23comments"      title="https://cn.vuejs.org/v2/api/#comments"      ref="nofollow noopener noreferrer"      >comments</a    >  </h3>  <p>开启会保留 html 注释。</p>  <h3 data-id="heading-14">    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23transition"      title="https://cn.vuejs.org/v2/api/#transition"      ref="nofollow noopener noreferrer"      >transition</a    >  </h3>  <p>    内置的组件，可做过渡效果，比如 CSS 的高度从 0 到 auto（使用纯 CSS    是无法实现动画的）。  </p>  <h2 data-id="heading-15">结语</h2>  <p>    彻底掌握一门语言（框架），不需要阅读它所有的源码，但至少要阅读它所有的    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F"      title="https://cn.vuejs.org/v2/api/"      ref="nofollow noopener noreferrer"      >API</a    >。  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-15】实战 7：树形控件——Tree</title>
      <link href="/b2a95911020e.html"/>
      <url>/b2a95911020e.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>本小节基于 Vue.js 的递归组件知识，来开发一个常见的树形控件—Tree。</p>  <p>    Tree    组件是递归类组件的典型代表，它常用于文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用树控件可以完整展现其中的层级关系，并具有展开收起选择等交互功能。  </p>  <p>本节要实现的 Tree 组件具有以下功能：</p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/27/16753fd7a86231b6~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <ul>    <li>节点可以无限延伸（递归）；</li>    <li>可以展开 / 收起子节点；</li>    <li>      节点可以选中，选中父节点，它的所有子节点也全部被选中，同样，反选父节点，其所有子节点也取消选择；    </li>    <li>同一级所有子节点选中时，它的父级也自动选中，一直递归判断到根节点。</li>  </ul>  <h2 data-id="heading-1">API</h2>  <p>    Tree 是典型的数据驱动型组件，所以节点的配置就是一个    data，里面描述了所有节点的信息，比如图片中的示例数据为：  </p>  <pre><code lang="js" class="">data: [  &#123;    <span>title</span>: <span>'parent 1'</span>,    <span>expand</span>: <span>true</span>,    <span>children</span>: [      &#123;        <span>title</span>: <span>'parent 1-1'</span>,        <span>expand</span>: <span>true</span>,        <span>children</span>: [          &#123;            <span>title</span>: <span>'leaf 1-1-1'</span>          &#125;,          &#123;            <span>title</span>: <span>'leaf 1-1-2'</span>          &#125;        ]      &#125;,      &#123;        <span>title</span>: <span>'parent 1-2'</span>,        <span>children</span>: [          &#123;            <span>title</span>: <span>'leaf 1-2-1'</span>          &#125;,          &#123;            <span>title</span>: <span>'leaf 1-2-1'</span>          &#125;        ]      &#125;    ]  &#125;]</code></pre>  <p>每个节点的配置（props：data）描述如下：</p>  <ul>    <li>      <strong>title</strong>：节点标题（本例为纯文本输出，可参考 Table 的 Render      或 slot-scope 将其扩展）；    </li>    <li>      <strong>expand</strong>：是否展开直子节点。开启后，其直属子节点将展开；    </li>    <li>      <strong>checked</strong>：是否选中该节点。开启后，该节点的 Checkbox      将选中；    </li>    <li><strong>children</strong>：子节点属性数组。</li>  </ul>  <p>    如果一个节点没有 children    字段，那它就是最后一个节点，这也是递归组件终结的判断依据。  </p>  <p>同时再提供一个是否显示多选框的 props：showCheckbox，以及两个 events：</p>  <ul>    <li><strong>on-toggle-expand</strong>：展开和收起子列表时触发；</li>    <li><strong>on-check-change</strong>：点击复选框时触发。</li>  </ul>  <p>    因为是数据驱动，组件的 API 都比较简单，这一点跟 Table    组件是一样的，它们复杂的逻辑都在组件本身。  </p>  <h2 data-id="heading-2">入口 tree.vue</h2>  <p>    在 <code>src/components</code> 中新建目录 <code>tree</code>，并在 tree    下创建两个组件 <code>tree.vue</code> 和 <code>node.vue</code>。tree.vue    是组件的入口，用于接收和处理数据，并将数据传递给 node.vue；node.vue    就是一个递归组件，它构成了每一个<strong>节点</strong>，即一个可展开 /    关闭的按钮（+或-）、一个多选框（使用第 7 节的 Checkbox    组件）、节点标题以及递归的下一级节点。可能现在听起来比较困惑，不要慌，下面逐一分解。  </p>  <p>tree.vue 主要负责两件事：</p>  <ol>    <li>定义了组件的入口，即组件的 API；</li>    <li>      对接收的数据 props：data 初步处理，为了在 tree.vue      中不破坏使用者传递的源数据 data，所以会克隆一份数据（cloneData）。    </li>  </ol>  <p>    因为传递的数据 data    是一个复杂的数组结构，克隆它要使用深拷贝，因为浅拷贝数据仍然是引用关系，会破坏源数据。所以在工具集    <code>src/utils/assist.js</code> 中新加一个深拷贝的工具函数    <code>deepCopy</code>：  </p>  <pre><code lang="js" class=""><span>// assist.js，部分代码省略</span><span><span>function</span> <span>typeOf</span>(<span>obj</span>) </span>&#123;  <span>const</span> toString = <span>Object</span>.prototype.toString;  <span>const</span> map = &#123;    <span>'[object Boolean]'</span>  : <span>'boolean'</span>,    <span>'[object Number]'</span>   : <span>'number'</span>,    <span>'[object String]'</span>   : <span>'string'</span>,    <span>'[object Function]'</span> : <span>'function'</span>,    <span>'[object Array]'</span>    : <span>'array'</span>,    <span>'[object Date]'</span>     : <span>'date'</span>,    <span>'[object RegExp]'</span>   : <span>'regExp'</span>,    <span>'[object Undefined]'</span>: <span>'undefined'</span>,    <span>'[object Null]'</span>     : <span>'null'</span>,    <span>'[object Object]'</span>   : <span>'object'</span>  &#125;;  <span>return</span> map[toString.call(obj)];&#125;<span>// deepCopy</span><span><span>function</span> <span>deepCopy</span>(<span>data</span>) </span>&#123;  <span>const</span> t = typeOf(data);  <span>let</span> o;  <span>if</span> (t === <span>'array'</span>) &#123;    o = [];  &#125; <span>else</span> <span>if</span> ( t === <span>'object'</span>) &#123;    o = &#123;&#125;;  &#125; <span>else</span> &#123;    <span>return</span> data;  &#125;  <span>if</span> (t === <span>'array'</span>) &#123;    <span>for</span> (<span>let</span> i = <span>0</span>; i &lt; data.length; i++) &#123;      o.push(deepCopy(data[i]));    &#125;  &#125; <span>else</span> <span>if</span> ( t === <span>'object'</span>) &#123;    <span>for</span> (<span>let</span> i <span>in</span> data) &#123;      o[i] = deepCopy(data[i]);    &#125;  &#125;  <span>return</span> o;&#125;<span>export</span> &#123;deepCopy&#125;;</code></pre>  <p>    deepCopy    函数会递归地对数组或对象进行逐一判断，如果某项是数组或对象，再拆分继续判断，而其它类型就直接赋值了，所以深拷贝的数据不会破坏原有的数据（更多深拷贝与浅拷贝的内容，可阅读扩展阅读    1）。  </p>  <p>先来看 tree.vue 的代码：</p>  <pre><code lang="html" class=""><span>&lt;!-- src/components/tree/tree.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>tree-node</span>      <span>v-for</span>=<span>"(item, index) in cloneData"</span>      <span>:key</span>=<span>"index"</span>      <span>:data</span>=<span>"item"</span>      <span>:show-checkbox</span>=<span>"showCheckbox"</span>    &gt;</span><span>&lt;/<span>tree-node</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> TreeNode <span>from</span> <span>'./node.vue'</span>;  <span>import</span> &#123; deepCopy &#125; <span>from</span> <span>'../../utils/assist.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'Tree'</span>,    <span>components</span>: &#123; TreeNode &#125;,    <span>props</span>: &#123;      <span>data</span>: &#123;        <span>type</span>: <span>Array</span>,        <span>default</span> () &#123;          <span>return</span> [];        &#125;      &#125;,      <span>showCheckbox</span>: &#123;        <span>type</span>: <span>Boolean</span>,        <span>default</span>: <span>false</span>      &#125;    &#125;,    data () &#123;      <span>return</span> &#123;        <span>cloneData</span>: []      &#125;    &#125;,    created () &#123;      <span>this</span>.rebuildData();    &#125;,    <span>watch</span>: &#123;      data () &#123;        <span>this</span>.rebuildData();      &#125;    &#125;,    <span>methods</span>: &#123;      rebuildData () &#123;        <span>this</span>.cloneData = deepCopy(<span>this</span>.data);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    在组件 created 时（以及 watch 监听 data 改变时），调用了    <code>rebuildData</code> 方法克隆源数据，并赋值给了 <code>cloneData</code>。  </p>  <p>    在 template 中，先是渲染了一个 node.vue    组件（<code>&lt;tree-node&gt;</code>），这一级是 Tree 的根节点，因为    cloneDate    是一个数组，所以这个根节点不一定只有一项，有可能是并列的多项。不过这里使用的    node.vue 还没有用到 Vue.js 的递归组件，它只处理第一级根节点。  </p>  <p><code>&lt;tree-node&gt;</code> 组件（node.vue）接收两个 props：</p>  <ol>    <li>showCheckbox：与 tree.vue 的 showCheckbox 相同，只是进行传递；</li>    <li>      data：node.vue 接收的 data 是一个 Object 而非      Array，因为它只负责渲染当前的一个节点，并递归渲染下一个子节点（即      children），所以这里对 cloneData 进行循环，将每一项节点数据赋给了      tree-node。    </li>  </ol>  <h2 data-id="heading-3">递归组件 node.vue</h2>  <p>node.vue 是树组件 Tree 的核心，而一个 tree-node 节点包含 4 个部分：</p>  <ol>    <li>展开与关闭的按钮（+或-）；</li>    <li>多选框；</li>    <li>节点标题；</li>    <li>递归子节点。</li>  </ol>  <p>先来看 node.vue 的基本结构：</p>  <pre><code lang="html" class=""><span>&lt;!-- src/components/tree/node.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>ul</span> <span>class</span>=<span>"tree-ul"</span>&gt;</span>    <span>&lt;<span>li</span> <span>class</span>=<span>"tree-li"</span>&gt;</span>      <span>&lt;<span>span</span> <span>class</span>=<span>"tree-expand"</span> @<span>click</span>=<span>"handleExpand"</span>&gt;</span>        <span>&lt;<span>span</span> <span>v-if</span>=<span>"data.children &amp;&amp; data.children.length &amp;&amp; !data.expand"</span>&gt;</span>+<span>&lt;/<span>span</span>&gt;</span>        <span>&lt;<span>span</span> <span>v-if</span>=<span>"data.children &amp;&amp; data.children.length &amp;&amp; data.expand"</span>&gt;</span>-<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;/<span>span</span>&gt;</span>      <span>&lt;<span>i-checkbox</span>        <span>v-if</span>=<span>"showCheckbox"</span>        <span>:value</span>=<span>"data.checked"</span>        @<span>input</span>=<span>"handleCheck"</span>      &gt;</span><span>&lt;/<span>i-checkbox</span>&gt;</span>      <span>&lt;<span>span</span>&gt;</span>&#123;&#123; data.title &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;<span>tree-node</span>        <span>v-if</span>=<span>"data.expand"</span>        <span>v-for</span>=<span>"(item, index) in data.children"</span>        <span>:key</span>=<span>"index"</span>        <span>:data</span>=<span>"item"</span>        <span>:show-checkbox</span>=<span>"showCheckbox"</span>      &gt;</span><span>&lt;/<span>tree-node</span>&gt;</span>    <span>&lt;/<span>li</span>&gt;</span>  <span>&lt;/<span>ul</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> iCheckbox <span>from</span> <span>'../checkbox/checkbox.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'TreeNode'</span>,    <span>components</span>: &#123; iCheckbox &#125;,    <span>props</span>: &#123;      <span>data</span>: &#123;        <span>type</span>: <span>Object</span>,        <span>default</span> () &#123;          <span>return</span> &#123;&#125;;        &#125;      &#125;,      <span>showCheckbox</span>: &#123;        <span>type</span>: <span>Boolean</span>,        <span>default</span>: <span>false</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span><span>&lt;<span>style</span>&gt;</span><span>  <span>.tree-ul</span>, <span>.tree-li</span>&#123;    <span>list-style</span>: none;    <span>padding-left</span>: <span>10px</span>;  &#125;  <span>.tree-expand</span>&#123;    <span>cursor</span>: pointer;  &#125;</span><span>&lt;/<span>style</span>&gt;</span></code></pre>  <p>    <code>props：data</code>    包含了当前节点的所有信息，比如是否展开子节点（expand）、是否选中（checked）、子节点数据（children）等。  </p>  <p>    第一部分 expand，如果当前节点不含有子节点，也就是没有 children 字段或    children 的长度是 0，那就说明当前节点已经是最后一级节点，所以不含有展开 /    收起的按钮。  </p>  <p>    多选框直接使用了第 7 节的 Checkbox 组件（单用模式），这里将 prop: value    和事件 @input 分开绑定，没有使用 <code>v-model</code> 语法糖。value    绑定的数据    <code>data.checked</code> 表示当前节点是否选中，在点击多选框时，handleCheck    方法会修改 data.checked 数据，下文会分析。这里之所以不使用    <code>v-model</code> 而是分开绑定，是因为 @input    里要额外做一些处理，不是单纯的修改数据。  </p>  <p>    上一节我们说到，一个 Vue.js 递归组件有两个必要条件：name    特性和终结条件。name 已经指定为    <code>TreeNode</code>，而这个终结递归的条件，就是    <code>v-for="(item, index) in data.children"</code>，当    <code>data.children</code>    不存在或为空数组时，自然就不会继续渲染子节点，递归也就停止了。  </p>  <p>    注意，这里的    <code>v-if="data.expand"</code>    并不是递归组件的终结条件，虽然它看起来像是一个可以为    <code>false</code>    的判断语句，但它的用处是判断当前节点<strong>的子节点</strong>是否展开（渲染），如果当前节点不展开，那它所有的子节点也就不会展开（渲染）。  </p>  <p>    上面的代码保留了两个方法 <code>handleExpand</code> 与    <code>handleCheck</code>，先来看前者。  </p>  <p>    点击 + 号时，会展开直属子节点，点击 - 号关闭，这一步只需在    <code>handleExpand</code> 中修改 data 的 expand 数据即可，同时，我们通过    Tree 的根组件（tree.vue）触发一个自定义事件    <code>@on-toggle-expand</code>（上文已介绍）：  </p>  <pre><code lang="js" class=""><span>// node.vue，部分代码省略</span><span>import</span> &#123; findComponentUpward &#125; <span>from</span> <span>'../../utils/assist.js'</span>;<span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>tree</span>: findComponentUpward(<span>this</span>, <span>'Tree'</span>)    &#125;  &#125;,  <span>methods</span>: &#123;    handleExpand () &#123;      <span>this</span>.$set(<span>this</span>.data, <span>'expand'</span>, !<span>this</span>.data.expand);      <span>if</span> (<span>this</span>.tree) &#123;        <span>this</span>.tree.emitEvent(<span>'on-toggle-expand'</span>, <span>this</span>.data);      &#125;    &#125;,  &#125;&#125;</code></pre>  <pre><code lang="js" class=""><span>// tree.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>methods</span>: &#123;    emitEvent (eventName, data) &#123;      <span>this</span>.$emit(eventName, data, <span>this</span>.cloneData);    &#125;  &#125;&#125;</code></pre>  <p>    在 node.vue 中，通过 <code>findComponentUpward</code> 向上找到了 Tree    的实例，并调用它的 <code>emitEvent</code> 方法来触发自定义事件    <code>@on-toggle-expand</code>。之所以使用    <code>findComponentUpward</code> 寻找组件，而不是用    <code>$parent</code>，是因为当前的 node.vue，它的父级不一定就是    tree.vue，因为它是递归组件，父级有可能还是自己。  </p>  <p>    这里有一点需要注意，修改 data.expand，我们是通过 Vue 的    <code>$set</code> 方法来修改，并没有像下面这样修改：  </p>  <pre><code lang="js" class=""><span>this</span>.data.expand = !<span>this</span>.data.expand;</code></pre>  <p>    这样有什么区别呢？如果直接用上面这行代码修改，发现数据虽然被修改了，但是视图并没有更新（原来是    + 号，点击后还是 + 号）。要理解这里，我们先看下，到底修改了什么。这里的    <code>this.data</code>，是一个    props，它是通过上一级传递的，这个上一级有两种可能，一种是递归的    node.vue，一种是根组件 tree.vue，但是递归的 node.vue，最终也是由 tree.vue    传递的，追根溯源，要修改的 <code>this.data</code> 事实上是 tree.vue 的    <code>cloneData</code>。cloneData 里的节点数据，是不一定含有    <code>expand</code> 或 <code>checked</code> 字段的，如果不含有，直接通过    <code>this.data.expand</code> 修改，这个 expand 就不是可响应的数据，Vue.js    是无法追踪到它的变化，视图自然不会更新，而    <code>$set</code>    的用法就是对可响应对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。总结来说，如果    expand 字段一开始是存在的（不管 true 或    false），不管用哪种方式修改都是可以的，否则必须用    <code>$set</code> 修改，结合起来，干脆直接用 $set 了。同理，后文的    <code>checked</code> 也是一样。  </p>  <p>    接下来是整个 Tree    组件最复杂的一部分，就是处理节点的响应状态。你可能会问，不就是选中或取消选中吗，跟    expand    一样，修改数据就行了？如果只是考虑一个节点，的确这样就可以了，但树组件是有上下级关系的，它们分为两种逻辑，当选中（或取消选中）一个节点时：  </p>  <ol>    <li>它下面的所有子节点都会被选中；</li>    <li>      如果同一级所有子节点选中时，它的父级也自动选中，一直递归判断到根节点。    </li>  </ol>  <p>    第 1    个逻辑相对简单，当选中一个节点时，只要递归地遍历它下面所属的所有子节点数据，修改所有的    <code>checked</code> 字段即可：  </p>  <pre><code lang="js" class=""><span>// node.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>methods</span>: &#123;    handleCheck (checked) &#123;      <span>this</span>.updateTreeDown(<span>this</span>.data, checked);      <span>if</span> (<span>this</span>.tree) &#123;        <span>this</span>.tree.emitEvent(<span>'on-check-change'</span>, <span>this</span>.data);      &#125;    &#125;,    updateTreeDown (data, checked) &#123;      <span>this</span>.$set(data, <span>'checked'</span>, checked);      <span>if</span> (data.children &amp;&amp; data.children.length) &#123;        data.children.forEach(<span><span>item</span> =&gt;</span> &#123;          <span>this</span>.updateTreeDown(item, checked);        &#125;);      &#125;    &#125;  &#125;&#125;</code></pre>  <p>    updateTreeDown    只是向下修改了所有的数据，因为当前节点的数据里，是包含其所有子节点数据的，通过递归遍历可以轻松修改，这也是第    1 种逻辑简单的原因。  </p>  <p>    再来看第 2    个逻辑，它的难点在于，无法通过当前节点数据，修改到它的父节点，因为拿不到。写到这里，正常的思路应该是在    <code>this.updateTreeDown(this.data, checked);</code> 的下面再写一个    <code>updateTreeUp</code>    的方法，向上遍历，问题就是，怎样向上遍历，一种常规的思路是，把    <code>updateTreeUp</code> 方法写在 tree.vue 里，并且在 node.vue 的    <code>handleCheck</code> 方法里，通过 this.tree 调用根组件的    <code>updateTreeUp</code>，并且传递当前节点的数据，在 tree.vue    里，要找到当前节点的位置，那还需要一开始在 cloneData    里预先给每个节点设置一个唯一的 key，后面的逻辑读者应该能想到了，就是通过 key    找到节点位置，并向上递归判断……但是，这个方法想着就麻烦。  </p>  <p>    正常的思路不太好解决，我们就换个思路。一个节点，除了手动选中（或反选），还有就是第    2    种逻辑的被动选中（或反选），也就是说，如果这个节点的所有直属子节点（就是它的第一级子节点）都选中（或反选）时，这个节点就自动被选中（或反选），递归地，可以一级一级响应上去。有了这个思路，我们就可以通过    <code>watch</code> 来监听当前节点的子节点是否都选中，进而修改当前的    <code>checked</code> 字段：  </p>  <pre><code lang="js" class=""><span>// node.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>watch</span>: &#123;    <span>'data.children'</span>: &#123;      handler (data) &#123;        <span>if</span> (data) &#123;          <span>const</span> checkedAll = !data.some(<span><span>item</span> =&gt;</span> !item.checked);          <span>this</span>.$set(<span>this</span>.data, <span>'checked'</span>, checkedAll);        &#125;      &#125;,      <span>deep</span>: <span>true</span>    &#125;  &#125;&#125;</code></pre>  <p>    在 watch 中，监听了 data.children    的改变，并且是深度监听的。这段代码的意思是，当    <code>data.children</code> 中的数据的某个字段发生变化时（这里当然是指    checked 字段）,也就是说它的某个子节点被选中（或反选）了，这时执行绑定的句柄    handler 中的逻辑。<code      >const checkedAll = !data.some(item =&gt; !item.checked);</code    >    也是一个巧妙的缩写，checkedAll 最终返回结果就是当前子节点是否都被选中了。  </p>  <p>    这里非常巧妙地利用了递归的特性，因为 node.vue    是一个递归组件，那每一个组件里都会有 watch 监听    <code>data.children</code    >，要知道，当前的节点有两个”身份“，它既是下属节点的父节点，同时也是上级节点的子节点，它作为下属节点的父节点被修改的同时，也会触发上级节点中的    watch 监听函数。<strong>这就是递归</strong>。  </p>  <p>    以上就是 Tree 组件的所有内容，完整的代码见：    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ficarusion%2Fvue-component-book%2Ftree%2Fmaster%2Fsrc%2Fcomponents%2Ftree"      title="https://github.com/icarusion/vue-component-book/tree/master/src/components/tree"      ref="nofollow noopener noreferrer"      >github.com/icarusion/v…</a    >  </p>  <p>    用例：<a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ficarusion%2Fvue-component-book%2Fblob%2Fmaster%2Fsrc%2Fviews%2Ftree.vue"      title="https://github.com/icarusion/vue-component-book/blob/master/src/views/tree.vue"      ref="nofollow noopener noreferrer"      >github.com/icarusion/v…</a    >  </p>  <h2 data-id="heading-4">结语</h2>  <p>递归就像人类繁衍一样，蕴藏了无限可能，充满着神奇与智慧。</p>  <h2 data-id="heading-5">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://juejin.cn/post/6844904197595332622"        title="https://juejin.cn/post/6844904197595332622"        >浅拷贝与深拷贝</a      >    </li>  </ul>  <p>    注：本节部分代码参考    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview%2Fblob%2F2.0%2Fsrc%2Futils%2Fassist.js%23L114"      title="https://github.com/iview/iview/blob/2.0/src/utils/assist.js#L114"      ref="nofollow noopener noreferrer"      >iView</a    >。  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-14】递归组件与动态组件</title>
      <link href="/427e95c5aaf8.html"/>
      <url>/427e95c5aaf8.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <h2 data-id="heading-1">递归组件</h2>  <p>    递归组件就是指组件在模板中调用自己，开启递归组件的必要条件，就是在组件中设置一个    <code>name</code> 选项。比如下面的示例：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>my-component</span>&gt;</span><span>&lt;/<span>my-component</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'my-component'</span>  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    在 Webpack 中导入一个 Vue.js 组件，一般是通过    <code>import myComponent from 'xxx'</code>    这样的语法，然后在当前组件（页面）的    <code>components: &#123; myComponent &#125;</code> 里注册组件。这种组件是不强制设置    <code>name</code> 字段的，组件的名字都是使用者在 import    进来后自定义的，但递归组件的使用者是组件自身，它得知道这个组件叫什么，因为没有用    <code>components</code> 注册，所以    <code>name</code> 字段就是必须的了。除了递归组件用    <code>name</code    >，我们在之前的小节也介绍过，用一些特殊的方法，通过遍历匹配组件的 name    选项来寻找组件实例。  </p>  <p>    不过呢，上面的示例是有问题的，如果直接运行，会抛出    <code>max stack size exceeded</code>    的错误，因为组件会无限递归下去，死循环。解决这个问题，就要给递归组件一个限制条件，一般会在递归组件上用    <code>v-if</code> 在某个地方设置为    <code>false</code> 来终结。比如我们给上面的示例加一个属性 count，当大于 5    时就不再递归：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>my-component</span> <span>:count</span>=<span>"count + 1"</span> <span>v-if</span>=<span>"count &lt;= 5"</span>&gt;</span><span>&lt;/<span>my-component</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'my-component'</span>,    <span>props</span>: &#123;      <span>count</span>: &#123;        <span>type</span>: <span>Number</span>,        <span>default</span>: <span>1</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>所以，总结下来，实现一个递归组件的必要条件是：</p>  <ul>    <li>要给组件设置 <strong>name</strong>；</li>    <li>要有一个明确的结束条件</li>  </ul>  <p>    递归组件常用来开发具有未知层级关系的独立组件，在业务开发中很少使用。比如常见的有级联选择器和树形控件：  </p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/22/167398b8f5a828b1~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    这类组件一般都是数据驱动型的，父级有一个字段    children，然后递归。下一节的实战，会开发一个树形控件 Tree。  </p>  <h2 data-id="heading-2">动态组件</h2>  <p>    有的时候，我们希望根据一些条件，动态地切换某个组件，或动态地选择渲染某个组件。在之前小节介绍函数式组件    Functional Render    时，已经说过，它是一个没有上下文的函数，常用于程序化地在多个组件中选择一个。使用    Render 或 Functional Render 可以解决动态切换组件的需求，不过那是基于一个 JS    对象（Render 函数），而 Vue.js 提供了另外一个内置的组件    <code>&lt;component&gt;</code> 和    <code>is</code> 特性，可以更好地实现动态组件。  </p>  <p>    先来看一个 <code>&lt;component&gt;</code> 和    <code>is</code> 的基本示例，首先定义三个普通组件：  </p>  <pre><code lang="html" class=""><span>&lt;!-- a.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 A  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="html" class=""><span>&lt;!-- b.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 B  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="html" class=""><span>&lt;!-- c.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 C  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>然后在父组件中导入这 3 个组件，并动态切换：</p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleChange('A')"</span>&gt;</span>显示 A 组件<span>&lt;/<span>button</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleChange('B')"</span>&gt;</span>显示 B 组件<span>&lt;/<span>button</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleChange('C')"</span>&gt;</span>显示 C 组件<span>&lt;/<span>button</span>&gt;</span>    <span>&lt;<span>component</span> <span>:is</span>=<span>"component"</span>&gt;</span><span>&lt;/<span>component</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> componentA <span>from</span> <span>'../components/a.vue'</span>;  <span>import</span> componentB <span>from</span> <span>'../components/b.vue'</span>;  <span>import</span> componentC <span>from</span> <span>'../components/c.vue'</span>;  <span>export</span> <span>default</span> &#123;    data () &#123;      <span>return</span> &#123;        <span>component</span>: componentA      &#125;    &#125;,    <span>methods</span>: &#123;      handleChange (component) &#123;        <span>if</span> (component === <span>'A'</span>) &#123;          <span>this</span>.component = componentA;        &#125; <span>else</span> <span>if</span> (component === <span>'B'</span>) &#123;          <span>this</span>.component = componentB;        &#125; <span>else</span> <span>if</span> (component === <span>'C'</span>) &#123;          <span>this</span>.component = componentC;        &#125;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    这里的 <code>is</code> 动态绑定的是一个组件对象（Object），它直接指向 a / b    / c 三个组件中的一个。除了直接绑定一个 Object，还可以是一个    String，比如标签名、组件名。下面的这个组件，将原生的按钮 button    进行了封装，如果传入了 <code>prop: to</code>，那它会渲染为一个    <code>&lt;a&gt;</code> 标签，用于打开这个链接地址，如果没有传入    <code>to</code>，就当作普通 button 使用。来看下面的示例：  </p>  <pre><code lang="html" class=""><span>&lt;!-- button.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>component</span> <span>:is</span>=<span>"tagName"</span> <span>v-bind</span>=<span>"tagProps"</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>component</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>props</span>: &#123;      <span>// 链接地址</span>      to: &#123;        <span>type</span>: <span>String</span>,        <span>default</span>: <span>''</span>      &#125;,      <span>// 链接打开方式，如 _blank</span>      target: &#123;        <span>type</span>: <span>String</span>,        <span>default</span>: <span>'_self'</span>      &#125;    &#125;,    <span>computed</span>: &#123;      <span>// 动态渲染不同的标签</span>      tagName () &#123;        <span>return</span> <span>this</span>.to === <span>''</span> ? <span>'button'</span> : <span>'a'</span>;      &#125;,      <span>// 如果是链接，把这些属性都绑定在 component 上</span>      tagProps () &#123;        <span>let</span> props = &#123;&#125;;        <span>if</span> (<span>this</span>.to) &#123;          props = &#123;            <span>target</span>: <span>this</span>.target,            <span>href</span>: <span>this</span>.to          &#125;        &#125;        <span>return</span> props;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>使用组件：</p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>i-button</span>&gt;</span>普通按钮<span>&lt;/<span>i-button</span>&gt;</span>    <span>&lt;<span>br</span>&gt;</span>    <span>&lt;<span>i-button</span> <span>to</span>=<span>"https://juejin.cn"</span>&gt;</span>链接按钮<span>&lt;/<span>i-button</span>&gt;</span>    <span>&lt;<span>br</span>&gt;</span>    <span>&lt;<span>i-button</span> <span>to</span>=<span>"https://juejin.cn"</span> <span>target</span>=<span>"_blank"</span>&gt;</span>新窗口打开链接按钮<span>&lt;/<span>i-button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> iButton <span>from</span> <span>'../components/a.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; iButton &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    最终会渲染出一个原生的 <code>&lt;button&gt;</code> 按钮和两个原生的链接    <code>&lt;a&gt;</code>，且第二个点击会在新窗口中打开链接，如图：  </p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/22/167398c004dc0c60~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    i-button 组件中的 <code>&lt;component&gt;</code>    <code>is</code> 绑定的就是一个标签名称 button / a，并且通过    <code>v-bind</code> 将一些额外的属性全部绑定到了    <code>&lt;component&gt;</code> 上。  </p>  <p>    再回到第一个 a / b / c    组件切换的示例，如果这类的组件，频繁切换，事实上组件是会重新渲染的，比如我们在组件    A 里加两个生命周期：  </p>  <pre><code lang="html" class=""><span>&lt;!-- a.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 A  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    mounted () &#123;      <span>console</span>.log(<span>'组件创建了'</span>);    &#125;,    beforeDestroy () &#123;      <span>console</span>.log(<span>'组件销毁了'</span>);    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    只要切换到 A 组件，<code>mounted</code> 就会触发一次，切换到其它组件，<code      >beforeDestroy</code    >    也会触发一次，说明组件再重新渲染，这样有可能导致性能问题。为了避免组件的重复渲染，可以在    <code>&lt;component&gt;</code> 外层套一个 Vue.js 内置的    <code>&lt;keep-alive&gt;</code> 组件，这样，组件就会被缓存起来：  </p>  <pre><code lang="html" class=""><span>&lt;<span>keep-alive</span>&gt;</span>  <span>&lt;<span>component</span> <span>:is</span>=<span>"component"</span>&gt;</span><span>&lt;/<span>component</span>&gt;</span><span>&lt;/<span>keep-alive</span>&gt;</span></code></pre>  <p>    这时，只有    <code>mounted</code> 触发了，如果不离开当前页面，切换到其它组件，<code      >beforeDestroy</code    >    不会被触发，说明组件已经被缓存了。  </p>  <p>keep-alive 还有一些额外的 props 可以配置：</p>  <ul>    <li>      <code>include</code>：字符串或正则表达式。只有名称匹配的组件会被缓存。    </li>    <li>      <code>exclude</code>：字符串或正则表达式。任何名称匹配的组件都不会被缓存。    </li>    <li><code>max</code>：数字。最多可以缓存多少组件实例。</li>  </ul>  <h2 data-id="heading-3">结语</h2>  <p>    还有一类是异步组件，Vue.js 文档已经介绍的很清楚了，可以阅读文末的扩展阅读    1。事实上异步组件我们用的很多，比如 router    的配置列表，一般都是用的异步组件形式：  </p>  <pre><code lang="js" class="">&#123;  <span>path</span>: <span>'/form'</span>,  <span>component</span>: <span><span>()</span> =&gt;</span> <span>import</span>(<span>'./views/form.vue'</span>)&#125;</code></pre>  <p>    这样每个页面才会在路由到时才加载对应的 JS 文件，否则入口文件会非常庞大。  </p>  <p>    递归组件、动态组件和异步组件是 Vue.js 中相对冷门的 3    种组件模式，不过在封装复杂的独立组件时，前两者会经常使用。  </p>  <h2 data-id="heading-4">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fcomponents-dynamic-async.html%23%25E5%25BC%2582%25E6%25AD%25A5%25E7%25BB%2584%25E4%25BB%25B6"        title="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6"        ref="nofollow noopener noreferrer"        >异步组件</a      >    </li>  </ul></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-13】实战 6：可用 slot-scope 自定义列的表格组件——Table</title>
      <link href="/f41ebad182d9.html"/>
      <url>/f41ebad182d9.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    上一节，我们基于 Render 函数实现了在表格中自定义列模板的组件 Table，虽说    Render 函数能够完全发挥 JavaScript    的编程能力，实现几乎所有的自定义工作，但本质上，使用者写的是一个庞大的 JS    对象，它不具备 DOM 结构，可读性和可维护性都比较差。对于大部分写 Vue.js    的开发者来说，更倾向于使用 template 的语法，毕竟它是 Vue.js    独有的特性。本小节则在上一节的 Table    组件基础上修改，实现一种达到同样渲染效果，但对使用者更友好的 slot-scope    写法。  </p>  <h2 data-id="heading-1">什么是 slot-scope</h2>  <p>    slot（插槽）我们都很熟悉，它是 Vue.js 组件的 3 个 API 之一，用于分发内容。那    slot-scope 是什么呢？先来看一个场景，比如某组件拥有下面的模板：  </p>  <pre><code lang="html" class=""><span>&lt;<span>ul</span>&gt;</span>  <span>&lt;<span>li</span> <span>v-for</span>=<span>"book in books"</span> <span>:key</span>=<span>"book.id"</span>&gt;</span>    &#123;&#123; book.name &#125;&#125;  <span>&lt;/<span>li</span>&gt;</span><span>&lt;/<span>ul</span>&gt;</span></code></pre>  <p>    使用者传递一个数组 <code>books</code>，由组件内的    <code>v-for</code> 循环显示，这里的    <code>&#123;&#123; book.name &#125;&#125;</code>    是纯文本输出，如果想自定义它的模板（即内容分发），就要用到 slot，但 slot    只能是固定的模板，没法自定义循环体中的一个具体的项，事实上这跟上一节的 Table    场景是类似的。  </p>  <p>    常规的 slot 无法实现对组件循环体的每一项进行不同的内容分发，这就要用到    slot-scope，它本质上跟 slot 一样，只不过可以传递参数。比如上面的示例，使用    slot-scope 封装：  </p>  <pre><code lang="html" class=""><span>&lt;<span>ul</span>&gt;</span>  <span>&lt;<span>li</span> <span>v-for</span>=<span>"book in books"</span> <span>:key</span>=<span>"book.id"</span>&gt;</span>    <span>&lt;<span>slot</span> <span>:book</span>=<span>"book"</span>&gt;</span>      <span>&lt;!-- 默认内容 --&gt;</span>      &#123;&#123; book.name &#125;&#125;    <span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>li</span>&gt;</span><span>&lt;/<span>ul</span>&gt;</span></code></pre>  <p>    在 slot 上，传递了一个自定义的参数    <code>book</code>，它的值绑定的是当前循环项的数据    book，这样在父级使用时，就可以在 slot 中访问它了：  </p>  <pre><code lang="html" class=""><span>&lt;<span>book-list</span> <span>:books</span>=<span>"books"</span>&gt;</span>  <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"slotProps"</span>&gt;</span>    <span>&lt;<span>span</span> <span>v-if</span>=<span>"slotProps.book.sale"</span>&gt;</span>限时优惠<span>&lt;/<span>span</span>&gt;</span>    &#123;&#123; slotProps.book.name &#125;&#125;  <span>&lt;/<span>template</span>&gt;</span><span>&lt;/<span>book-list</span>&gt;</span></code></pre>  <p>    使用 slot-scope 指定的参数 <code>slotProps</code> 就是这个 slot    的全部参数，它是一个对象，在 slot-scope    中是可以传递多个参数的，上例我们只写了一个参数    <code>book</code>，所以访问它就是 <code>slotProps.book</code>。这里推荐使用    ES6 的解构，能让参数使用起来更方便：  </p>  <pre><code lang="html" class=""><span>&lt;<span>book-list</span> <span>:books</span>=<span>"books"</span>&gt;</span>  <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; book &#125;"</span>&gt;</span>    <span>&lt;<span>span</span> <span>v-if</span>=<span>"book.sale"</span>&gt;</span>限时优惠<span>&lt;/<span>span</span>&gt;</span>    &#123;&#123; book.name &#125;&#125;  <span>&lt;/<span>template</span>&gt;</span><span>&lt;/<span>book-list</span>&gt;</span></code></pre>  <p>除了可以传递参数，其它用法跟 slot 是一样的，比如也可以“具名”：</p>  <pre><code lang="html" class=""><span>&lt;<span>slot</span> <span>:book</span>=<span>"book"</span> <span>name</span>=<span>"book"</span>&gt;</span>  &#123;&#123; book.name &#125;&#125;<span>&lt;/<span>slot</span>&gt;</span></code></pre>  <pre><code lang="html" class=""><span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; book &#125;"</span> <span>slot</span>=<span>"book"</span>&gt;</span>  <span>&lt;<span>span</span> <span>v-if</span>=<span>"book.sale"</span>&gt;</span>限时优惠<span>&lt;/<span>span</span>&gt;</span>  &#123;&#123; book.name &#125;&#125;<span>&lt;/<span>template</span>&gt;</span></code></pre>  <p>    这就是作用域    slot（slot-scope），能够在组件的循环体中做内容分发，有了它，Table    组件的自定义列模板就不用写一长串的 Render 函数了。  </p>  <p>    为了把 Render 函数和 slot-scope 理解透彻，下面我们用 3 种方法来改写    Table，实现 slot-scope 自定义列模板。  </p>  <h2 data-id="heading-2">方案一</h2>  <p>    第一种方案，用最简单的 slot-scope 实现，同时也兼容 Render    函数的旧用法。拷贝上一节的 Table 组件目录，更名为    <code>table-slot</code>，同时也拷贝路由，更名为    <code>table-slot.vue</code>。为了兼容旧的 Render 函数用法，在 columns    的列配置 column 中，新增一个字段 <code>slot</code> 来指定 slot-scope    的名称：  </p>  <pre><code lang="html" class=""><span>&lt;!-- src/components/table-slot/table.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>table</span>&gt;</span>    <span>&lt;<span>thead</span>&gt;</span>      <span>&lt;<span>tr</span>&gt;</span>        <span>&lt;<span>th</span> <span>v-for</span>=<span>"col in columns"</span>&gt;</span>&#123;&#123; col.title &#125;&#125;<span>&lt;/<span>th</span>&gt;</span>      <span>&lt;/<span>tr</span>&gt;</span>    <span>&lt;/<span>thead</span>&gt;</span>    <span>&lt;<span>tbody</span>&gt;</span>      <span>&lt;<span>tr</span> <span>v-for</span>=<span>"(row, rowIndex) in data"</span>&gt;</span>        <span>&lt;<span>td</span> <span>v-for</span>=<span>"col in columns"</span>&gt;</span>          <span>&lt;<span>template</span> <span>v-if</span>=<span>"'render' in col"</span>&gt;</span>            <span>&lt;<span>Render</span> <span>:row</span>=<span>"row"</span> <span>:column</span>=<span>"col"</span> <span>:index</span>=<span>"rowIndex"</span> <span>:render</span>=<span>"col.render"</span>&gt;</span><span>&lt;/<span>Render</span>&gt;</span>          <span>&lt;/<span>template</span>&gt;</span>          <span>&lt;<span>template</span> <span>v-else-if</span>=<span>"'slot' in col"</span>&gt;</span>            <span>&lt;<span>slot</span> <span>:row</span>=<span>"row"</span> <span>:column</span>=<span>"col"</span> <span>:index</span>=<span>"rowIndex"</span> <span>:name</span>=<span>"col.slot"</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>          <span>&lt;/<span>template</span>&gt;</span>          <span>&lt;<span>template</span> <span>v-else</span>&gt;</span>&#123;&#123; row[col.key] &#125;&#125;<span>&lt;/<span>template</span>&gt;</span>        <span>&lt;/<span>td</span>&gt;</span>      <span>&lt;/<span>tr</span>&gt;</span>    <span>&lt;/<span>tbody</span>&gt;</span>  <span>&lt;/<span>table</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span></code></pre>  <p>    相比原先的文件，只在 <code>'render' in col</code> 的条件下新加了一个    <code>template</code> 的标签，如果使用者的 column 配置了 render    字段，就优先以 Render 函数渲染，然后再判断是否用 slot-scope    渲染。在定义的作用域 slot 中，将行数据 <code>row</code>、列数据    <code>column</code> 和第几行 <code>index</code> 作为 slot 的参数，并根据    column 中指定的 slot 字段值，动态设置了具名 <code>name</code>。使用者在配置    columns 时，只要指定了某一列的 slot，那就可以在 Table 组件中使用    slot-scope。我们以上一节的可编辑整行数据为例，用 slot-scope    的写法实现完全一样的效果：  </p>  <pre><code lang="html" class=""><span>&lt;!-- src/views/table-slot.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>table-slot</span> <span>:columns</span>=<span>"columns"</span> <span>:data</span>=<span>"data"</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"name"</span>&gt;</span>        <span>&lt;<span>input</span> <span>type</span>=<span>"text"</span> <span>v-model</span>=<span>"editName"</span> <span>v-if</span>=<span>"editIndex === index"</span> /&gt;</span>        <span>&lt;<span>span</span> <span>v-else</span>&gt;</span>&#123;&#123; row.name &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"age"</span>&gt;</span>        <span>&lt;<span>input</span> <span>type</span>=<span>"text"</span> <span>v-model</span>=<span>"editAge"</span> <span>v-if</span>=<span>"editIndex === index"</span> /&gt;</span>        <span>&lt;<span>span</span> <span>v-else</span>&gt;</span>&#123;&#123; row.age &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"birthday"</span>&gt;</span>        <span>&lt;<span>input</span> <span>type</span>=<span>"text"</span> <span>v-model</span>=<span>"editBirthday"</span> <span>v-if</span>=<span>"editIndex === index"</span> /&gt;</span>        <span>&lt;<span>span</span> <span>v-else</span>&gt;</span>&#123;&#123; getBirthday(row.birthday) &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"address"</span>&gt;</span>        <span>&lt;<span>input</span> <span>type</span>=<span>"text"</span> <span>v-model</span>=<span>"editAddress"</span> <span>v-if</span>=<span>"editIndex === index"</span> /&gt;</span>        <span>&lt;<span>span</span> <span>v-else</span>&gt;</span>&#123;&#123; row.address &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"action"</span>&gt;</span>        <span>&lt;<span>div</span> <span>v-if</span>=<span>"editIndex === index"</span>&gt;</span>          <span>&lt;<span>button</span> @<span>click</span>=<span>"handleSave(index)"</span>&gt;</span>保存<span>&lt;/<span>button</span>&gt;</span>          <span>&lt;<span>button</span> @<span>click</span>=<span>"editIndex = -1"</span>&gt;</span>取消<span>&lt;/<span>button</span>&gt;</span>        <span>&lt;/<span>div</span>&gt;</span>        <span>&lt;<span>div</span> <span>v-else</span>&gt;</span>          <span>&lt;<span>button</span> @<span>click</span>=<span>"handleEdit(row, index)"</span>&gt;</span>操作<span>&lt;/<span>button</span>&gt;</span>        <span>&lt;/<span>div</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>    <span>&lt;/<span>table-slot</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> TableSlot <span>from</span> <span>'../components/table-slot/table.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; TableSlot &#125;,    data () &#123;      <span>return</span> &#123;        <span>columns</span>: [          &#123;            <span>title</span>: <span>'姓名'</span>,            <span>slot</span>: <span>'name'</span>          &#125;,          &#123;            <span>title</span>: <span>'年龄'</span>,            <span>slot</span>: <span>'age'</span>          &#125;,          &#123;            <span>title</span>: <span>'出生日期'</span>,            <span>slot</span>: <span>'birthday'</span>          &#125;,          &#123;            <span>title</span>: <span>'地址'</span>,            <span>slot</span>: <span>'address'</span>          &#125;,          &#123;            <span>title</span>: <span>'操作'</span>,            <span>slot</span>: <span>'action'</span>          &#125;        ],        <span>data</span>: [          &#123;            <span>name</span>: <span>'王小明'</span>,            <span>age</span>: <span>18</span>,            <span>birthday</span>: <span>'919526400000'</span>,            <span>address</span>: <span>'北京市朝阳区芍药居'</span>          &#125;,          &#123;            <span>name</span>: <span>'张小刚'</span>,            <span>age</span>: <span>25</span>,            <span>birthday</span>: <span>'696096000000'</span>,            <span>address</span>: <span>'北京市海淀区西二旗'</span>          &#125;,          &#123;            <span>name</span>: <span>'李小红'</span>,            <span>age</span>: <span>30</span>,            <span>birthday</span>: <span>'563472000000'</span>,            <span>address</span>: <span>'上海市浦东新区世纪大道'</span>          &#125;,          &#123;            <span>name</span>: <span>'周小伟'</span>,            <span>age</span>: <span>26</span>,            <span>birthday</span>: <span>'687024000000'</span>,            <span>address</span>: <span>'深圳市南山区深南大道'</span>          &#125;        ],        <span>editIndex</span>: <span>-1</span>,  <span>// 当前聚焦的输入框的行数</span>        editName: <span>''</span>,  <span>// 第一列输入框，当然聚焦的输入框的输入内容，与 data 分离避免重构的闪烁</span>        editAge: <span>''</span>,  <span>// 第二列输入框</span>        editBirthday: <span>''</span>,  <span>// 第三列输入框</span>        editAddress: <span>''</span>,  <span>// 第四列输入框</span>      &#125;    &#125;,    <span>methods</span>: &#123;      handleEdit (row, index) &#123;        <span>this</span>.editName = row.name;        <span>this</span>.editAge = row.age;        <span>this</span>.editAddress = row.address;        <span>this</span>.editBirthday = row.birthday;        <span>this</span>.editIndex = index;      &#125;,      handleSave (index) &#123;        <span>this</span>.data[index].name = <span>this</span>.editName;        <span>this</span>.data[index].age = <span>this</span>.editAge;        <span>this</span>.data[index].birthday = <span>this</span>.editBirthday;        <span>this</span>.data[index].address = <span>this</span>.editAddress;        <span>this</span>.editIndex = <span>-1</span>;      &#125;,      getBirthday (birthday) &#123;        <span>const</span> date = <span>new</span> <span>Date</span>(<span>parseInt</span>(birthday));        <span>const</span> year = date.getFullYear();        <span>const</span> month = date.getMonth() + <span>1</span>;        <span>const</span> day = date.getDate();        <span>return</span> <span>`<span>$&#123;year&#125;</span>-<span>$&#123;month&#125;</span>-<span>$&#123;day&#125;</span>`</span>;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    示例中在 <code>&lt;table-slot&gt;</code> 内的每一个    <code>&lt;template&gt;</code> 就对应某一列的 slot-scope 模板，通过配置的    <code>slot</code> 字段，指定具名的 slot-scope。可以看到，基本是把 Render    函数还原成了 html 的写法，这样看起来直接多了，渲染效果是完全一样的。在    slot-scope 中，平时怎么写组件，这里就怎么写，Vue.js 所有的 API    都是可以直接使用的。  </p>  <p>    方案一是最优解，一般情况下，使用这种方案就可以了，其余两种方案是基于 Render    的。  </p>  <h2 data-id="heading-3">方案二</h2>  <p>    第二种方案，不需要修改原先的 Table    组件代码，只是在使用层面修改即可。先来看具体的使用代码，然后再做分析。注意，这里使用的    Table 组件，仍然是上一节    <code>src/components/table-render</code> 的组件，它只有 Render    函数，没有定义 slot-scope：  </p>  <pre><code lang="html" class=""><span>&lt;!-- src/views/table-render.vue 的改写 --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>table-render</span> <span>ref</span>=<span>"table"</span> <span>:columns</span>=<span>"columns"</span> <span>:data</span>=<span>"data"</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"name"</span>&gt;</span>        <span>&lt;<span>input</span> <span>type</span>=<span>"text"</span> <span>v-model</span>=<span>"editName"</span> <span>v-if</span>=<span>"editIndex === index"</span> /&gt;</span>        <span>&lt;<span>span</span> <span>v-else</span>&gt;</span>&#123;&#123; row.name &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"age"</span>&gt;</span>        <span>&lt;<span>input</span> <span>type</span>=<span>"text"</span> <span>v-model</span>=<span>"editAge"</span> <span>v-if</span>=<span>"editIndex === index"</span> /&gt;</span>        <span>&lt;<span>span</span> <span>v-else</span>&gt;</span>&#123;&#123; row.age &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"birthday"</span>&gt;</span>        <span>&lt;<span>input</span> <span>type</span>=<span>"text"</span> <span>v-model</span>=<span>"editBirthday"</span> <span>v-if</span>=<span>"editIndex === index"</span> /&gt;</span>        <span>&lt;<span>span</span> <span>v-else</span>&gt;</span>&#123;&#123; getBirthday(row.birthday) &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"address"</span>&gt;</span>        <span>&lt;<span>input</span> <span>type</span>=<span>"text"</span> <span>v-model</span>=<span>"editAddress"</span> <span>v-if</span>=<span>"editIndex === index"</span> /&gt;</span>        <span>&lt;<span>span</span> <span>v-else</span>&gt;</span>&#123;&#123; row.address &#125;&#125;<span>&lt;/<span>span</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>      <span>&lt;<span>template</span> <span>slot-scope</span>=<span>"&#123; row, index &#125;"</span> <span>slot</span>=<span>"action"</span>&gt;</span>        <span>&lt;<span>div</span> <span>v-if</span>=<span>"editIndex === index"</span>&gt;</span>          <span>&lt;<span>button</span> @<span>click</span>=<span>"handleSave(index)"</span>&gt;</span>保存<span>&lt;/<span>button</span>&gt;</span>          <span>&lt;<span>button</span> @<span>click</span>=<span>"editIndex = -1"</span>&gt;</span>取消<span>&lt;/<span>button</span>&gt;</span>        <span>&lt;/<span>div</span>&gt;</span>        <span>&lt;<span>div</span> <span>v-else</span>&gt;</span>          <span>&lt;<span>button</span> @<span>click</span>=<span>"handleEdit(row, index)"</span>&gt;</span>操作<span>&lt;/<span>button</span>&gt;</span>        <span>&lt;/<span>div</span>&gt;</span>      <span>&lt;/<span>template</span>&gt;</span>    <span>&lt;/<span>table-render</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> TableRender <span>from</span> <span>'../components/table-render/table.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; TableRender &#125;,    data () &#123;      <span>return</span> &#123;        <span>columns</span>: [          &#123;            <span>title</span>: <span>'姓名'</span>,            <span>render</span>: <span>(<span>h, &#123; row, column, index &#125;</span>) =&gt;</span> &#123;              <span>return</span> h(                <span>'div'</span>,                <span>this</span>.$refs.table.$scopedSlots.name(&#123;                  <span>row</span>: row,                  <span>column</span>: column,                  <span>index</span>: index                &#125;)              )            &#125;          &#125;,          &#123;            <span>title</span>: <span>'年龄'</span>,            <span>render</span>: <span>(<span>h, &#123; row, column, index &#125;</span>) =&gt;</span> &#123;              <span>return</span> h(                <span>'div'</span>,                <span>this</span>.$refs.table.$scopedSlots.age(&#123;                  <span>row</span>: row,                  <span>column</span>: column,                  <span>index</span>: index                &#125;)              )            &#125;          &#125;,          &#123;            <span>title</span>: <span>'出生日期'</span>,            <span>render</span>: <span>(<span>h, &#123; row, column, index &#125;</span>) =&gt;</span> &#123;              <span>return</span> h(                <span>'div'</span>,                <span>this</span>.$refs.table.$scopedSlots.birthday(&#123;                  <span>row</span>: row,                  <span>column</span>: column,                  <span>index</span>: index                &#125;)              )            &#125;          &#125;,          &#123;            <span>title</span>: <span>'地址'</span>,            <span>render</span>: <span>(<span>h, &#123; row, column, index &#125;</span>) =&gt;</span> &#123;              <span>return</span> h(                <span>'div'</span>,                <span>this</span>.$refs.table.$scopedSlots.address(&#123;                  <span>row</span>: row,                  <span>column</span>: column,                  <span>index</span>: index                &#125;)              )            &#125;          &#125;,          &#123;            <span>title</span>: <span>'操作'</span>,            <span>render</span>: <span>(<span>h, &#123; row, column, index &#125;</span>) =&gt;</span> &#123;              <span>return</span> h(                <span>'div'</span>,                <span>this</span>.$refs.table.$scopedSlots.action(&#123;                  <span>row</span>: row,                  <span>column</span>: column,                  <span>index</span>: index                &#125;)              )            &#125;          &#125;        ],        <span>data</span>: [],        <span>editIndex</span>: <span>-1</span>,  <span>// 当前聚焦的输入框的行数</span>        editName: <span>''</span>,  <span>// 第一列输入框，当然聚焦的输入框的输入内容，与 data 分离避免重构的闪烁</span>        editAge: <span>''</span>,  <span>// 第二列输入框</span>        editBirthday: <span>''</span>,  <span>// 第三列输入框</span>        editAddress: <span>''</span>,  <span>// 第四列输入框</span>      &#125;    &#125;,    <span>methods</span>: &#123;      handleEdit (row, index) &#123;        <span>this</span>.editName = row.name;        <span>this</span>.editAge = row.age;        <span>this</span>.editAddress = row.address;        <span>this</span>.editBirthday = row.birthday;        <span>this</span>.editIndex = index;      &#125;,      handleSave (index) &#123;        <span>this</span>.data[index].name = <span>this</span>.editName;        <span>this</span>.data[index].age = <span>this</span>.editAge;        <span>this</span>.data[index].birthday = <span>this</span>.editBirthday;        <span>this</span>.data[index].address = <span>this</span>.editAddress;        <span>this</span>.editIndex = <span>-1</span>;      &#125;,      getBirthday (birthday) &#123;        <span>const</span> date = <span>new</span> <span>Date</span>(<span>parseInt</span>(birthday));        <span>const</span> year = date.getFullYear();        <span>const</span> month = date.getMonth() + <span>1</span>;        <span>const</span> day = date.getDate();        <span>return</span> <span>`<span>$&#123;year&#125;</span>-<span>$&#123;month&#125;</span>-<span>$&#123;day&#125;</span>`</span>;      &#125;    &#125;,    mounted () &#123;      <span>this</span>.data = [        &#123;          <span>name</span>: <span>'王小明'</span>,          <span>age</span>: <span>18</span>,          <span>birthday</span>: <span>'919526400000'</span>,          <span>address</span>: <span>'北京市朝阳区芍药居'</span>        &#125;,        &#123;          <span>name</span>: <span>'张小刚'</span>,          <span>age</span>: <span>25</span>,          <span>birthday</span>: <span>'696096000000'</span>,          <span>address</span>: <span>'北京市海淀区西二旗'</span>        &#125;,        &#123;          <span>name</span>: <span>'李小红'</span>,          <span>age</span>: <span>30</span>,          <span>birthday</span>: <span>'563472000000'</span>,          <span>address</span>: <span>'上海市浦东新区世纪大道'</span>        &#125;,        &#123;          <span>name</span>: <span>'周小伟'</span>,          <span>age</span>: <span>26</span>,          <span>birthday</span>: <span>'687024000000'</span>,          <span>address</span>: <span>'深圳市南山区深南大道'</span>        &#125;      ];    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    在 slot-scope 的使用上（即 template    的内容），与方案一是完全一致的，可以看到，在 column 的定义上，仍然使用了    render 字段，只不过每个 render 都渲染了一个 div 节点，而这个 div    的内容，是指定来在 <code>&lt;table-render&gt;</code> 中定义的 slot-scope：  </p>  <pre><code lang="js" class="">render: <span>(<span>h, &#123; row, column, index &#125;</span>) =&gt;</span> &#123;  <span>return</span> h(    <span>'div'</span>,    <span>this</span>.$refs.table.$scopedSlots.name(&#123;      <span>row</span>: row,      <span>column</span>: column,      <span>index</span>: index    &#125;)  )&#125;</code></pre>  <p>    这正是 Render 函数灵活的一个体现，使用 <code>$scopedSlots</code> 可以访问    slot-scope，所以上面这段代码的意思是，name 这一列仍然是使用 Functional    Render，只不过 Render 的是一个预先定义好的 slot-scope 模板。  </p>  <p>    有一点需要注意的是，示例中的 <code>data</code> 默认是空数组，而在 mounted    里才赋值的，是因为这样定义的 slot-scope，初始时读取    <code>this.$refs.table.$scopedSlots</code>    是读不到的，会报错，当没有数据时，也就不会去渲染，也就避免了报错。  </p>  <p>    这种方案虽然可行，但归根到底是一种    hack，不是非常推荐，之所以列出来，是为了对 Render 和 slot-scope    有进一步的认识。  </p>  <h2 data-id="heading-4">方案三</h2>  <p>    第 3 中方案的思路和第 2 种是一样的，它介于方案 1 与方案 2    之间。这种方案要修改 Table 组件代码，但是用例与方案 1 完全一致。  </p>  <p>    在方案 2 中，我们是通过修改用例使用 slot-scope 的，也就是说 Table    组件本身没有支持 slot-scope，是我们“强加”上去的，如果把强加的部分，集成到    Table 内，那对使用者就很友好了，同时也避免了初始化报错，不得不把 data 写在    mounted 的问题。  </p>  <p>    保持方案 1 的用例不变，修改    <code>src/components/table-render</code> 中的代码。为了同时兼容 Render 与    slot-scope，我们在 <code>table-render</code> 下新建一个 slot.js 的文件：  </p>  <pre><code lang="js" class=""><span>// src/components/table-render/slot.js</span><span>export</span> <span>default</span> &#123;  <span>functional</span>: <span>true</span>,  <span>inject</span>: [<span>'tableRoot'</span>],  <span>props</span>: &#123;    <span>row</span>: <span>Object</span>,    <span>column</span>: <span>Object</span>,    <span>index</span>: <span>Number</span>  &#125;,  <span>render</span>: <span>(<span>h, ctx</span>) =&gt;</span> &#123;    <span>return</span> h(<span>'div'</span>, ctx.injections.tableRoot.$scopedSlots[ctx.props.column.slot](&#123;      <span>row</span>: ctx.props.row,      <span>column</span>: ctx.props.column,      <span>index</span>: ctx.props.index    &#125;));  &#125;&#125;;</code></pre>  <p>    它仍然是一个 Functional Render，使用 <code>inject</code> 注入了父级组件    table.vue（下文改写） 中提供的实例 <code>tableRoot</code>。在 render    里，也是通过方案 2 中使用 <code>$scopedSlots</code> 定义的    slot，不过这是在组件级别定义，对用户来说是透明的，只要按方案 1    的用例来写就可以了。  </p>  <p>table.vue 也要做一点修改：</p>  <pre><code lang="html" class=""><span>&lt;!-- src/components/table-slot/table.vue 的改写，部分代码省略 --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>table</span>&gt;</span>    <span>&lt;<span>thead</span>&gt;</span>      <span>&lt;<span>tr</span>&gt;</span>        <span>&lt;<span>th</span> <span>v-for</span>=<span>"col in columns"</span>&gt;</span>&#123;&#123; col.title &#125;&#125;<span>&lt;/<span>th</span>&gt;</span>      <span>&lt;/<span>tr</span>&gt;</span>    <span>&lt;/<span>thead</span>&gt;</span>    <span>&lt;<span>tbody</span>&gt;</span>      <span>&lt;<span>tr</span> <span>v-for</span>=<span>"(row, rowIndex) in data"</span>&gt;</span>        <span>&lt;<span>td</span> <span>v-for</span>=<span>"col in columns"</span>&gt;</span>          <span>&lt;<span>template</span> <span>v-if</span>=<span>"'render' in col"</span>&gt;</span>            <span>&lt;<span>Render</span> <span>:row</span>=<span>"row"</span> <span>:column</span>=<span>"col"</span> <span>:index</span>=<span>"rowIndex"</span> <span>:render</span>=<span>"col.render"</span>&gt;</span><span>&lt;/<span>Render</span>&gt;</span>          <span>&lt;/<span>template</span>&gt;</span>          <span>&lt;<span>template</span> <span>v-else-if</span>=<span>"'slot' in col"</span>&gt;</span>            <span>&lt;<span>slot-scope</span> <span>:row</span>=<span>"row"</span> <span>:column</span>=<span>"col"</span> <span>:index</span>=<span>"rowIndex"</span>&gt;</span><span>&lt;/<span>slot-scope</span>&gt;</span>          <span>&lt;/<span>template</span>&gt;</span>          <span>&lt;<span>template</span> <span>v-else</span>&gt;</span>&#123;&#123; row[col.key] &#125;&#125;<span>&lt;/<span>template</span>&gt;</span>        <span>&lt;/<span>td</span>&gt;</span>      <span>&lt;/<span>tr</span>&gt;</span>    <span>&lt;/<span>tbody</span>&gt;</span>  <span>&lt;/<span>table</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> Render <span>from</span> <span>'./render.js'</span>;  <span>import</span> SlotScope <span>from</span> <span>'./slot.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; Render, SlotScope &#125;,    provide () &#123;      <span>return</span> &#123;        <span>tableRoot</span>: <span>this</span>      &#125;;    &#125;,    <span>props</span>: &#123;      <span>columns</span>: &#123;        <span>type</span>: <span>Array</span>,        <span>default</span> () &#123;          <span>return</span> [];        &#125;      &#125;,      <span>data</span>: &#123;        <span>type</span>: <span>Array</span>,        <span>default</span> () &#123;          <span>return</span> [];        &#125;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    因为 slot-scope 模板是写在 table.vue 中的（对使用者来说，相当于写在组件    <code>&lt;table-slot&gt;&lt;/table-slot&gt;</code> 之间），所以在 table.vue    中使用 provide 向下提供了 Table 的实例，这样在 slot.js 中就可以通过 inject    访问到它，继而通过 <code>$scopedSlots</code> 获取到 slot。需要注意的是，在    Functional Render 是没有 this 上下文的，都是通过 h 的第二个参数临时上下文    ctx 来访问 prop、inject 等的。  </p>  <p>    方案 3 也是推荐使用的，当 Table 的功能足够复杂，层级会嵌套的比较深，那时方案    1 的 slot 就不会定义在第一级组件中，中间可能会隔许多组件，slot    就要一层层中转，相比在任何地方都能直接使用的 Render    就要麻烦了。所以，如果你的组件层级简单，推荐用第一种方案；如果你的组件已经成型（某    API 基于 Render 函数），但一时间不方便支持    slot-scope，而使用者又想用，那就选方案 2；如果你的组件已经成型（某 API 基于    Render 函数），但组件层级复杂，要按方案 1 那样支持 slot-scope    可能改动较大，还有可能带来新的 bug，那就用方案    3，它不会破坏原有的任何内容，但会额外支持 slot-scope 用法，关键是改动简单。  </p>  <h2 data-id="heading-5">结语</h2>  <p>    理论上，绝大多数能用 Render 的地方，都可以用    slot-scope。对于极客来说，喜欢挑战各种新奇的写法，所以会在 Vue.js 中大量使用    Render 函数、JSX 甚至 TS；而对于求稳的开发者来说，常规的    template、slot、slot-scope    写法会是好的选择。如果非要选一种，那要从你团队的整体情况来定，如果团队大部分是写后端为主的，那可能更倾向于    TS；如果写过 React，或许 JSX    是不错的选择；如果实在不知道选什么，那就求稳吧！  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-12】实战 5：可用 Render 自定义列的表格组件——Table</title>
      <link href="/0bbd4b69acd6.html"/>
      <url>/0bbd4b69acd6.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    表格组件 Table    是中后台产品中最常用的组件之一，用于展示大量结构化的数据。大多数组件库都提供了表格组件，比如    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fwww.iviewui.com%2Fcomponents%2Ftable"      title="https://www.iviewui.com/components/table"      ref="nofollow noopener noreferrer"      >iView</a    >，功能也是非常强大。正规的表格，是由    <code>&lt;table&gt;</code    >、<code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;th&gt;</code>、<code      >&lt;td&gt;</code    >    这些标签组成，一般分为表头 <strong>columns</strong> 和数据    <strong>data</strong>。本小节就来开发一个最基本的表格组件 Table，它支持使用    Render 函数来自定义某一列。  </p>  <h2 data-id="heading-1">分析</h2>  <p>如果表格只是呈现数据，是比较简单的，比如下图：</p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/15/16716c44a664e7f1~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    因为结构简单，我们甚至不需要组件，直接使用标准的 table    系列标签就可以。但有的时候，除了呈现数据，也会带有一些交互，比如有一列操作栏，可以编辑整行的数据：  </p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/15/16716c54fc74a1a5~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    写一个个的 table    系列标签是很麻烦并且重复的，而组件的好处就是省去这些基础的工作，我们直接给    Table 组件传递列的配置 <strong>columns</strong> 和行数据    <strong>data</strong>，其余的都交给 Table 组件做了。  </p>  <p>    开发 Table 组件前，有必要先了解上文说到的一系列 table 标签。一般的 table    结构是这样的：  </p>  <pre><code lang="html" class=""><span>&lt;<span>table</span>&gt;</span>  <span>&lt;<span>thead</span>&gt;</span>    <span>&lt;<span>tr</span>&gt;</span>      <span>&lt;<span>th</span>&gt;</span>姓名<span>&lt;/<span>th</span>&gt;</span>      <span>&lt;<span>th</span>&gt;</span>年龄<span>&lt;/<span>th</span>&gt;</span>    <span>&lt;/<span>tr</span>&gt;</span>  <span>&lt;/<span>thead</span>&gt;</span>  <span>&lt;<span>tbody</span>&gt;</span>    <span>&lt;<span>tr</span>&gt;</span>      <span>&lt;<span>td</span>&gt;</span>王小明<span>&lt;/<span>td</span>&gt;</span>      <span>&lt;<span>td</span>&gt;</span>18<span>&lt;/<span>td</span>&gt;</span>    <span>&lt;/<span>tr</span>&gt;</span>    <span>&lt;<span>tr</span>&gt;</span>      <span>&lt;<span>td</span>&gt;</span>张小刚<span>&lt;/<span>td</span>&gt;</span>      <span>&lt;<span>td</span>&gt;</span>25<span>&lt;/<span>td</span>&gt;</span>    <span>&lt;/<span>tr</span>&gt;</span>  <span>&lt;/<span>tbody</span>&gt;</span><span>&lt;/<span>table</span>&gt;</span></code></pre>  <ul>    <li>table：定义 HTML 表格；</li>    <li>thead：定义表头；</li>    <li>tbody：定义表格主体；</li>    <li>tr：定义表格行；</li>    <li>th：定义表头单元格；</li>    <li>td：定义表格单元。</li>  </ul>  <p>    标准的表格系列标签，跟 div+css    实现是有很大区别的，比如表格在做单元格合并时，有提供原生属性，用 div    就很麻烦了；再比如渲染原理上也有一定的区别，table    会在内容全部下载完后加载。详细的介绍可以阅读文末的扩展阅读 1。  </p>  <p>    知道了表格的结构，再来分析如何定制 API。可以看到，表格分为了两部分，表头    thead 和数据 tbody，那 props 也定义两个：  </p>  <ul>    <li>      <p>        columns：列配置，格式为数组，其中每一列 column        是一个对象，用来描述这一列的信息，它的具体说明如下：      </p>      <ul>        <li>title：列头显示文字；</li>        <li>key：对应列内容的字段名；</li>        <li>          render：自定义渲染列，使用 Vue 的 Render          函数，不定义则直接显示为文本。        </li>      </ul>      <p>比如：</p>      <pre><code lang="js" class="">[  &#123;    <span>title</span>: <span>'姓名'</span>,    <span>key</span>: <span>'name'</span>  &#125;,  &#123;    <span>title</span>: <span>'年龄'</span>,    <span>key</span>: <span>'age'</span>  &#125;]</code></pre>    </li>    <li>      <p>        data：显示的结构化数据，格式为数组，其中每一个对象，就是一行的数据，比如：      </p>      <pre><code lang="js" class="">[  &#123;    <span>name</span>: <span>'王小明'</span>,    <span>age</span>: <span>18</span>  &#125;,  &#123;    <span>name</span>: <span>'张小刚'</span>,    <span>age</span>: <span>25</span>  &#125;]</code></pre>    </li>  </ul>  <p>    column 定义的 <code>key</code> 值，与 data    是一一对应的，这是一种常见的数据接口定义规则，也是 Vue.js    组件中，用数据驱动而不是 slot 驱动的经典案例。  </p>  <p>    为什么 Table 组件要用数据驱动，而不是 slot 驱动呢？slot    在很多组件中的确很好用，不过 Table    组件包含了大量的基础表格标签，如果都交给使用者由 slot    承载的话，开发成本不亚于自己实现一个 table    了，而数据驱动就简单的多，数据一般从服务端获取后就可以直接使用（或简单处理），使用者主要来定义每列的配置    <strong>columns</strong> 就可以了。  </p>  <p>    因为不确定使用者要对某一列做什么交互，所以不能在 Table    内来实现自定义列。使用 Render    函数可以将复杂的自定义列模板的工作交给使用者来配置，Table 内只用一个    Functional Render 做中转。  </p>  <h2 data-id="heading-2">完成基础表格</h2>  <p>我们先来完成一个基础的表格组件，之后再接入 Render 来配置自定义列。</p>  <p>    在 <code>src/components</code> 目录下新建    <code>table-render</code> 目录，并创建 <code>table.vue</code> 文件：  </p>  <pre><code lang="html" class=""><span>&lt;!-- src/components/table-render/table.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>table</span>&gt;</span>    <span>&lt;<span>thead</span>&gt;</span>      <span>&lt;<span>tr</span>&gt;</span>        <span>&lt;<span>th</span> <span>v-for</span>=<span>"col in columns"</span>&gt;</span>&#123;&#123; col.title &#125;&#125;<span>&lt;/<span>th</span>&gt;</span>      <span>&lt;/<span>tr</span>&gt;</span>    <span>&lt;/<span>thead</span>&gt;</span>    <span>&lt;<span>tbody</span>&gt;</span>      <span>&lt;<span>tr</span> <span>v-for</span>=<span>"row in data"</span>&gt;</span>        <span>&lt;<span>td</span> <span>v-for</span>=<span>"col in columns"</span>&gt;</span>&#123;&#123; row[col.key] &#125;&#125;<span>&lt;/<span>td</span>&gt;</span>      <span>&lt;/<span>tr</span>&gt;</span>    <span>&lt;/<span>tbody</span>&gt;</span>  <span>&lt;/<span>table</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>props</span>: &#123;      <span>columns</span>: &#123;        <span>type</span>: <span>Array</span>,        <span>default</span> () &#123;          <span>return</span> [];        &#125;      &#125;,      <span>data</span>: &#123;        <span>type</span>: <span>Array</span>,        <span>default</span> () &#123;          <span>return</span> [];        &#125;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span><span>&lt;<span>style</span>&gt;</span><span>  <span>table</span>&#123;    <span>width</span>: <span>100%</span>;    <span>border-collapse</span>: collapse;    <span>border-spacing</span>: <span>0</span>;    <span>empty-cells</span>: show;    <span>border</span>: <span>1px</span> solid <span>#e9e9e9</span>;  &#125;  <span>table</span> <span>th</span>&#123;    <span>background</span>: <span>#f7f7f7</span>;    <span>color</span>: <span>#5c6b77</span>;    <span>font-weight</span>: <span>600</span>;    <span>white-space</span>: nowrap;  &#125;  <span>table</span> <span>td</span>, <span>table</span> <span>th</span>&#123;    <span>padding</span>: <span>8px</span> <span>16px</span>;    <span>border</span>: <span>1px</span> solid <span>#e9e9e9</span>;    <span>text-align</span>: left;  &#125;</span><span>&lt;/<span>style</span>&gt;</span></code></pre>  <blockquote>    <p>      props 中的 columns 和 data 的格式都是数组，这里要注意的是，如果 props      的类型是<strong>对象</strong>或<strong>数组</strong>，它的默认值必须从一个工厂函数获取。    </p>  </blockquote>  <p>    tbody 内嵌套使用了两次 <code>v-for</code>，外层循环数据 data，内层循环列    columns，这样就填充了每个单元格。  </p>  <p>    新建路由 <code>table-render</code>，并在    <code>src/views/</code> 目录下新建页面 <code>table-render.vue</code>：  </p>  <pre><code lang="html" class=""><span>&lt;!-- src/views/table-render.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>table-render</span> <span>:columns</span>=<span>"columns"</span> <span>:data</span>=<span>"data"</span>&gt;</span><span>&lt;/<span>table-render</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> TableRender <span>from</span> <span>'../components/table-render/table.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; TableRender &#125;,    data () &#123;      <span>return</span> &#123;        <span>columns</span>: [          &#123;            <span>title</span>: <span>'姓名'</span>,            <span>key</span>: <span>'name'</span>          &#125;,          &#123;            <span>title</span>: <span>'年龄'</span>,            <span>key</span>: <span>'age'</span>          &#125;,          &#123;            <span>title</span>: <span>'出生日期'</span>,            <span>key</span>: <span>'birthday'</span>          &#125;,          &#123;            <span>title</span>: <span>'地址'</span>,            <span>key</span>: <span>'address'</span>          &#125;,          &#123;            <span>title</span>: <span>'操作'</span>          &#125;        ],        <span>data</span>: [          &#123;            <span>name</span>: <span>'王小明'</span>,            <span>age</span>: <span>18</span>,            <span>birthday</span>: <span>'919526400000'</span>,            <span>address</span>: <span>'北京市朝阳区芍药居'</span>          &#125;,          &#123;            <span>name</span>: <span>'张小刚'</span>,            <span>age</span>: <span>25</span>,            <span>birthday</span>: <span>'696096000000'</span>,            <span>address</span>: <span>'北京市海淀区西二旗'</span>          &#125;,          &#123;            <span>name</span>: <span>'李小红'</span>,            <span>age</span>: <span>30</span>,            <span>birthday</span>: <span>'563472000000'</span>,            <span>address</span>: <span>'上海市浦东新区世纪大道'</span>          &#125;,          &#123;            <span>name</span>: <span>'周小伟'</span>,            <span>age</span>: <span>26</span>,            <span>birthday</span>: <span>'687024000000'</span>,            <span>address</span>: <span>'深圳市南山区深南大道'</span>          &#125;        ]      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>运行后的效果如下图：</p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/15/16716c5b99ef76ac~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    表格已经能渲染出来了，但现在的单元格只是将 data    当作纯文本来显示，所以出生日期列显示为时间戳，因为服务端对日期有时会保存为时间戳格式。如果要显示正常的日期（如1991-5-14），目前可以另写一个计算属性（computed），手动将时间戳换算为标准日期格式后，来动态修改    data 里的    <code>birthday</code>    字段。这样做对于出生日期这样的数据还好，但对于<strong>操作</strong>这一列就不可取了，因为它带有业务逻辑，点击<strong>编辑</strong>按钮，是可以对当前行数据进行修改的。这时就要用到    Render 函数。  </p>  <h2 data-id="heading-3">使用 Render 自定义列模板</h2>  <p>    上一节我们已经介绍过函数式组件 Functional Render    的用法，它没有状态和上下文，主要用于中转一个组件，用在本节的 Table    组件非常合适。  </p>  <p>    先在 <code>src/components/table-render</code> 目录下新建    <code>render.js</code> 文件：  </p>  <pre><code lang="js" class=""><span>// src/components/table-render/render.js</span><span>export</span> <span>default</span> &#123;  <span>functional</span>: <span>true</span>,  <span>props</span>: &#123;    <span>row</span>: <span>Object</span>,    <span>column</span>: <span>Object</span>,    <span>index</span>: <span>Number</span>,    <span>render</span>: <span>Function</span>  &#125;,  <span>render</span>: <span>(<span>h, ctx</span>) =&gt;</span> &#123;    <span>const</span> params = &#123;      <span>row</span>: ctx.props.row,      <span>column</span>: ctx.props.column,      <span>index</span>: ctx.props.index    &#125;;    <span>return</span> ctx.props.render(h, params);  &#125;&#125;;</code></pre>  <p>render.js 定义了 4 个 props：</p>  <ul>    <li><strong>row</strong>：当前行的数据；</li>    <li><strong>column</strong>：当前列的数据；</li>    <li><strong>index</strong>：当前是第几行；</li>    <li><strong>render</strong>：具体的 render 函数内容。</li>  </ul>  <p>    这里的 <code>render</code> 选项并没有渲染任何节点，而是直接返回 props    中定义的 render，并将 h 和当前的行、列、序号作为参数传递出去。然后在    table.vue 里就可以使用 render.js 组件：  </p>  <pre><code lang="html" class=""><span>&lt;!-- table.vue，部分代码省略 --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>table</span>&gt;</span>    <span>&lt;<span>thead</span>&gt;</span>      <span>&lt;<span>tr</span>&gt;</span>        <span>&lt;<span>th</span> <span>v-for</span>=<span>"col in columns"</span>&gt;</span>&#123;&#123; col.title &#125;&#125;<span>&lt;/<span>th</span>&gt;</span>      <span>&lt;/<span>tr</span>&gt;</span>    <span>&lt;/<span>thead</span>&gt;</span>    <span>&lt;<span>tbody</span>&gt;</span>      <span>&lt;<span>tr</span> <span>v-for</span>=<span>"(row, rowIndex) in data"</span>&gt;</span>        <span>&lt;<span>td</span> <span>v-for</span>=<span>"col in columns"</span>&gt;</span>          <span>&lt;<span>template</span> <span>v-if</span>=<span>"'render' in col"</span>&gt;</span>            <span>&lt;<span>Render</span> <span>:row</span>=<span>"row"</span> <span>:column</span>=<span>"col"</span> <span>:index</span>=<span>"rowIndex"</span> <span>:render</span>=<span>"col.render"</span>&gt;</span><span>&lt;/<span>Render</span>&gt;</span>          <span>&lt;/<span>template</span>&gt;</span>          <span>&lt;<span>template</span> <span>v-else</span>&gt;</span>&#123;&#123; row[col.key] &#125;&#125;<span>&lt;/<span>template</span>&gt;</span>        <span>&lt;/<span>td</span>&gt;</span>      <span>&lt;/<span>tr</span>&gt;</span>    <span>&lt;/<span>tbody</span>&gt;</span>  <span>&lt;/<span>table</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> Render <span>from</span> <span>'./render.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; Render &#125;,    <span>props</span>: &#123;      <span>columns</span>: &#123;        <span>type</span>: <span>Array</span>,        <span>default</span> () &#123;          <span>return</span> [];        &#125;      &#125;,      <span>data</span>: &#123;        <span>type</span>: <span>Array</span>,        <span>default</span> () &#123;          <span>return</span> [];        &#125;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    如果 columns 中的某一列配置了 render 字段，那就通过 render.js    完成自定义模板，否则以字符串形式渲染。比如对出生日期这列显示为标准的日期格式，可以这样定义    column：  </p>  <pre><code lang="js" class=""><span>// src/views/table-render.vie，部分代码省略</span><span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>columns</span>: [        <span>// ...</span>        &#123;          <span>title</span>: <span>'出生日期'</span>,          <span>render</span>: <span>(<span>h, &#123; row, column, index &#125;</span>) =&gt;</span> &#123;            <span>const</span> date = <span>new</span> <span>Date</span>(<span>parseInt</span>(row.birthday));            <span>const</span> year = date.getFullYear();            <span>const</span> month = date.getMonth() + <span>1</span>;            <span>const</span> day = date.getDate();                        <span>const</span> birthday = <span>`<span>$&#123;year&#125;</span>-<span>$&#123;month&#125;</span>-<span>$&#123;day&#125;</span>`</span>;                        <span>return</span> h(<span>'span'</span>, birthday);          &#125;        &#125;      ]    &#125;  &#125;&#125;</code></pre>  <p>效果如下图：</p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/15/16716c604e151fa0~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    需要注意的是，columns 里定义的 render，是有两个参数的，第一个是    createElement（即 h），第二个是从 render.js    传过来的对象，它包含了当前行数据（<code>row</code>）、当前列配置（<code>column</code>）、当前是第几行（<code>index</code>），使用者可以基于这    3    个参数得到任意想要的结果。由于是自定义列了，显示什么都是使用者决定的，因此在使用了    render 的 column 里可以不用写字段 <code>key</code> 。  </p>  <p>    如果你真正理解了，应该知道 columns 里定义的 render 字段，它仅仅是名字叫    render 的一个普通函数，并非 Vue.js 实例的    <em>render</em> 选项，只是我们恰巧把它叫做 render    而已，如果愿意，也可以改为其它名字，比如 renderRow。真正的 Render    函数只有一个地方，那就是 render.js 中的 render 选项，只是它代理了 column    中的 render。这里有点绕，理清这个关系，就对 Functional Render 彻底理解了。  </p>  <h2 data-id="heading-4">修改当前行</h2>  <p>    有了 render，Table 组件就已经完成了，剩余工作都是使用者来配置 columns    完成各种复杂的业务逻辑。本例来介绍最常见的表格中对整行数据编辑的功能。  </p>  <p>    <strong>操作</strong    >这一列，默认是一个<strong>修改</strong>按钮，点击后，变为<strong>保存</strong>和<strong>取消</strong>两个按钮，同时本行其它各列都变为了输入框，并且初始值就是刚才单元格的数据。变为输入框后，可以任意修改单元格数据，点击保存按钮保存整行数据，点击取消按钮，还原至修改前的数据。  </p>  <p>    当进入编辑状态时，每一列的输入框都要有一个临时的数据使用    <code>v-model</code> 双向绑定来响应修改，所以在 data 里再声明四个数据：  </p>  <pre><code lang="js" class=""><span>// table-render.vue，部分代码省略</span>&#123;  data () &#123;    <span>return</span> &#123;      <span>// ...</span>      editName: <span>''</span>,  <span>// 第一列输入框</span>      editAge: <span>''</span>,  <span>// 第二列输入框</span>      editBirthday: <span>''</span>,  <span>// 第三列输入框</span>      editAddress: <span>''</span>,  <span>// 第四列输入框</span>    &#125;  &#125;&#125;</code></pre>  <p>    同时还要知道是在修改第几行的数据，所以再加一个数据标识当前正在修改的行序号（从    0 开始）：  </p>  <pre><code lang="js" class=""><span>// table-render.vue，部分代码省略</span>&#123;  data () &#123;    <span>return</span> &#123;      <span>// ...</span>      editIndex: <span>-1</span>,  <span>// 当前聚焦的输入框的行数</span>    &#125;  &#125;&#125;</code></pre>  <p>    <code>editIndex</code> 默认给了    -1，也就是一个不存在的行号，当点击修改按钮时，再将它置为正确的行号。我们先定义操作列的    render：  </p>  <pre><code lang="js" class=""><span>// table-render.vue，部分代码省略</span>&#123;  data () &#123;    <span>columns</span>: [      <span>// ...</span>      &#123;        <span>title</span>: <span>'操作'</span>,        <span>render</span>: <span>(<span>h, &#123; row, index &#125;</span>) =&gt;</span> &#123;          <span>// 如果当前行是编辑状态，则渲染两个按钮</span>          <span>if</span> (<span>this</span>.editIndex === index) &#123;            <span>return</span> [              h(<span>'button'</span>, &#123;                <span>on</span>: &#123;                  <span>click</span>: <span><span>()</span> =&gt;</span> &#123;                    <span>this</span>.data[index].name = <span>this</span>.editName;                    <span>this</span>.data[index].age = <span>this</span>.editAge;                    <span>this</span>.data[index].birthday = <span>this</span>.editBirthday;                    <span>this</span>.data[index].address = <span>this</span>.editAddress;                    <span>this</span>.editIndex = <span>-1</span>;                  &#125;                &#125;              &#125;, <span>'保存'</span>),              h(<span>'button'</span>, &#123;                <span>style</span>: &#123;                  <span>marginLeft</span>: <span>'6px'</span>                &#125;,                <span>on</span>: &#123;                  <span>click</span>: <span><span>()</span> =&gt;</span> &#123;                    <span>this</span>.editIndex = <span>-1</span>;                  &#125;                &#125;              &#125;, <span>'取消'</span>)            ];          &#125; <span>else</span> &#123;  <span>// 当前行是默认状态，渲染为一个按钮</span>            <span>return</span> h(<span>'button'</span>, &#123;              <span>on</span>: &#123;                <span>click</span>: <span><span>()</span> =&gt;</span> &#123;                  <span>this</span>.editName = row.name;                  <span>this</span>.editAge = row.age;                  <span>this</span>.editAddress = row.address;                  <span>this</span>.editBirthday = row.birthday;                  <span>this</span>.editIndex = index;                &#125;              &#125;            &#125;, <span>'修改'</span>);          &#125;        &#125;      &#125;    ]  &#125;&#125;</code></pre>  <p>    render 里的 <code>if / else</code> 可以先看    else，因为默认是非编辑状态，也就是说 <code>editIndex</code> 还是    -1。当点击<strong>修改</strong>按钮时，把 render 中第二个参数    <code>&#123; row &#125;</code> 中的各列数据赋值给了之前在 data 中声明的 4    个数据，这样做是因为之后点击<strong>取消</strong>按钮时，editName    等值已经修改了，还没有还原，所以在开启编辑状态的同时，初始化各输入框的值（当然也可以在取消时重置）。最后再把    <code>editIndex</code> 置为了对应的行序号 <code>&#123; index &#125;</code>，此时    render 的 <code>if</code> 条件    <code>this.editIndex === index</code>    为真，编辑列变成了两个按钮：保存和取消。点击保存，直接修改表格源数据 data    中对应的各字段值，并将 editIndex 置为    -1，退出编辑状态；点击取消，不保存源数据，直接退出编辑状态。  </p>  <p>除编辑列，其它各数据列都有两种状态：</p>  <ol>    <li>当 editIndex 等于当前行号 index 时，呈现输入框状态；</li>    <li>当 editIndex 不等于当前行号 index 时，呈现默认数据。</li>  </ol>  <p>以姓名为例：</p>  <pre><code lang="js" class=""><span>// table-render.vue，部分代码省略</span>&#123;  data () &#123;    <span>columns</span>: [      <span>// ...</span>      &#123;        <span>title</span>: <span>'姓名'</span>,        <span>key</span>: <span>'name'</span>,        <span>render</span>: <span>(<span>h, &#123; row, index &#125;</span>) =&gt;</span> &#123;          <span>let</span> edit;          <span>// 当前行为聚焦行时</span>          <span>if</span> (<span>this</span>.editIndex === index) &#123;            edit = [h(<span>'input'</span>, &#123;              <span>domProps</span>: &#123;                <span>value</span>: row.name              &#125;,              <span>on</span>: &#123;                <span>input</span>: <span>(<span>event</span>) =&gt;</span> &#123;                  <span>this</span>.editName = event.target.value;                &#125;              &#125;            &#125;)];          &#125; <span>else</span> &#123;            edit = row.name;          &#125;          <span>return</span> h(<span>'div'</span>, [            edit          ]);        &#125;      &#125;    ]  &#125;&#125;</code></pre>  <p>    变量 <code>edit</code> 根据 editIndex 呈现不同的节点，还是先看    else，直接显示了对应字段的数据。在聚焦时（this.editIndex ===    index），渲染一个 <code>input</code> 输入框，初始值 <code>value</code> 通过    render 的 <code>domProps</code> 绑定了 <code>row.name</code>（这里也可绑定    editName），并监听了 input 事件，将输入的内容，实时缓存在数据    <code>editName</code> 中，供保存时使用。事实上，这里绑定的 value 和事件    input 就是语法糖 <code>v-model</code> 在 Render 函数中的写法，在 template    中，经常写作 <code>&lt;input v-model="editName"&gt;</code>。  </p>  <p>其它列与姓名类似，只是对于的字段不同：</p>  <pre><code lang="js" class=""><span>// table-render.vue，部分代码省略</span>&#123;  data () &#123;    <span>return</span> &#123;      <span>columns</span>: [        <span>// ...</span>        &#123;          <span>title</span>: <span>'年龄'</span>,          <span>key</span>: <span>'age'</span>,          <span>render</span>: <span>(<span>h, &#123; row, index &#125;</span>) =&gt;</span> &#123;            <span>let</span> edit;            <span>// 当前行为聚焦行时</span>            <span>if</span> (<span>this</span>.editIndex === index) &#123;              edit = [h(<span>'input'</span>, &#123;                <span>domProps</span>: &#123;                  <span>value</span>: row.age                &#125;,                <span>on</span>: &#123;                  <span>input</span>: <span>(<span>event</span>) =&gt;</span> &#123;                    <span>this</span>.editAge = event.target.value;                  &#125;                &#125;              &#125;)];            &#125; <span>else</span> &#123;              edit = row.age;            &#125;            <span>return</span> h(<span>'div'</span>, [              edit            ]);          &#125;        &#125;,        &#123;          <span>title</span>: <span>'出生日期'</span>,          <span>render</span>: <span>(<span>h, &#123; row, index &#125;</span>) =&gt;</span> &#123;            <span>let</span> edit;            <span>// 当前行为聚焦行时</span>            <span>if</span> (<span>this</span>.editIndex === index) &#123;              edit = [h(<span>'input'</span>, &#123;                <span>domProps</span>: &#123;                  <span>value</span>: row.birthday                &#125;,                <span>on</span>: &#123;                  <span>input</span>: <span>(<span>event</span>) =&gt;</span> &#123;                    <span>this</span>.editBirthday = event.target.value;                  &#125;                &#125;              &#125;)];            &#125; <span>else</span> &#123;              <span>const</span> date = <span>new</span> <span>Date</span>(<span>parseInt</span>(row.birthday));              <span>const</span> year = date.getFullYear();              <span>const</span> month = date.getMonth() + <span>1</span>;              <span>const</span> day = date.getDate();              edit = <span>`<span>$&#123;year&#125;</span>-<span>$&#123;month&#125;</span>-<span>$&#123;day&#125;</span>`</span>;            &#125;            <span>return</span> h(<span>'div'</span>, [              edit            ]);          &#125;        &#125;,        &#123;          <span>title</span>: <span>'地址'</span>,          <span>key</span>: <span>'address'</span>,          <span>render</span>: <span>(<span>h, &#123; row, index &#125;</span>) =&gt;</span> &#123;            <span>let</span> edit;            <span>// 当前行为聚焦行时</span>            <span>if</span> (<span>this</span>.editIndex === index) &#123;              edit = [h(<span>'input'</span>, &#123;                <span>domProps</span>: &#123;                  <span>value</span>: row.address                &#125;,                <span>on</span>: &#123;                  <span>input</span>: <span>(<span>event</span>) =&gt;</span> &#123;                    <span>this</span>.editAddress = event.target.value;                  &#125;                &#125;              &#125;)];            &#125; <span>else</span> &#123;              edit = row.address;            &#125;            <span>return</span> h(<span>'div'</span>, [              edit            ]);          &#125;        &#125;,      ]    &#125;  &#125;&#125;</code></pre>  <blockquote>    <p>      完整的代码见：<a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ficarusion%2Fvue-component-book%2Fblob%2Fmaster%2Fsrc%2Fviews%2Ftable-render.vue"        title="https://github.com/icarusion/vue-component-book/blob/master/src/views/table-render.vue"        ref="nofollow noopener noreferrer"        >github.com/icarusion/v…</a      >    </p>  </blockquote>  <p>这样，可编辑行的表格示例就完成了：</p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/15/16716c54fc74a1a5~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <h2 data-id="heading-5">结语</h2>  <p>    本示例的 Table 组件，只展现了表格最核心的功能——自定义列模板，一个完整的    Table    组件功能要复杂的多，比如排序、筛选、列固定、表头固定、表头嵌套等。万事开头难，打好了    Table 的地基，后面的功能可以持续开发。  </p>  <p>    事实上，很多 Vue.js 的开发难题，都可以用 Render 函数来解决，它比 template    模板更灵活，可以完全发挥 JavaScript 的编程能力，因此很多 JS    的开发思想都可以借鉴。如果你习惯 JSX，那完全可以抛弃传统的 template 写法。  </p>  <p>    Render 函数虽好，但也是有弊端的，通过上面的示例可以发现，写出来的 VNode    对象是很难读的，维护性也比 template 差。下一节，我们将改写 Table    组件，用另一种思想来实现同样的功能。  </p>  <h2 data-id="heading-6">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cnblogs.com%2Flovebear%2Farchive%2F2012%2F04%2F18%2F2456081.html"        title="https://www.cnblogs.com/lovebear/archive/2012/04/18/2456081.html"        ref="nofollow noopener noreferrer"        >Div 和 Table 的区别</a      >    </li>  </ul></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-11】更灵活的组件：Render 函数与 Functional Render</title>
      <link href="/04195784c30e.html"/>
      <url>/04195784c30e.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    Vue.js 2.x 与 Vue.js 1.x 最大的区别就在于 2.x 使用了 Virtual DOM（虚拟    DOM）来更新 DOM 节点，提升渲染性能。  </p>  <p>    一般来说，我们写 Vue.js 组件，模板都是写在    <code>&lt;template&gt;</code> 内的，但它并不是最终呈现的内容，template    只是一种对开发者友好的语法，能够一眼看到 DOM 节点，容易维护，在 Vue.js    编译阶段，会解析为 Virtual DOM。  </p>  <p>    与 DOM 操作相比，Virtual DOM 是基于 JavaScript    计算的，所以开销会小很多。下图演示了 Virtual DOM 运行的过程：  </p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/13/1670bc4c26b9c667~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>正常的 DOM 节点在 HTML 中是这样的：</p>  <pre><code lang="html" class=""><span>&lt;<span>div</span> <span>id</span>=<span>"main"</span>&gt;</span>  <span>&lt;<span>p</span>&gt;</span>文本内容<span>&lt;/<span>p</span>&gt;</span>  <span>&lt;<span>p</span>&gt;</span>文本内容<span>&lt;/<span>p</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span></code></pre>  <p>用 Virtual DOM 创建的 JavaScript 对象一般会是这样的：</p>  <pre><code lang="js" class=""><span>const</span> vNode = &#123;  <span>tag</span>: <span>'div'</span>,  <span>attributes</span>: &#123;    <span>id</span>: <span>'main'</span>  &#125;,  <span>children</span>: [    <span>// p 节点</span>  ]&#125;</code></pre>  <p>vNode 对象通过一些特定的选项描述了真实的 DOM 结构。</p>  <p>    在 Vue.js 中，对于大部分场景，使用 template 足以应付，但如果想完全发挥    JavaScript 的编程能力，或在一些特定场景下（后文介绍），需要使用 Vue.js 的    Render 函数。  </p>  <h2 data-id="heading-1">Render 函数</h2>  <p>    正如上文介绍的 Virtual DOM 示例一样，Vue.js 的 Render    函数也是类似的语法，需要使用一些特定的选项，将 template 的内容改写成一个    JavaScript 对象。  </p>  <p>    对于初级前端工程师，或想快速建站的需求，直接使用 Render 函数开发 Vue.js    组件是要比 template 困难的，原因在于 Render 函数返回的是一个 JS    对象，没有传统 DOM 的层级关系，配合上 if、else、for 等语句，将节点拆分成不同    JS 对象再组装，如果模板复杂，那一个 Render    函数是难读且难维护的。所以，绝大部分组件开发和业务开发，我们直接使用    template 语法就可以了，并不需要特意使用 Render    函数，那样只会增加负担，同时也放弃了 Vue.js 最大的优势（React 无 template    语法）。  </p>  <p>    很多学习 Vue.js 的开发者在遇到 Render    函数时都有点”躲避“，或直接放弃这部分，这并没有问题，因为不用 Render    函数，照样可以写出优秀的 Vue.js 程序。不过，Render    函数并没有想象中的那么复杂，只是配置项特别多，一时难以记住，但归根到底，Render    函数只有 3 个参数。  </p>  <p>来看一组 template 和 Render 写法的对照：</p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span> <span>id</span>=<span>"main"</span> <span>class</span>=<span>"container"</span> <span>style</span>=<span>"color: red"</span>&gt;</span>    <span>&lt;<span>p</span> <span>v-if</span>=<span>"show"</span>&gt;</span>内容 1<span>&lt;/<span>p</span>&gt;</span>    <span>&lt;<span>p</span> <span>v-else</span>&gt;</span>内容 2<span>&lt;/<span>p</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    data () &#123;      <span>return</span> &#123;        <span>show</span>: <span>false</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="js" class=""><span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>show</span>: <span>false</span>    &#125;  &#125;,  <span>render</span>: <span>(<span>h</span>) =&gt;</span> &#123;    <span>let</span> childNode;    <span>if</span> (<span>this</span>.show) &#123;      childNode = h(<span>'p'</span>, <span>'内容 1'</span>);    &#125; <span>else</span> &#123;      childNode = h(<span>'p'</span>, <span>'内容 2'</span>);    &#125;        <span>return</span> h(<span>'div'</span>, &#123;      <span>attrs</span>: &#123;        <span>id</span>: <span>'main'</span>      &#125;,      <span>class</span>: &#123;        <span>container</span>: <span>true</span>      &#125;,      <span>style</span>: &#123;        <span>color</span>: <span>'red'</span>      &#125;    &#125;, [childNode]);  &#125;&#125;</code></pre>  <p>    这里的 <code>h</code>，即 <code>createElement</code>，是 Render    函数的核心。可以看到，template 中的    <strong>v-if / v-else</strong> 等指令，都被 JS 的    <strong>if / else</strong> 替代了，那 <strong>v-for</strong> 自然也会被    <strong>for</strong> 语句替代。  </p>  <p>h 有 3 个参数，分别是：</p>  <ol>    <li>      <p>        要渲染的元素或组件，可以是一个 html        标签、组件选项或一个函数（不常用），该参数为必填项。示例：      </p>      <pre><code lang="js" class=""><span>// 1. html 标签</span>h(<span>'div'</span>);<span>// 2. 组件选项</span><span>import</span> DatePicker <span>from</span> <span>'../component/date-picker.vue'</span>;h(DatePicker);</code></pre>    </li>    <li>      <p>        对应属性的数据对象，比如组件的 props、元素的        class、绑定的事件、slot、自定义指令等，该参数是可选的，上文所说的 Render        配置项多，指的就是这个参数。该参数的完整配置和示例，可以到 Vue.js        的文档查看，没必要全部记住，用到时查阅就好：<a          target="_blank"          href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Frender-function.html%23createElement-%25E5%258F%2582%25E6%2595%25B0"          title="https://cn.vuejs.org/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0"          ref="nofollow noopener noreferrer"          >createElement 参数</a        >。      </p>    </li>    <li>      <p>子节点，可选，String 或 Array，它同样是一个 h。示例：</p>      <pre><code lang="js" class="">[  <span>'内容'</span>,  h(<span>'p'</span>, <span>'内容'</span>),  h(Component, &#123;    <span>props</span>: &#123;      <span>someProp</span>: <span>'foo'</span>    &#125;  &#125;)]</code></pre>    </li>  </ol>  <h3 data-id="heading-2">约束</h3>  <p>    所有的组件树中，如果 vNode 是组件或含有组件的 slot，那么 vNode    必须唯一。以下两个示例都是<strong>错误</strong>的：  </p>  <pre><code lang="js" class=""><span>// 局部声明组件</span><span>const</span> Child = &#123;  <span>render</span>: <span>(<span>h</span>) =&gt;</span> &#123;    <span>return</span> h(<span>'p'</span>, <span>'text'</span>);  &#125;&#125;<span>export</span> <span>default</span> &#123;  <span>render</span>: <span>(<span>h</span>) =&gt;</span> &#123;    <span>// 创建一个子节点，使用组件 Child</span>    <span>const</span> ChildNode = h(Child);        <span>return</span> h(<span>'div'</span>, [      ChildNode,      ChildNode    ]);  &#125;&#125;</code></pre>  <pre><code lang="js" class="">&#123;  <span>render</span>: <span>(<span>h</span>) =&gt;</span> &#123;    <span>return</span> h(<span>'div'</span>, [      <span>this</span>.$slots.default,      <span>this</span>.$slots.default    ])  &#125;&#125;</code></pre>  <p>重复渲染多个组件或元素，可以通过一个循环和工厂函数来解决：</p>  <pre><code lang="js" class=""><span>const</span> Child = &#123;  <span>render</span>: <span>(<span>h</span>) =&gt;</span> &#123;    <span>return</span> h(<span>'p'</span>, <span>'text'</span>);  &#125;&#125;<span>export</span> <span>default</span> &#123;  <span>render</span>: <span>(<span>h</span>) =&gt;</span> &#123;    <span>const</span> children = <span>Array</span>.apply(<span>null</span>, &#123;      <span>length</span>: <span>5</span>    &#125;).map(<span><span>()</span> =&gt;</span> &#123;      <span>return</span> h(Child);    &#125;);    <span>return</span> h(<span>'div'</span>, children);  &#125;&#125;</code></pre>  <p>    对于含有组件的 slot，复用比较复杂，需要将 slot    的每个子节点都克隆一份，例如：  </p>  <pre><code lang="js" class="">&#123;  <span>render</span>: <span>(<span>h</span>) =&gt;</span> &#123;    <span><span>function</span> <span>cloneVNode</span> (<span>vnode</span>) </span>&#123;      <span>// 递归遍历所有子节点，并克隆</span>      <span>const</span> clonedChildren = vnode.children &amp;&amp; vnode.children.map(<span><span>vnode</span> =&gt;</span> cloneVNode(vnode));      <span>const</span> cloned = h(vnode.tag, vnode.data, clonedChildren);      cloned.text = vnode.text;      cloned.isComment = vnode.isComment;      cloned.componentOptions = vnode.componentOptions;      cloned.elm = vnode.elm;      cloned.context = vnode.context;      cloned.ns = vnode.ns;      cloned.isStatic = vnode.isStatic;      cloned.key = vnode.key;      <span>return</span> cloned;    &#125;    <span>const</span> vNodes = <span>this</span>.$slots.default === <span>undefined</span> ? [] : <span>this</span>.$slots.default;    <span>const</span> clonedVNodes = <span>this</span>.$slots.default === <span>undefined</span> ? [] : vNodes.map(<span><span>vnode</span> =&gt;</span> cloneVNode(vnode));        <span>return</span> h(<span>'div'</span>, [      vNodes,      clonedVNodes    ])  &#125;&#125;</code></pre>  <p>    在 Render 函数里创建了一个 cloneVNode 的工厂函数，通过递归将 slot    所有子节点都克隆了一份，并对 VNode 的关键属性也进行了复制。  </p>  <p>    深度克隆 slot 并非 Vue.js    内置方法，也没有得到推荐，属于黑科技，在一些特殊的场景才会使用到，正常业务几乎是用不到的。比如    iView 组件库的穿梭框组件 Transfer，就用到了这种方法：  </p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/13/1670bc4f017b9bf6~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>它的使用方法是：</p>  <pre><code lang="html" class=""><span>&lt;<span>Transfer</span>    <span>:data</span>=<span>"data"</span>    <span>:target-keys</span>=<span>"targetKeys"</span>    <span>:render-format</span>=<span>"renderFormat"</span>&gt;</span>  <span>&lt;<span>div</span> <span>:style</span>=<span>"&#123;float: 'right', margin: '5px'&#125;"</span>&gt;</span>    <span>&lt;<span>Button</span> <span>size</span>=<span>"small"</span> @<span>click</span>=<span>"reloadMockData"</span>&gt;</span>Refresh<span>&lt;/<span>Button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>Transfer</span>&gt;</span></code></pre>  <p>    示例中的默认 slot 是一个 Refresh 按钮，使用者只写了一遍，但在 Transfer    组件中，是通过克隆 VNode 的方法，显示了两遍。如果不这样做，就要声明两个具名    slot，但是左右两个的逻辑可能是完全一样的，使用者就要写两个一模一样的    slot，这是不友好的。  </p>  <blockquote>    <p>      Render 函数的基本用法还有很多，比如 v-model 的用法、事件和修饰符、slot      等，读者可以到 Vue.js 文档阅读。<a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Frender-function.html"        title="https://cn.vuejs.org/v2/guide/render-function.html"        ref="nofollow noopener noreferrer"        >Vue.js 渲染函数</a      >    </p>  </blockquote>  <h2 data-id="heading-3">Render 函数使用场景</h2>  <p>    上文说到，一般情况下是不推荐直接使用 Render 函数的，使用 template 足以，在    Vue.js 中，使用 Render 函数的场景，主要有以下 4 点：  </p>  <ol>    <li>      <p>        使用两个相同 slot。在 template 中，Vue.js 不允许使用两个相同的        slot，比如下面的示例是错误的：      </p>      <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span></code></pre>      <p>        解决方案就是上文中讲到的<strong>约束</strong>，使用一个深度克隆 VNode        节点的方法。      </p>    </li>    <li>      <p>        在 SSR 环境（服务端渲染），如果不是常规的 template 写法，比如通过        Vue.extend 和 new Vue        构造来生成的组件实例，是编译不过的，在前面小节也有所介绍。回顾上一节的        <code>$Alert</code> 组件的 notification.js 文件，当时是使用 Render        函数来渲染 Alert 组件，如果改成另一种写法，在 SSR        中会报错，对比两种写法：      </p>      <pre><code lang="js" class=""><span>// 正确写法</span><span>import</span> Alert <span>from</span> <span>'./alert.vue'</span>;<span>import</span> Vue <span>from</span> <span>'vue'</span>;Alert.newInstance = <span><span>properties</span> =&gt;</span> &#123;  <span>const</span> props = properties || &#123;&#125;;  <span>const</span> Instance = <span>new</span> Vue(&#123;    <span>data</span>: props,    render (h) &#123;      <span>return</span> h(Alert, &#123;        <span>props</span>: props      &#125;);    &#125;  &#125;);  <span>const</span> component = Instance.$mount();  <span>document</span>.body.appendChild(component.$el);  <span>const</span> alert = Instance.$children[<span>0</span>];  <span>return</span> &#123;    add (noticeProps) &#123;      alert.add(noticeProps);    &#125;,    remove (name) &#123;      alert.remove(name);    &#125;  &#125;&#125;;<span>export</span> <span>default</span> Alert;</code></pre>      <pre><code lang="js" class=""><span>// 在 SSR 下报错的写法</span><span>import</span> Alert <span>from</span> <span>'./alert.vue'</span>;<span>import</span> Vue <span>from</span> <span>'vue'</span>;Alert.newInstance = <span><span>properties</span> =&gt;</span> &#123;  <span>const</span> props = properties || &#123;&#125;;  <span>const</span> div = <span>document</span>.createElement(<span>'div'</span>);  div.innerHTML = <span>`&lt;Alert <span>$&#123;props&#125;</span>&gt;&lt;/Alert&gt;`</span>;  <span>document</span>.body.appendChild(div);    <span>const</span> Instance = <span>new</span> Vue(&#123;    <span>el</span>: div,    <span>data</span>: props,    <span>components</span>: &#123; Alert &#125;  &#125;);  <span>const</span> alert = Instance.$children[<span>0</span>];  <span>return</span> &#123;    add (noticeProps) &#123;      alert.add(noticeProps);    &#125;,    remove (name) &#123;      alert.remove(name);    &#125;  &#125;&#125;;<span>export</span> <span>default</span> Alert;</code></pre>    </li>    <li>      <p>        在 runtime 版本的 Vue.js 中，如果使用 Vue.extend 手动构造一个实例，使用        template 选项是会报错的，在第 9 节中也有所介绍。解决方案也很简单，把        template 改写为 Render        就可以了。需要注意的是，在开发独立组件时，可以通过配置 Vue.js 版本来使        template 选项可用，但这是在自己的环境，无法保证使用者的 Vue.js        版本，所以对于提供给他人用的组件，是需要考虑兼容 runtime 版本和 SSR        环境的。      </p>    </li>    <li>      <p>        这可能是使用 Render 函数最重要的一点。一个 Vue.js        组件，有一部分内容需要从父级传递来显示，如果是文本之类的，直接通过        <code>props</code> 就可以，如果这个内容带有样式或复杂一点的 html        结构，可以使用 <code>v-html</code> 指令来渲染，父级传递的仍然是一个 HTML        Element 字符串，不过它仅仅是能解析正常的 html 节点且有 XSS        风险。当需要最大化程度自定义显示内容时，就需要        <code>Render</code> 函数，它可以渲染一个完整的 Vue.js        组件。你可能会说，用 slot 不就好了？的确，slot        的作用就是做内容分发的，但在一些特殊组件中，可能 slot        也不行。比如一个表格组件 <code>Table</code>，它只接收两个 props：列配置        columns 和行数据        data，不过某一列的单元格，不是只将数据显示出来那么简单，可能带有一些复杂的操作，这种场景只用        slot 是不行的，没办法确定是那一列的        slot。这种场景有两种解决方案，其一就是 Render        函数，下一节的实战就是开发这样一个 Table 组件；另一种是用作用域        slot（slot-scope），后面小节也会详细介绍。      </p>    </li>  </ol>  <h2 data-id="heading-4">Functional Render</h2>  <p>    Vue.js 提供了一个 <code>functional</code> 的布尔值选项，设置为 true    可以使组件无状态和无实例，也就是没有 data 和 this 上下文。这样用 Render    函数返回虚拟节点可以更容易渲染，因为函数化组件（Functional    Render）只是一个函数，渲染开销要小很多。  </p>  <p>    使用函数化组件，Render 函数提供了第二个参数 context    来提供临时上下文。组件需要的 data、props、slots、children、parent    都是通过这个上下文来传递的，比如 this.level 要改写为    context.props.level，this.$slots.default 改写为 context.children。  </p>  <blockquote>    <p>      您可以阅读      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Frender-function.html%23%25E5%2587%25BD%25E6%2595%25B0%25E5%25BC%258F%25E7%25BB%2584%25E4%25BB%25B6"        title="https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6"        ref="nofollow noopener noreferrer"        >Vue.js 文档—函数式组件</a      >      来查看示例。    </p>  </blockquote>  <p>    函数化组件在业务中并不是很常用，而且也有类似的方法来实现，比如某些场景可以用    is 特性来动态挂载组件。函数化组件主要适用于以下两个场景：  </p>  <ul>    <li>程序化地在多个组件中选择一个；</li>    <li>在将 children、props、data 传递给子组件之前操作它们。</li>  </ul>  <p>    比如上文说过的，某个组件需要使用 Render    函数来自定义，而不是通过传递普通文本或 v-html 指令，这时就可以用 Functional    Render，来看下面的示例：  </p>  <ol>    <li>      <p>首先创建一个函数化组件 <strong>render.js</strong>：</p>      <pre><code lang="js" class=""><span>// render.js</span><span>export</span> <span>default</span> &#123;  <span>functional</span>: <span>true</span>,  <span>props</span>: &#123;    <span>render</span>: <span>Function</span>  &#125;,  <span>render</span>: <span>(<span>h, ctx</span>) =&gt;</span> &#123;    <span>return</span> ctx.props.render(h);  &#125;&#125;;</code></pre>      <p>        它只定义了一个 props：render，格式为 Function，因为是 functional，所以在        render 里使用了第二个参数 <code>ctx</code> 来获取        props。这是一个中间文件，并且可以复用，其它组件需要这个功能时，都可以引入它。      </p>    </li>    <li>      <p>创建组件：</p>      <pre><code lang="html" class=""><span>&lt;!-- my-component.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>Render</span> <span>:render</span>=<span>"render"</span>&gt;</span><span>&lt;/<span>Render</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> Render <span>from</span> <span>'./render.js'</span>;    <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; Render &#125;,    <span>props</span>: &#123;      <span>render</span>: <span>Function</span>    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>    </li>    <li>      <p>使用上面的 my-compoennt 组件：</p>      <pre><code lang="html" class=""><span>&lt;!-- demo.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>my-component</span> <span>:render</span>=<span>"render"</span>&gt;</span><span>&lt;/<span>my-component</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> myComponent <span>from</span> <span>'../components/my-component.vue'</span>;    <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; myComponent &#125;,    data () &#123;      <span>return</span> &#123;        <span>render</span>: <span>(<span>h</span>) =&gt;</span> &#123;          <span>return</span> h(<span>'div'</span>, &#123;            <span>style</span>: &#123;              <span>color</span>: <span>'red'</span>            &#125;          &#125;, <span>'自定义内容'</span>);        &#125;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>    </li>  </ol>  <p>    这里的 render.js 因为只是把 demo.vue 中的 Render    内容过继，并无其它用处，所以用了 Functional Render。  </p>  <p>    就此例来说，完全可以用 slot 取代 Functional Render，那是因为只有    <code>render</code> 这一个 prop。如果示例中的    <code>&lt;Render&gt;</code> 是用 <code>v-for</code> 生成的，也就是多个时，用    一个 slot 是实现不了的，那时用 Render 函数就很方便了，后面章节会专门介绍。  </p>  <h2 data-id="heading-5">结语</h2>  <p>如果想换一种思路写 Vue.js，就试试 Render 函数吧，它会让你“又爱又恨”！</p>  <p>    注：本节部分内容参考了《Vue.js 实战》（清华大学出版社），部分代码参考    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview%2Fblob%2F2.0%2Fsrc%2Fcomponents%2Ftransfer%2Ftransfer.vue"      title="https://github.com/iview/iview/blob/2.0/src/components/transfer/transfer.vue"      ref="nofollow noopener noreferrer"      >iView</a    >。  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-10】实战 4：全局提示组件——$Alert</title>
      <link href="/c5203a9cd445.html"/>
      <url>/c5203a9cd445.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    有一种 Vue.js    组件，它不同于常规的组件，但组件结构本身很简单，比如下面的全局提示组件：  </p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/10/166fcc05107e987c~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    实现这样一个组件并不难，只需要简单的几行 div 和    css，但使用者可能要这样来显示组件：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>Alert</span> <span>v-if</span>=<span>"show"</span>&gt;</span>这是一条提示信息<span>&lt;/<span>Alert</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"show = true"</span>&gt;</span>显示<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> Alert <span>from</span> <span>'../component/alert.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; Alert &#125;,    data () &#123;      <span>return</span> &#123;        <span>show</span>: <span>false</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>这样的用法，有以下缺点：</p>  <ul>    <li>每个使用的地方，都得注册组件；</li>    <li>需要预先将 <code>&lt;Alert&gt;</code> 放置在模板中；</li>    <li>需要额外的 data 来控制 Alert 的显示状态；</li>    <li>      Alert 的位置，是在当前组件位置，并非在 body 下，有可能会被其它组件遮挡。    </li>  </ul>  <p>    总之对使用者来说是很不友好的，那怎样才能优雅地实现这样一个组件呢？事实上，原生的    JavaScript 早已给出了答案：  </p>  <pre><code lang="js" class=""><span>// 全局提示</span><span>window</span>.alert(<span>'这是一条提示信息'</span>);<span>// 二次确认</span><span>const</span> confirm = <span>window</span>.confirm(<span>'确认删除吗？'</span>);<span>if</span> (confirm) &#123;  <span>// ok</span>&#125; <span>else</span> &#123;  <span>// cancel</span>&#125;</code></pre>  <p>所以，结论是：我们需要一个能用 JavaScript 调用组件的 API。</p>  <p>    如果你使用过 iView 之类的组件库，一定对它内置的 $Message、$Notice、$Modal    等组件很熟悉，本节就来开发一个全局通知组件——$Alert。  </p>  <h2 data-id="heading-1">1/3 先把组件写好</h2>  <p>我们期望最终的 API 是这样的：</p>  <pre><code lang="js" class="">methods: &#123;  handleShow () &#123;    <span>this</span>.$Alert(&#123;      <span>content</span>: <span>'这是一条提示信息'</span>,      <span>duration</span>: <span>3</span>    &#125;)  &#125;&#125;</code></pre>  <p>    <code>this.$Alert</code>    可以在任何位置调用，无需单独引入。该方法接收两个参数：  </p>  <ul>    <li>content：提示内容；</li>    <li>duration：持续时间，单位秒，默认 1.5 秒，到时间自动消失。</li>  </ul>  <p>最终效果如下：</p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/10/166fcc09c43c2ad1~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>我们从最简单的入手，不考虑其它，先写一个基本的 Alert 组件。</p>  <p>    在 <code>src/component</code> 下新建 <code>alert</code> 目录，并创建文件    <code>alert.vue</code>：  </p>  <p>通知可以是多个，我们用一个数组 <code>notices</code> 来管理每条通知：</p>  <pre><code lang="html" class=""><span>&lt;!-- alert.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span> <span>class</span>=<span>"alert"</span>&gt;</span>    <span>&lt;<span>div</span> <span>class</span>=<span>"alert-main"</span> <span>v-for</span>=<span>"item in notices"</span> <span>:key</span>=<span>"item.name"</span>&gt;</span>      <span>&lt;<span>div</span> <span>class</span>=<span>"alert-content"</span>&gt;</span>&#123;&#123; item.content &#125;&#125;<span>&lt;/<span>div</span>&gt;</span>    <span>&lt;/<span>div</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    data () &#123;      <span>return</span> &#123;        <span>notices</span>: []      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span><span>&lt;<span>style</span>&gt;</span><span>  <span>.alert</span>&#123;    <span>position</span>: fixed;    <span>width</span>: <span>100%</span>;    <span>top</span>: <span>16px</span>;    <span>left</span>: <span>0</span>;    <span>text-align</span>: center;    <span>pointer-events</span>: none;  &#125;  <span>.alert-content</span>&#123;    <span>display</span>: inline-block;    <span>padding</span>: <span>8px</span> <span>16px</span>;    <span>background</span>: <span>#fff</span>;    <span>border-radius</span>: <span>3px</span>;    <span>box-shadow</span>: <span>0</span> <span>1px</span> <span>6px</span> <span>rgba</span>(0, 0, 0, .2);    <span>margin-bottom</span>: <span>8px</span>;  &#125;</span><span>&lt;/<span>style</span>&gt;</span></code></pre>  <p>    Alert 组件不同于常规的组件使用方式，它最终是通过 JS    来调用的，因此组件不用预留 props 和 events 接口。  </p>  <p>    接下来，只要给数组    <code>notices</code>    增加数据，这个提示组件就能显示内容了，我们先假设，最终会通过 JS 调用 Alert    的一个方法 <code>add</code>，并将 <code>content</code> 和    <code>duration</code> 传入进来：  </p>  <pre><code lang="html" class=""><span>&lt;!-- alert.vue，部分代码省略 --&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>let</span> seed = <span>0</span>;  <span><span>function</span> <span>getUuid</span>(<span></span>) </span>&#123;    <span>return</span> <span>'alert_'</span> + (seed++);  &#125;  <span>export</span> <span>default</span> &#123;    data () &#123;      <span>return</span> &#123;        <span>notices</span>: []      &#125;    &#125;,    <span>methods</span>: &#123;      add (notice) &#123;        <span>const</span> name = getUuid();        <span>let</span> _notice = <span>Object</span>.assign(&#123;          <span>name</span>: name        &#125;, notice);        <span>this</span>.notices.push(_notice);        <span>// 定时移除，单位：秒</span>        <span>const</span> duration = notice.duration;        setTimeout(<span><span>()</span> =&gt;</span> &#123;          <span>this</span>.remove(name);        &#125;, duration * <span>1000</span>);      &#125;,      remove (name) &#123;        <span>const</span> notices = <span>this</span>.notices;        <span>for</span> (<span>let</span> i = <span>0</span>; i &lt; notices.length; i++) &#123;          <span>if</span> (notices[i].name === name) &#123;            <span>this</span>.notices.splice(i, <span>1</span>);            <span>break</span>;          &#125;        &#125;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    在 <code>add</code> 方法中，给每一条传进来的提示数据，加了一个不重复的    <code>name</code> 字段来标识，并通过    <code>setTimeout</code> 创建了一个计时器，当到达指定的    <code>duration</code> 持续时间后，调用 <code>remove</code> 方法，将对应    <code>name</code> 的那条提示信息找到，并从数组中移除。  </p>  <p>    由这个思路，Alert 组件就可以无限扩展，只要在 add    方法中传递更多的参数，就能支持更复杂的组件，比如是否显示手动关闭按钮、确定 /    取消按钮，甚至传入一个 Render 函数都可以，完成本例后，读者可以尝试”改造“。  </p>  <h2 data-id="heading-2">2/3 实例化封装</h2>  <p>    这一步，我们对 Alert    组件进一步封装，让它能够实例化，而不是常规的组件使用方法。实例化组件我们在第    8 节中介绍过，可以使用 Vue.extend 或 new Vue，然后用 $mount 挂载到 body    节点下。  </p>  <p>    在 <code>src/components/alert</code> 目录下新建    <code>notification.js</code> 文件：  </p>  <pre><code lang="js" class=""><span>// notification.js</span><span>import</span> Alert <span>from</span> <span>'./alert.vue'</span>;<span>import</span> Vue <span>from</span> <span>'vue'</span>;Alert.newInstance = <span><span>properties</span> =&gt;</span> &#123;  <span>const</span> props = properties || &#123;&#125;;  <span>const</span> Instance = <span>new</span> Vue(&#123;    <span>data</span>: props,    render (h) &#123;      <span>return</span> h(Alert, &#123;        <span>props</span>: props      &#125;);    &#125;  &#125;);  <span>const</span> component = Instance.$mount();  <span>document</span>.body.appendChild(component.$el);  <span>const</span> alert = Instance.$children[<span>0</span>];  <span>return</span> &#123;    add (noticeProps) &#123;      alert.add(noticeProps);    &#125;,    remove (name) &#123;      alert.remove(name);    &#125;  &#125;&#125;;<span>export</span> <span>default</span> Alert;</code></pre>  <p>    notification.js 并不是最终的文件，它只是对 alert.vue 添加了一个方法    <code>newInstance</code>。虽然 alert.vue 包含了 template、script、style    三个标签，并不是一个 JS 对象，那怎么能够给它扩展一个方法    <code>newInstance</code> 呢？事实上，alert.vue 会被 Webpack 的 vue-loader    编译，把 template 编译为 Render 函数，最终就会成为一个 JS    对象，自然可以对它进行扩展。  </p>  <p>    Alert 组件没有任何 props，这里在 Render Alert 组件时，还是给它加了    props，当然，这里的 props 是空对象    {}，而且即使传了内容，也不起作用。这样做的目的还是为了扩展性，如果要在 Alert    上添加 props 来支持更多特性，是要在这里传入的。不过话说回来，因为能拿到    Alert 实例，用 data 或 props 都是可以的。  </p>  <p>    在第 8 节已经解释过，<code>const alert = Instance.$children[0];</code    >，这里的 alert 就是 Render 的 Alert 组件实例。在    <code>newInstance</code> 里，使用闭包暴露了两个方法 <code>add</code> 和    <code>remove</code>。这里的 add 和 remove 可不是 alert.vue 里的 add 和    remove，它们只是名字一样。  </p>  <h2 data-id="heading-3">3/3 入口</h2>  <p>    最后要做的，就是调用 notification.js 创建实例，并通过    <code>add</code> 把数据传递过去，这是组件开发的最后一步，也是最终的入口。在    <code>src/component/alert</code> 下创建文件 <code>alert.js</code>：  </p>  <pre><code lang="js" class=""><span>// alert.js</span><span>import</span> Notification <span>from</span> <span>'./notification.js'</span>;<span>let</span> messageInstance;<span><span>function</span> <span>getMessageInstance</span> (<span></span>) </span>&#123;  messageInstance = messageInstance || Notification.newInstance();  <span>return</span> messageInstance;&#125;<span><span>function</span> <span>notice</span>(<span>&#123; duration = <span>1.5</span>, content = <span>''</span> &#125;</span>) </span>&#123;  <span>let</span> instance = getMessageInstance();  instance.add(&#123;    <span>content</span>: content,    <span>duration</span>: duration  &#125;);&#125;<span>export</span> <span>default</span> &#123;  info (options) &#123;    <span>return</span> notice(options);  &#125;&#125;</code></pre>  <p>    <code>getMessageInstance</code> 函数用来获取实例，它不会重复创建，如果    messageInstance 已经存在，就直接返回了，只在第一次调用 Notification 的    <code>newInstance</code> 时来创建实例。  </p>  <p>    alert.js 对外提供了一个方法    <code>info</code>，如果需要各种显示效果，比如成功的、失败的、警告的，可以在    info 下面提供更多的方法，比如 success、fail、warning 等，并传递不同参数让    Alert.vue 知道显示哪种状态的图标。本例因为只有一个    info，事实上也可以省略掉，直接导出一个默认的函数，这样在调用时，就不用    <code>this.$Alert.info()</code> 了，直接 <code>this.$Alert()</code>。  </p>  <p>来看一下显示一个信息提示组件的流程：</p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/10/166fcc0fe6df06d2~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    最后把 alert.js 作为插件注册到 Vue 里就行，在入口文件    <code>src/main.js</code>中，通过 <code>prototype</code> 给 Vue    添加一个实例方法：  </p>  <pre><code lang="js" class=""><span>// src/main.js</span><span>import</span> Vue <span>from</span> <span>'vue'</span><span>import</span> App <span>from</span> <span>'./App.vue'</span><span>import</span> router <span>from</span> <span>'./router'</span><span>import</span> Alert <span>from</span> <span>'../src/components/alert/alert.js'</span>Vue.config.productionTip = <span>false</span>Vue.prototype.$Alert = Alert<span>new</span> Vue(&#123;  router,  <span>render</span>: <span><span>h</span> =&gt;</span> h(App)&#125;).$mount(<span>'#app'</span>)</code></pre>  <p>    这样在项目任何地方，都可以通过 <code>this.$Alert</code> 来调用 Alert    组件了，我们创建一个 alert 的路由，并在 <code>src/views</code> 下创建页面    <code>alert.vue</code>：  </p>  <pre><code lang="html" class=""><span>&lt;!-- src/views/alert.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleOpen1"</span>&gt;</span>打开提示 1<span>&lt;/<span>button</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleOpen2"</span>&gt;</span>打开提示 2<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>methods</span>: &#123;      handleOpen1 () &#123;        <span>this</span>.$Alert.info(&#123;          <span>content</span>: <span>'我是提示信息 1'</span>        &#125;);      &#125;,      handleOpen2 () &#123;        <span>this</span>.$Alert.info(&#123;          <span>content</span>: <span>'我是提示信息 2'</span>,          <span>duration</span>: <span>3</span>        &#125;);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p><code>duration</code> 如果不传入，默认是 1.5 秒。</p>  <p>以上就是全局通知组件的全部内容。</p>  <h2 data-id="heading-4">友情提示</h2>  <p>    本示例算是一个    MVP（最小化可行方案），要开发一个完善的全局通知组件，还需要更多可维护性和功能性的设计，但离不开本例的设计思路。以下几点是同类组件中值得注意的：  </p>  <ol>    <li>      Alert.vue 的最外层是有一个 .alert 节点的，它会在第一次调用      <code>$Alert</code> 时，在 body 下创建，因为不在      <code>&lt;router-view&gt;</code>      内，它不受路由的影响，也就是说一经创建，除非刷新页面，这个节点是不会消失的，所以在      alert.vue 的设计中，并没有主动销毁这个组件，而是维护了一个子节点数组      <code>notices</code>。    </li>    <li>      .alert 节点是 <code>position: fixed</code> 固定的，因此要合理设计它的      <code>z-index</code>，否则可能被其它节点遮挡。    </li>    <li>      notification.js 和 alert.vue      是可以复用的，如果还要开发其它同类的组件，比如二次确认组件      <code>$Confirm</code>, 只需要再写一个入口 <code>confirm.js</code>，并将      <code>alert.vue</code> 进一步封装，将      <code>notices</code> 数组的循环体写为一个新的组件，通过配置来决定是渲染      Alert 还是 Confirm，这在可维护性上是友好的。    </li>    <li>      在 notification.js 的 new Vue 时，使用了 Render 函数来渲染      alert.vue，这是因为使用 template 在 runtime 的 Vue.js 版本下是会报错的。    </li>    <li>      本例的 content 只能是字符串，如果要显示自定义的内容，除了用      <code>v-html</code> 指令，也能用 Functional Render（之后章节会介绍）。    </li>  </ol>  <h2 data-id="heading-5">结语</h2>  <p>    Vue.js 的精髓是组件，组件的精髓是 JavaScript。将 JavaScript 开发中的技巧结合    Vue.js 组件，就能玩出不一样的东西。  </p>  <p>    注：本节部分代码参考    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview%2Ftree%2F2.0%2Fsrc%2Fcomponents%2Fbase%2Fnotification"      title="https://github.com/iview/iview/tree/2.0/src/components/base/notification"      ref="nofollow noopener noreferrer"      >iView</a    >。  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-9】实战 3：动态渲染 .vue 文件的组件—— Display</title>
      <link href="/14959ccf8fcf.html"/>
      <url>/14959ccf8fcf.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    你可能用过    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fjsfiddle.net%2F"      title="https://jsfiddle.net/"      ref="nofollow noopener noreferrer"      >jsfiddle</a    >    或    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fjsbin.com"      title="https://jsbin.com"      ref="nofollow noopener noreferrer"      >jsbin</a    >    之类的网站，在里面你可以用 CDN 的形式引入    Vue.js，然后在线写示例，实时运行，比如下面这个例子：  </p>  <p>    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fjsfiddle.net%2Fc87yh92v%2F"      title="https://jsfiddle.net/c87yh92v/"      ref="nofollow noopener noreferrer"      >jsfiddle.net/c87yh92v/</a    >  </p>  <p>    不过，这类网站主要是一个 html，里面包含 js、css 部分，渲染侧是用 iframe    嵌入你编写的 html，并实时更新。在这些网站写示例，是不能直接写    <code>.vue</code> 文件的，因为没法进行编译。  </p>  <p>    再来看另一个网站    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Frun.iviewui.com%2F"      title="https://run.iviewui.com/"      ref="nofollow noopener noreferrer"      >iView Run</a    >（之前小节也有提到），它是能够在线编写一个标准的    <code>.vue</code> 文件，并及时渲染的，它也预置了 iView 环境，你可以使用    iView 组件库全部的组件。本小节，我们就来实现这样一个能够动态渲染 .vue 文件的    <code>Display</code> 组件，当然，用到的核心技术就是上一节的    <code>extend</code> 和 <code>$mount</code>。  </p>  <h2 data-id="heading-1">接口设计</h2>  <p>一个常规的 <code>.vue</code> 文件一般都会包含 3 个部分：</p>  <ul>    <li><code>&lt;template&gt;</code>：组件的模板；</li>    <li><code>&lt;script&gt;</code>：组件的选项，不包含 <code>el</code>；</li>    <li><code>&lt;style&gt;</code>：CSS 样式。</li>  </ul>  <p>    回忆一下用 <code>extend</code> 来构造一个组件实例，它的选项    <code>template</code> 其实就是上面    <code>&lt;template&gt;</code> 的内容，其余选项对应的是    <code>&lt;script&gt;</code>，样式 <code>&lt;style&gt;</code> 事实上与 Vue.js    无关，我们可以先不管。这样的话，当拿到一个 .vue    的文件（整体其实是字符串），只需要把    <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code      >&lt;style&gt;</code    >    使用正则分割，把对应的部分传递给 extend 创建的实例就可以。  </p>  <p>    Display 是一个功能型的组件，没有交互和事件，只需要一个 prop：code 将 .vue    的内容传递过来，其余工作都是在组件内完成的，这对使用者很友好。当然，你也可以设计成三个    props，分别对应    html、js、css，那分割的工作就要使用者来完成。出于使用者优先原则，苦活累活当然是在组件内完成了，因此推荐第一个方案。  </p>  <h2 data-id="heading-2">实现</h2>  <p>    在 <code>src/components</code> 目录下创建 <code>display</code> 目录，并新建    <code>display.vue</code> 文件，基本结构如下：  </p>  <pre><code lang="html" class=""><span>&lt;!-- display.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span> <span>ref</span>=<span>"display"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>props</span>: &#123;      <span>code</span>: &#123;        <span>type</span>: <span>String</span>,        <span>default</span>: <span>''</span>      &#125;    &#125;,    data () &#123;      <span>return</span> &#123;        <span>html</span>: <span>''</span>,        <span>js</span>: <span>''</span>,        <span>css</span>: <span>''</span>      &#125;    &#125;,  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    父级传递 <code>code</code> 后，将其分割，并保存在 data 的 html、js、css    中，后续使用。  </p>  <p>    我们使用正则，基于 <code>&lt;&gt;</code> 和    <code>&lt;/&gt;</code> 的特性进行分割：  </p>  <pre><code lang="js" class=""><span>// display.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>methods</span>: &#123;    getSource (source, type) &#123;      <span>const</span> regex = <span>new</span> <span>RegExp</span>(<span>`&lt;<span>$&#123;type&#125;</span>[^&gt;]*&gt;`</span>);      <span>let</span> openingTag = source.match(regex);      <span>if</span> (!openingTag) <span>return</span> <span>''</span>;      <span>else</span> openingTag = openingTag[<span>0</span>];      <span>return</span> source.slice(source.indexOf(openingTag) + openingTag.length, source.lastIndexOf(<span>`&lt;/<span>$&#123;type&#125;</span>&gt;`</span>));    &#125;,    splitCode () &#123;      <span>const</span> script = <span>this</span>.getSource(<span>this</span>.code, <span>'script'</span>).replace(<span>/export default/</span>, <span>'return '</span>);      <span>const</span> style = <span>this</span>.getSource(<span>this</span>.code, <span>'style'</span>);      <span>const</span> template = <span>'&lt;div id="app"&gt;'</span> + <span>this</span>.getSource(<span>this</span>.code, <span>'template'</span>) + <span>'&lt;/div&gt;'</span>;      <span>this</span>.js = script;      <span>this</span>.css = style;      <span>this</span>.html = template;    &#125;,  &#125;&#125;</code></pre>  <p>getSource 方法接收两个参数：</p>  <ul>    <li>source：.vue 文件代码，即 props: code；</li>    <li>type：分割的部分，也就是 template、script、style。</li>  </ul>  <p>    分割后，返回的内容不再包含    <code>&lt;template&gt;</code> 等标签，直接是对应的内容，在 splitCode    方法中，把分割好的代码分别赋值给 data 中声明的    html、js、css。有两个细节需要注意：  </p>  <ol>    <li>      .vue 的 <code>&lt;script&gt;</code> 部分一般都是以      <code>export default</code> 开始的，可以看到在 splitCode      方法中将它替换为了      <code>return</code      >，这个在后文会做解释，当前只要注意，我们分割完的代码，仍然是字符串；    </li>    <li>      在分割的 <code>&lt;template&gt;</code> 外层套了一个      <code>&lt;div id="app"&gt;</code>，这是为了容错，有时使用者传递的      <code>code</code>      可能会忘记在外层包一个节点，没有根节点的组件，是会报错的。    </li>  </ol>  <p>    准备好这些基础工作后，就可以用    <code>extend</code>    渲染组件了，在这之前，我们先思考一个问题：上文说到，当前的    <code>this.js</code> 是字符串，而 extend    接收的选项可不是字符串，而是一个对象类型，那就要先把 this.js 转为一个对象。  </p>  <p>不卖关子，来介绍 <code>new Function</code> 用法，先看个示例：</p>  <pre><code lang="js" class=""><span>const</span> sum = <span>new</span> <span>Function</span>(<span>'a'</span>, <span>'b'</span>, <span>'return a + b'</span>);<span>console</span>.log(sum(<span>2</span>, <span>6</span>)); <span>// 8</span></code></pre>  <p>new Function 的语法：</p>  <pre><code lang="js" class=""><span>new</span> <span>Function</span> ([arg1[, arg2[, ...argN]],] functionBody)</code></pre>  <p>    arg1, arg2, ... argN 是被函数使用的参数名称，<strong>functionBody</strong>    是一个含有包括函数定义的 JavaScript    语句的<strong>字符串</strong>。也就是说，示例中的字符串    <code>return a + b</code> 被当做语句执行了。  </p>  <p>    上文说到，<code>this.js</code> 中是将 <em>export default</em> 替换为    <em>return</em> 的，如果将 this.js 传入 new Function 里，那么 this.js    就执行了，这时因为有 return，返回的就是一个对象类型的 this.js 了。  </p>  <p>    如果你还不是很理解 new Function，可以到文末的扩展阅读进一步了解。除了 new    Function，你熟悉的    <code>eval</code> 函数也可以使用，它与 new Function 功能类似。  </p>  <p>知道了这些，下面的内容就容易理解了：</p>  <pre><code lang="html" class=""><span>&lt;!-- display.vue，部分代码省略 --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span> <span>ref</span>=<span>"display"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> Vue <span>from</span> <span>'vue'</span>;    <span>export</span> <span>default</span> &#123;    data () &#123;      <span>return</span> &#123;        <span>component</span>: <span>null</span>      &#125;    &#125;,    <span>methods</span>: &#123;      renderCode () &#123;        <span>this</span>.splitCode();        <span>if</span> (<span>this</span>.html !== <span>''</span> &amp;&amp; <span>this</span>.js !== <span>''</span>) &#123;          <span>const</span> parseStrToFunc = <span>new</span> <span>Function</span>(<span>this</span>.js)();          parseStrToFunc.template =  <span>this</span>.html;          <span>const</span> Component = Vue.extend( parseStrToFunc );          <span>this</span>.component = <span>new</span> Component().$mount();          <span>this</span>.$refs.display.appendChild(<span>this</span>.component.$el);        &#125;      &#125;    &#125;,    mounted () &#123;      <span>this</span>.renderCode();    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    extend 构造的实例通过 $mount 渲染后，挂载到了组件唯一的一个节点    <code>&lt;div ref="display"&gt;</code> 上。  </p>  <p>    现在 html 和 js 都有了，还剩下 css。加载 css 没有什么奇技淫巧，就是创建一个    <code>&lt;style&gt;</code> 标签，然后把 css 写进去，再插入到页面的    <code>&lt;head&gt;</code> 中，这样 css 就被浏览器解析了。为了便于后面在    <code>this.code</code> 变化或组件销毁时移除动态创建的    <code>&lt;style&gt;</code> 标签，我们给每个 style 标签加一个随机 id    用于标识。  </p>  <p>    在 <code>src/utils</code> 目录下新建    <code>random_str.js</code> 文件，并写入以下内容：  </p>  <pre><code lang="js" class=""><span>// 生成随机字符串</span><span>export</span> <span>default</span> <span><span>function</span> (<span>len = <span>32</span></span>) </span>&#123;  <span>const</span> $chars = <span>'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'</span>;  <span>const</span> maxPos = $chars.length;  <span>let</span> str = <span>''</span>;  <span>for</span> (<span>let</span> i = <span>0</span>; i &lt; len; i++) &#123;    str += $chars.charAt(<span>Math</span>.floor(<span>Math</span>.random() * maxPos));  &#125;  <span>return</span> str;&#125;</code></pre>  <p>不难理解，这个方法是从指定的 a-zA-Z0-9 中随机生成 32 位的字符串。</p>  <p>补全 renderCode 方法：</p>  <pre><code lang="js" class=""><span>// display.vue，部分代码省略</span><span>import</span> randomStr <span>from</span> <span>'../../utils/random_str.js'</span>;<span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>id</span>: randomStr()    &#125;  &#125;,  <span>methods</span>: &#123;    renderCode () &#123;      <span>if</span> (<span>this</span>.html !== <span>''</span> &amp;&amp; <span>this</span>.js !== <span>''</span>) &#123;        <span>// ...</span>        <span>if</span> (<span>this</span>.css !== <span>''</span>) &#123;          <span>const</span> style = <span>document</span>.createElement(<span>'style'</span>);          style.type = <span>'text/css'</span>;          style.id = <span>this</span>.id;          style.innerHTML = <span>this</span>.css;          <span>document</span>.getElementsByTagName(<span>'head'</span>)[<span>0</span>].appendChild(style);        &#125;      &#125;    &#125;  &#125;&#125;</code></pre>  <p>当 Display 组件销毁时，也要手动销毁 extend 创建的实例以及上面的 css：</p>  <pre><code lang="js" class=""><span>// display.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>methods</span>: &#123;    destroyCode () &#123;      <span>const</span> $target = <span>document</span>.getElementById(<span>this</span>.id);      <span>if</span> ($target) $target.parentNode.removeChild($target);      <span>if</span> (<span>this</span>.component) &#123;        <span>this</span>.$refs.display.removeChild(<span>this</span>.component.$el);        <span>this</span>.component.$destroy();        <span>this</span>.component = <span>null</span>;      &#125;    &#125;  &#125;,  beforeDestroy () &#123;    <span>this</span>.destroyCode();  &#125;&#125;</code></pre>  <p>    当 <code>this.code</code> 更新时，整个过程要重新来一次，所以要对    <code>code</code> 进行 watch 监听：  </p>  <pre><code lang="js" class=""><span>// display.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>watch</span>: &#123;    code () &#123;      <span>this</span>.destroyCode();      <span>this</span>.renderCode();    &#125;  &#125;&#125;</code></pre>  <p>以上就是 Display 组件的所有内容。</p>  <h2 data-id="heading-3">使用</h2>  <p>    新建一条路由，并在 <code>src/views</code> 下新建页面    <code>display.vue</code> 来使用 Display 组件：  </p>  <pre><code lang="html" class=""><span>&lt;!-- src/views/display.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>h3</span>&gt;</span>动态渲染 .vue 文件的组件—— Display<span>&lt;/<span>h3</span>&gt;</span>    <span>&lt;<span>i-display</span> <span>:code</span>=<span>"code"</span>&gt;</span><span>&lt;/<span>i-display</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> iDisplay <span>from</span> <span>'../components/display/display.vue'</span>;  <span>import</span> defaultCode <span>from</span> <span>'./default-code.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; iDisplay &#125;,    data () &#123;      <span>return</span> &#123;        <span>code</span>: defaultCode      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="js" class=""><span>// src/views/default-code.js</span><span>const</span> code =<span>`&lt;template&gt;    &lt;div&gt;        &lt;input v-model="message"&gt;        &#123;&#123; message &#125;&#125;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default &#123;        data () &#123;            return &#123;                message: ''            &#125;        &#125;    &#125;&lt;/script&gt;`</span>;<span>export</span> <span>default</span> code;</code></pre>  <p>如果使用的是 Vue CLI 3 默认的配置，直接运行时，会抛出下面的错误：</p>  <blockquote>    <p>      [Vue warn]: You are using the runtime-only build of Vue where the template      compiler is not available. Either pre-compile the templates into render      functions, or use the compiler-included build.    </p>  </blockquote>  <p>    这涉及到另一个知识点，就是 Vue.js 的版本。在使用 Vue.js 2    时，有独立构建（standalone）和运行时构建（runtime-only）两种版本可供选择，详细的介绍请阅读文末扩展阅读    2。  </p>  <p>    Vue CLI 3 默认使用了 vue.runtime.js，它不允许编译 template 模板，因为我们在    Vue.extend 构造实例时，用了    <code>template</code> 选项，所以会报错。解决方案有两种，一是手动将 template    改写为 Render 函数，但这成本太高；另一种是对 Vue CLI 3    创建的工程做简单的配置。我们使用后者。  </p>  <p>在项目根目录，新建文件 <code>vue.config.js</code>：</p>  <pre><code lang="js" class=""><span>module</span>.exports = &#123;  <span>runtimeCompiler</span>: <span>true</span>&#125;;</code></pre>  <p>    它的作用是，是否使用包含运行时编译器的 Vue 构建版本。设置为    <code>true</code> 后就可以在 Vue 组件中使用    <code>template</code> 选项了，但是应用额外增加 10kb 左右（还好吧）。  </p>  <p>加了这个配置，报错就消失了，组件也能正常显示。</p>  <p>    以上就是 Display 组件所有的内容，如果你感兴趣，可以把它进一步封装，做成    iView Run 这样的产品。  </p>  <h2 data-id="heading-4">结语</h2>  <p>    这个小小的 Display 组件，能做的事还有很多，比如要写一套 Vue    组件库的文档，传统方法是在开发环境写一个个的 .vue    文件，然后编译打包、上传资源、上线，如果要修改，哪怕一个标点符号，都要重新编译打包、上传资源、上线。有了    Display 组件，只需要提供一个服务来在线修改文档的    .vue，就能实时更新，不用打包、上传、上线。  </p>  <p>    还有一点很重要的是，可以看到，在 iView Run 里，默认是直接可以写 iView    组件库的全部组件，并没有额外引入，这是因为 Display 所在的工程，已经将 iView    安装在了全局，Vue.extend    在构造实例时，已经可以使用全局安装的插件了，如果你还全局安装了其它插件，比如    axios，都是可以直接使用的。  </p>  <h2 data-id="heading-5">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FFunction"        title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function"        ref="nofollow noopener noreferrer"        >new Function</a      >    </li>    <li>      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fjingsam.github.io%2F2016%2F10%2F23%2Fstandalone-vs-runtime-only-build-in-vuejs2.html"        title="https://jingsam.github.io/2016/10/23/standalone-vs-runtime-only-build-in-vuejs2.html"        ref="nofollow noopener noreferrer"        >Vue.js 2.0 独立构建和运行时构建的区别</a      >    </li>  </ul></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-8】Vue 的构造器——extend 与手动挂载——$mount</title>
      <link href="/0fe647728c31.html"/>
      <url>/0fe647728c31.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    本节介绍两个 Vue.js 内置但却不常用的 API——extend 和    $mount，它们经常一起使用。不常用，是因为在业务开发中，基本没有它们的用武之地，但在独立组件开发时，在一些特定的场景它们是至关重要的。  </p>  <h2 data-id="heading-1">使用场景</h2>  <p>    我们在写 Vue.js 时，不论是用 CDN 的方式还是在 Webpack 里用 npm 引入的    Vue.js，都会有一个根节点，并且创建一个根实例，比如：  </p>  <pre><code lang="html" class=""><span>&lt;<span>body</span>&gt;</span>  <span>&lt;<span>div</span> <span>id</span>=<span>"app"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>body</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>const</span> app = <span>new</span> Vue(&#123;    el: <span>'#app'</span>  &#125;);</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>Webpack 也类似，一般在入口文件 main.js 里，最后会创建一个实例：</p>  <pre><code lang="js" class=""><span>import</span> Vue <span>from</span> <span>'vue'</span>;<span>import</span> App <span>from</span> <span>'./app.vue'</span>;<span>new</span> Vue(&#123;  <span>el</span>: <span>'#app'</span>,  <span>render</span>: <span><span>h</span> =&gt;</span> h(App)&#125;);</code></pre>  <p>    因为用 Webpack 基本都是前端路由的，它的 html 里一般都只有一个根节点    <code>&lt;div id="app"&gt;&lt;/div&gt;</code>，其余都是通过 JavaScript    完成，也就是许多的 Vue.js 组件（每个页面也是一个组件）。  </p>  <p>    有了初始化的实例，之后所有的页面，都由 vue-router 帮我们管理，组件也都是用    <code>import</code> 导入后局部注册（也有在 main.js    全局注册的），不管哪种方式，组件（或页面）的创建过程我们是无需关心的，只是写好    <code>.vue</code> 文件并导入即可。这样的组件使用方式，有几个特点：  </p>  <ol>    <li>所有的内容，都是在 <code>#app</code> 节点内渲染的；</li>    <li>组件的模板，是事先定义好的；</li>    <li>由于组件的特性，注册的组件只能在当前位置渲染。</li>  </ol>  <p>    比如你要使用一个组件    <code>&lt;i-date-picker&gt;</code    >，渲染时，这个自定义标签就会被替换为组件的内容，而且在哪写的自定义标签，就在哪里被替换。换句话说，常规的组件使用方式，只能在规定的地方渲染组件，这在一些特殊场景下就比较局限了，例如：  </p>  <ol>    <li>组件的模板是通过调用接口从服务端获取的，需要动态渲染组件；</li>    <li>      实现类似原生 <code>window.alert()</code> 的提示框组件，它的位置是在      <code>&lt;body&gt;</code> 下，而非      <code>&lt;div id="app"&gt;</code      >，并且不会通过常规的组件自定义标签的形式使用，而是像 JS      调用函数一样使用。    </li>  </ol>  <p>    一般来说，在我们访问页面时，组件就已经渲染就位了，对于场景    1，组件的渲染是异步的，甚至预先不知道模板是什么。对于场景    2，其实并不陌生，在 jQuery 时代，通过操作    DOM，很容易就能实现，你可以沿用这种思路，只是这种做法不那么 Vue，既然使用    Vue.js 了，就应该用 Vue 的思路来解决问题。对于这两种场景，Vue.extend 和    vm.$mount 语法就派上用场了。  </p>  <h2 data-id="heading-2">用法</h2>  <p>    上文我们说到，创建一个 Vue 实例时，都会有一个选项    <code>el</code>，来指定实例的根节点，如果不写    <code>el</code> 选项，那组件就处于未挂载状态。<code>Vue.extend</code>    的作用，就是基于 Vue 构造器，创建一个“子类”，它的参数跟    <code>new Vue</code> 的基本一样，但    <code>data</code> 要跟组件一样，是个函数，再配合    <code>$mount</code> ，就可以让组件渲染，并且挂载到任意指定的节点上，比如    body。  </p>  <p>比如上文的场景，就可以这样写：</p>  <pre><code lang="js" class=""><span>import</span> Vue <span>from</span> <span>'vue'</span>;<span>const</span> AlertComponent = Vue.extend(&#123;  <span>template</span>: <span>'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span>,  data () &#123;    <span>return</span> &#123;      <span>message</span>: <span>'Hello, Aresn'</span>    &#125;;  &#125;,&#125;);</code></pre>  <p>    这一步，我们创建了一个构造器，这个过程就可以解决异步获取 template    模板的问题，下面要手动渲染组件，并把它挂载到 body 下：  </p>  <pre><code lang="js" class=""><span>const</span> component = <span>new</span> AlertComponent().$mount();</code></pre>  <p>    这一步，我们调用了    <code>$mount</code>    方法对组件进行了手动渲染，但它仅仅是被渲染好了，并没有挂载到节点上，也就显示不了组件。此时的    <code>component</code> 已经是一个标准的 Vue 组件实例，因此它的    <code>$el</code> 属性也可以被访问：  </p>  <pre><code lang="js" class=""><span>document</span>.body.appendChild(component.$el);</code></pre>  <p>当然，除了 body，你还可以挂载到其它节点上。</p>  <p><code>$mount</code> 也有一些快捷的挂载方式，以下两种都是可以的：</p>  <pre><code lang="js" class=""><span>// 在 $mount 里写参数来指定挂载的节点</span><span>new</span> AlertComponent().$mount(<span>'#app'</span>);<span>// 不用 $mount，直接在创建实例时指定 el 选项</span><span>new</span> AlertComponent(&#123; <span>el</span>: <span>'#app'</span> &#125;);</code></pre>  <p>    实现同样的效果，除了用 extend 外，也可以直接创建 Vue 实例，并且用一个 Render    函数来渲染一个 .vue 文件：  </p>  <pre><code lang="js" class=""><span>import</span> Vue <span>from</span> <span>'vue'</span>;<span>import</span> Notification <span>from</span> <span>'./notification.vue'</span>;<span>const</span> props = &#123;&#125;;  <span>// 这里可以传入一些组件的 props 选项</span><span>const</span> Instance = <span>new</span> Vue(&#123;  render (h) &#123;    <span>return</span> h(Notification, &#123;      <span>props</span>: props    &#125;);  &#125;&#125;);<span>const</span> component = Instance.$mount();<span>document</span>.body.appendChild(component.$el);</code></pre>  <p>    这样既可以使用 .vue 来写复杂的组件（毕竟在 template    里堆字符串很痛苦），还可以根据需要传入适当的 props。渲染后，如果想操作    Render 的    <code>Notification</code> 实例，也是很简单的：  </p>  <pre><code lang="js" class=""><span>const</span> notification = Instance.$children[<span>0</span>];</code></pre>  <p>    因为 Instance 下只 Render 了 Notification 一个子组件，所以可以用    <code>$children[0]</code> 访问到。  </p>  <blockquote>    <p>      如果你还不理解这样做的目的，没有关系，后面小节的两个实战你会感受到它的用武之地。    </p>  </blockquote>  <p>    需要注意的是，我们是用    <code>$mount</code> 手动渲染的组件，如果要销毁，也要用    <code>$destroy</code> 来手动销毁实例，必要时，也可以用    <code>removeChild</code> 把节点从 DOM 中移除。  </p>  <h2 data-id="heading-3">结语</h2>  <p>    这两个 API    并不难理解，只是不常使用罢了，因为多数情况下，我们只关注在业务层，并使用现成的组件库。  </p>  <p>    使用 Vue.js 也有二八原则，即 80% 的人看过    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2F"      title="https://cn.vuejs.org/v2/guide/"      ref="nofollow noopener noreferrer"      >Vue.js 文档教程篇</a    >，20% 的人看过    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F"      title="https://cn.vuejs.org/v2/api/"      ref="nofollow noopener noreferrer"      >Vue.js 文档 API</a    >。  </p>  <p>下一节，我们来做点有趣的东西。</p>  <h2 data-id="heading-4">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://juejin.cn/post/6844903502196506631"        title="https://juejin.cn/post/6844903502196506631"        >聊聊 Vue.js 的 template 编译</a      >    </li>  </ul></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-7】实战 2：组合多选框组件——CheckboxGroup &amp; Checkbox</title>
      <link href="/04cbc97d6481.html"/>
      <url>/04cbc97d6481.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    在第 5 节，我们完成了具有数据校验功能的组件    Form，本小节继续开发一个新的组件——组合多选框    Checkbox。它作为基础组件，也能集成在 Form 内并应用其验证规则。  </p>  <h2 data-id="heading-1">Checkbox 组件概览</h2>  <p>    多选框组件也是由两个组件组成：CheckboxGroup 和    Checkbox。单独使用时，只需要一个    Checkbox，组合使用时，两者都要用到。效果如下图所示：  </p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/2/166d39853b7facd8~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    单独使用，常见的场景有注册时勾选以同意注册条款，它只有一个独立的 Checkbox    组件，并且绑定一个布尔值，示例如下：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>i-checkbox</span> <span>v-model</span>=<span>"single"</span>&gt;</span>单独选项<span>&lt;/<span>i-checkbox</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    data () &#123;      <span>return</span> &#123;        <span>single</span>: <span>false</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>而组合使用的场景就很多了，填写表单时会经常用到，它的结构如下：</p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>i-checkbox-group</span> <span>v-model</span>=<span>"multiple"</span>&gt;</span>    <span>&lt;<span>i-checkbox</span> <span>label</span>=<span>"option1"</span>&gt;</span>选项 1<span>&lt;/<span>i-checkbox</span>&gt;</span>    <span>&lt;<span>i-checkbox</span> <span>label</span>=<span>"option2"</span>&gt;</span>选项 2<span>&lt;/<span>i-checkbox</span>&gt;</span>    <span>&lt;<span>i-checkbox</span> <span>label</span>=<span>"option3"</span>&gt;</span>选项 3<span>&lt;/<span>i-checkbox</span>&gt;</span>    <span>&lt;<span>i-checkbox</span> <span>label</span>=<span>"option4"</span>&gt;</span>选项 4<span>&lt;/<span>i-checkbox</span>&gt;</span>  <span>&lt;/<span>i-checkbox-group</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    data () &#123;      <span>return</span> &#123;        <span>multiple</span>: [<span>'option1'</span>, <span>'option3'</span>]      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    <code>v-model</code> 用在了 CheckboxGroup    上，绑定的值为一个数组，数组的值就是内部 Checkbox 绑定的 label。  </p>  <p>用法看起来比 Form 要简单多，不过也有两个个技术难点：</p>  <ul>    <li>Checkbox 要同时支持单独使用和组合使用的场景；</li>    <li>CheckboxGroup 和 Checkbox 内可能嵌套其它的布局组件。</li>  </ul>  <p>    对于第一点，要在 Checkbox 初始化时判断是否父级有    CheckboxGroup，如果有就是组合使用的，否则就是单独使用。而第二点，正好可以用上一节的通信方法，很容易就能解决。  </p>  <p>    两个组件并行开发，会容易理不清逻辑，不妨我们先开发独立的 Checkbox 组件。  </p>  <h2 data-id="heading-2">单独使用的 Checkbox</h2>  <p>设计一个组件时，还是要从它的 3 个 API 入手：prop、event、slot。</p>  <p>    因为要在 Checkbox 组件上直接使用    <code>v-model</code> 来双向绑定数据，那必不可少的一个 prop 就是    <code>value</code>，还有 event <code>input</code>，因为 v-model    本质上是一个语法糖（如果你还不清楚这种用法，可以阅读最后的扩展阅读 1）。  </p>  <p>    理论上，我们只需要给 <code>value</code> 设置为布尔值即可，也就是 true /    false，不过为了扩展性，我们再定义两个 props：<code>trueValue</code> 和    <code>falseValue</code>，它们允许用户指定    <code>value</code>    用什么值来判断是否选中。因为实际开发中，数据库中并不直接保存 true /    false，而是 1 / 0 或其它字符串，如果强制使用    Boolean，使用者就要再额外转换一次，这样的 API 设计不太友好。  </p>  <p>除此之外，还需要一个 <code>disabled</code> 属性来表示是否禁用。</p>  <p>    自定义事件 events 上文已经说了一个 <code>input</code>，用于实现 v-model    语法糖；另一个就是 <code>on-change</code>，当选中 /    取消选中时触发，用于通知父级状态发生了变化。  </p>  <p>slot 使用默认的就好，显示辅助文本。</p>  <p>    理清楚了 API，先来写一个基础的    <code>v-model</code> 功能，这在大部分组件中都类似。  </p>  <p>    在 <code>src/components</code> 下新建目录    <code>checkbox</code>，并新建两个文件 <code>checkbox.vue</code> 和    <code>checkbox-group.vue</code>。我们先来看 Checkbox：  </p>  <pre><code lang="html" class=""><span>&lt;!-- checkbox.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>label</span>&gt;</span>    <span>&lt;<span>span</span>&gt;</span>      <span>&lt;<span>input</span>             <span>type</span>=<span>"checkbox"</span>             <span>:disabled</span>=<span>"disabled"</span>             <span>:checked</span>=<span>"currentValue"</span>             @<span>change</span>=<span>"change"</span>&gt;</span>    <span>&lt;/<span>span</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>label</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'iCheckbox'</span>,    <span>props</span>: &#123;      <span>disabled</span>: &#123;        <span>type</span>: <span>Boolean</span>,        <span>default</span>: <span>false</span>      &#125;,      <span>value</span>: &#123;        <span>type</span>: [<span>String</span>, <span>Number</span>, <span>Boolean</span>],        <span>default</span>: <span>false</span>      &#125;,      <span>trueValue</span>: &#123;        <span>type</span>: [<span>String</span>, <span>Number</span>, <span>Boolean</span>],        <span>default</span>: <span>true</span>      &#125;,      <span>falseValue</span>: &#123;        <span>type</span>: [<span>String</span>, <span>Number</span>, <span>Boolean</span>],        <span>default</span>: <span>false</span>      &#125;    &#125;,    data () &#123;      <span>return</span> &#123;        <span>currentValue</span>: <span>this</span>.value      &#125;;    &#125;,    <span>methods</span>: &#123;      change (event) &#123;        <span>if</span> (<span>this</span>.disabled) &#123;          <span>return</span> <span>false</span>;        &#125;        <span>const</span> checked = event.target.checked;        <span>this</span>.currentValue = checked;        <span>const</span> value = checked ? <span>this</span>.trueValue : <span>this</span>.falseValue;        <span>this</span>.$emit(<span>'input'</span>, value);        <span>this</span>.$emit(<span>'on-change'</span>, value);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    因为 <code>value</code> 被定义为    prop，它只能由父级修改，本身是不能修改的，在 <code>&lt;input&gt;</code> 触发    change 事件，也就是点击选择时，不能由 Checkbox 来修改这个 value，所以我们在    data 里定义了一个 <code>currentValue</code>，并把它绑定在    <code>&lt;input :checked="currentValue"&gt;</code>，这样就可以在 Checkbox    内修改 <code>currentValue</code>。这是自定义组件使用    <code>v-model</code> 的“惯用伎俩”。  </p>  <p>代码看起来都很简单，但有三个细节需要额外说明：</p>  <ol>    <li>      选中的控件，直接使用了      <code>&lt;input type="checkbox"&gt;</code>，而没有用 div + css      来自己实现选择的逻辑和样式，这样的好处是，使用 input      元素，你的自定义组件仍然为 html      内置的基础组件，可以使用浏览器默认的行为和快捷键，也就是说，浏览器知道这是一个选择框，而换成      div + css，浏览器可不知道这是个什么鬼。如果你觉得原生的 input      丑，没关系，是可以用 css 美化的，不过这不是本小册的重点，在此就不介绍了。    </li>    <li>      <code>&lt;input&gt;</code>、<code>&lt;slot&gt;</code> 都是包裹在一个      <code>&lt;label&gt;</code> 元素内的，这样做的好处是，当点击      <code>&lt;slot&gt;</code> 里的文字时，<code>&lt;input&gt;</code>      选框也会被触发，否则只有点击那个小框才会触发，那样不太容易选中，影响用户体验。    </li>    <li>      <code>currentValue</code> 仍然是布尔值（true / false），因为它是组件      Checkbox 自己使用的，对于使用者无需关心，而 value 可以是 String、Number 或      Boolean，这取决于 <code>trueValue</code> 和      <code>falseValue</code> 的定义。    </li>  </ol>  <p>    现在实现的 <code>v-model</code>，只是由内而外的，也就是说，通过点击    <code>&lt;input&gt;</code>选择，会通知到使用者，而使用者手动修改了 prop    <code>value</code> ，Checkbox 是没有做响应的，那继续补充代码：  </p>  <pre><code lang="html" class=""><span>&lt;!-- checkbox.vue，部分代码省略 --&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>watch</span>: &#123;      value (val) &#123;        <span>if</span> (val === <span>this</span>.trueValue || val === <span>this</span>.falseValue) &#123;          <span>this</span>.updateModel();        &#125; <span>else</span> &#123;          <span>throw</span> <span>'Value should be trueValue or falseValue.'</span>;        &#125;      &#125;    &#125;,    <span>methods</span>: &#123;      updateModel () &#123;        <span>this</span>.currentValue = <span>this</span>.value === <span>this</span>.trueValue;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    我们对 prop <code>value</code> 使用 watch 进行了监听，当父级修改它时，会调用    <code>updateModel</code> 方法，同步修改内部的    <code>currentValue</code> 。不过，不是所有的值父级都能修改的，所以用 if    条件判断了父级修改的值是否符合 trueValue / falseValue 所设置的，否则会抛错。  </p>  <p>    Checkbox 也是一个基础的表单类组件，它完全可以集成到 Form 里，所以，我们使用    Emitter 在 change 事件触发时，向 Form 派发一个事件，这样你就可以用第 5 节的    Form 组件来做数据校验了：  </p>  <pre><code lang="html" class=""><span>&lt;!-- checkbox.vue，部分代码省略 --&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> Emitter <span>from</span> <span>'../../mixins/emitter.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>mixins</span>: [ Emitter ],    <span>methods</span>: &#123;      change (event) &#123;        <span>// ... </span>        <span>this</span>.$emit(<span>'input'</span>, value);        <span>this</span>.$emit(<span>'on-change'</span>, value);        <span>this</span>.dispatch(<span>'iFormItem'</span>, <span>'on-form-change'</span>, value);      &#125;    &#125;,  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    至此，Checkbox 已经可以单独使用了，并支持 Form    的数据校验。下面来看组合使用。  </p>  <h3 data-id="heading-3">组合使用的 CheckboxGroup</h3>  <blockquote>    <p>      友情提示：请先阅读 Vue.js 文档的      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fforms.html%23%25E5%25A4%258D%25E9%2580%2589%25E6%25A1%2586"        title="https://cn.vuejs.org/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86"        ref="nofollow noopener noreferrer"        >cn.vuejs.org/v2/guide/fo…</a      >      内容。    </p>  </blockquote>  <p>CheckboxGroup 的 API 很简单：</p>  <ul>    <li>      props：<code>value</code>，与 Checkbox 的类似，用于 v-model      双向绑定数据，格式为数组；    </li>    <li>events：<code>on-change</code>，同 Checkbox；</li>    <li>slots：默认，用于放置 Checkbox。</li>  </ul>  <p>    如果写了    CheckboxGroup，那就代表你要组合使用多选框，而非单独使用，两种模式，只能用其一，而判断的依据，就是是否用了    CheckboxGroup 组件。所以在 Checkbox 组件内，我们用上一节的    <code>findComponentUpward</code> 方法判断父组件是否有    <code>CheckboxGroup</code>：  </p>  <pre><code lang="html" class=""><span>&lt;!-- checkbox.vue，部分代码省略 --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>label</span>&gt;</span>    <span>&lt;<span>span</span>&gt;</span>      <span>&lt;<span>input</span>             <span>v-if</span>=<span>"group"</span>             <span>type</span>=<span>"checkbox"</span>             <span>:disabled</span>=<span>"disabled"</span>             <span>:value</span>=<span>"label"</span>             <span>v-model</span>=<span>"model"</span>             @<span>change</span>=<span>"change"</span>&gt;</span>      <span>&lt;<span>input</span>             <span>v-else</span>             <span>type</span>=<span>"checkbox"</span>             <span>:disabled</span>=<span>"disabled"</span>             <span>:checked</span>=<span>"currentValue"</span>             @<span>change</span>=<span>"change"</span>&gt;</span>    <span>&lt;/<span>span</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>label</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> &#123; findComponentUpward &#125; <span>from</span> <span>'../../utils/assist.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'iCheckbox'</span>,    <span>props</span>: &#123;      <span>label</span>: &#123;        <span>type</span>: [<span>String</span>, <span>Number</span>, <span>Boolean</span>]      &#125;    &#125;,    data () &#123;      <span>return</span> &#123;        <span>model</span>: [],        <span>group</span>: <span>false</span>,        <span>parent</span>: <span>null</span>      &#125;;    &#125;,    mounted () &#123;      <span>this</span>.parent = findComponentUpward(<span>this</span>, <span>'iCheckboxGroup'</span>);      <span>if</span> (<span>this</span>.parent) &#123;        <span>this</span>.group = <span>true</span>;      &#125;      <span>if</span> (<span>this</span>.group) &#123;        <span>this</span>.parent.updateModel(<span>true</span>);      &#125; <span>else</span> &#123;        <span>this</span>.updateModel();      &#125;    &#125;,  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    在 mounted 时，通过 findComponentUpward 方法，来判断父级是否有 CheckboxGroup    组件，如果有，就将    <code>group</code> 置为 true，并触发 CheckboxGroup 的    <code>updateModel</code> 方法，下文会介绍它的作用。  </p>  <p>    在 template 里，我们又写了一个 <code>&lt;input&gt;</code> 来区分是否是 group    模式。Checkbox 的 data 里新增加的 <code>model</code> 数据，其实就是父级    CheckboxGroup 的 <code>value</code>，会在下文的    <code>updateModel</code> 方法里给 Checkbox 赋值。  </p>  <p>    Checkbox 新增的 prop： <code>label</code> 只会在组合使用时有效，结合    <code>model</code> 来使用，用法已在 Vue.js 文档中介绍了    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fforms.html%23%25E5%25A4%258D%25E9%2580%2589%25E6%25A1%2586"      title="https://cn.vuejs.org/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86"      ref="nofollow noopener noreferrer"      >cn.vuejs.org/v2/guide/fo…</a    >。  </p>  <p>    在组合模式下，Checkbox 选中，就不用对 Form 派发事件了，应该在 CheckboxGroup    中派发，所以对 Checkbox 做最后的修改：  </p>  <pre><code lang="html" class=""><span>&lt;!-- checkbox.vue，部分代码省略 --&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>methods</span>: &#123;      change (event) &#123;        <span>if</span> (<span>this</span>.disabled) &#123;          <span>return</span> <span>false</span>;        &#125;        <span>const</span> checked = event.target.checked;        <span>this</span>.currentValue = checked;        <span>const</span> value = checked ? <span>this</span>.trueValue : <span>this</span>.falseValue;        <span>this</span>.$emit(<span>'input'</span>, value);        <span>if</span> (<span>this</span>.group) &#123;          <span>this</span>.parent.change(<span>this</span>.model);        &#125; <span>else</span> &#123;          <span>this</span>.$emit(<span>'on-change'</span>, value);          <span>this</span>.dispatch(<span>'iFormItem'</span>, <span>'on-form-change'</span>, value);        &#125;      &#125;,      updateModel () &#123;        <span>this</span>.currentValue = <span>this</span>.value === <span>this</span>.trueValue;      &#125;,    &#125;,  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>剩余的工作，就是完成 checkbox-gourp.vue 文件：</p>  <pre><code lang="html" class=""><span>&lt;!-- checkbox-group.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> &#123; findComponentsDownward &#125; <span>from</span> <span>'../../utils/assist.js'</span>;  <span>import</span> Emitter <span>from</span> <span>'../../mixins/emitter.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'iCheckboxGroup'</span>,    <span>mixins</span>: [ Emitter ],    <span>props</span>: &#123;      <span>value</span>: &#123;        <span>type</span>: <span>Array</span>,        <span>default</span> () &#123;          <span>return</span> [];        &#125;      &#125;    &#125;,    data () &#123;      <span>return</span> &#123;        <span>currentValue</span>: <span>this</span>.value,        <span>childrens</span>: []      &#125;;    &#125;,    <span>methods</span>: &#123;      updateModel (update) &#123;        <span>this</span>.childrens = findComponentsDownward(<span>this</span>, <span>'iCheckbox'</span>);        <span>if</span> (<span>this</span>.childrens) &#123;          <span>const</span> &#123; value &#125; = <span>this</span>;          <span>this</span>.childrens.forEach(<span><span>child</span> =&gt;</span> &#123;            child.model = value;            <span>if</span> (update) &#123;              child.currentValue = value.indexOf(child.label) &gt;= <span>0</span>;              child.group = <span>true</span>;            &#125;          &#125;);        &#125;      &#125;,      change (data) &#123;        <span>this</span>.currentValue = data;        <span>this</span>.$emit(<span>'input'</span>, data);        <span>this</span>.$emit(<span>'on-change'</span>, data);        <span>this</span>.dispatch(<span>'iFormItem'</span>, <span>'on-form-change'</span>, data);      &#125;    &#125;,    mounted () &#123;      <span>this</span>.updateModel(<span>true</span>);    &#125;,    <span>watch</span>: &#123;      value () &#123;        <span>this</span>.updateModel(<span>true</span>);      &#125;    &#125;  &#125;;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    代码很容易理解，需要介绍的就是    <code>updateModel</code> 方法。可以看到，一共有 3 个地方调用了    <code>updateModel</code>，其中两个是 CheckboxGroup 的 mounted 初始化和 watch    监听的 value 变化时调用；另一个是在 Checkbox 里的 mounted    初始化时调用。这个方法的作用就是在 CheckboxGroup 里通过    <code>findComponentsDownward</code> 方法找到所有的 Checkbox，然后把    CheckboxGroup 的 <code>value</code>，赋值给 Checkbox 的    <code>model</code>，并根据 Checkbox 的 <code>label</code>，设置一次当前    Checkbox    的选中状态。这样无论是由内而外选择，或由外向内修改数据，都是双向绑定的，而且支持动态增加    Checkbox 的数量。  </p>  <p>    以上就是组合多选组件——CheckboxGroup &amp; Checkbox 的全部内容，不知道你是否    get 到了呢！  </p>  <p>留两个小作业：</p>  <ol>    <li>      将 CheckboxGroup 和 Checkbox 组件集成在 Form 里完成一个数据校验的示例；    </li>    <li>参考本节的代码，实现一个单选组件 Radio 和 RadioGroup。</li>  </ol>  <h2 data-id="heading-4">结语</h2>  <p>你看到的简单组件，其实都不简单。</p>  <h2 data-id="heading-5">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://juejin.cn/post/6844903490653782029"        title="https://juejin.cn/post/6844903490653782029"        >v-model 指令在组件中怎么玩</a      >    </li>  </ul>  <p>    注：本节部分代码参考    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview%2Ftree%2F2.0%2Fsrc%2Fcomponents%2Fcheckbox"      title="https://github.com/iview/iview/tree/2.0/src/components/checkbox"      ref="nofollow noopener noreferrer"      >iView</a    >。  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-6】组件的通信 3：找到任意组件实例——findComponents 系列方法</title>
      <link href="/323d89bab85b.html"/>
      <url>/323d89bab85b.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <h2 data-id="heading-1">概述</h2>  <p>    前面的小节我们已经介绍了两种组件间通信的方法：provide / inject 和 dispatch /    broadcast。它们有各自的使用场景和局限，比如前者多用于子组件获取父组件的状态，后者常用于父子组件间通过自定义事件通信。  </p>  <p>    本节将介绍第 3 种组件通信方法，也就是 findComponents 系列方法，它并非 Vue.js    内置，而是需要自行实现，以工具函数的形式来使用，它是一系列的函数，可以说是组件通信的终极方案。findComponents    系列方法最终都是返回组件的实例，进而可以读取或调用该组件的数据和方法。  </p>  <p>它适用于以下场景：</p>  <ul>    <li>由一个组件，向上找到最近的指定组件；</li>    <li>由一个组件，向上找到所有的指定组件；</li>    <li>由一个组件，向下找到最近的指定组件；</li>    <li>由一个组件，向下找到所有指定的组件；</li>    <li>由一个组件，找到指定组件的兄弟组件。</li>  </ul>  <p>5 个不同的场景，对应 5 个不同的函数，实现原理也大同小异。</p>  <h2 data-id="heading-2">实现</h2>  <p>    5 个函数的原理，都是通过递归、遍历，找到指定组件的    <code>name</code> 选项匹配的组件实例并返回。  </p>  <blockquote>    <p>本节以及后续章节，都是基于上一节的工程来完成，后续不再重复说明。</p>    <p>      完整源码地址：<a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ficarusion%2Fvue-component-book"        title="https://github.com/icarusion/vue-component-book"        ref="nofollow noopener noreferrer"        >github.com/icarusion/v…</a      >    </p>  </blockquote>  <p>    在目录 <code>src</code> 下新建文件夹    <code>utils</code> 用来放置工具函数，并新建文件    <code>assist.js</code>，本节所有函数都在这个文件里完成，每个函数都通过    <code>export</code> 对外提供（如果你不了解 export，请查看扩展阅读1）。  </p>  <h3 data-id="heading-3">向上找到最近的指定组件——findComponentUpward</h3>  <p>先看代码：</p>  <pre><code lang="js" class=""><span>// assist.js</span><span>// 由一个组件，向上找到最近的指定组件</span><span><span>function</span> <span>findComponentUpward</span> (<span>context, componentName</span>) </span>&#123;  <span>let</span> parent = context.$parent;  <span>let</span> name = parent.$options.name;  <span>while</span> (parent &amp;&amp; (!name || [componentName].indexOf(name) &lt; <span>0</span>)) &#123;    parent = parent.$parent;    <span>if</span> (parent) name = parent.$options.name;  &#125;  <span>return</span> parent;&#125;<span>export</span> &#123; findComponentUpward &#125;;</code></pre>  <p>    findComponentUpward    接收两个参数，第一个是当前上下文，比如你要基于哪个组件来向上寻找，一般都是基于当前的组件，也就是传入    <code>this</code>；第二个参数是要找的组件的 <code>name</code> 。  </p>  <p>    findComponentUpward 方法会在 while 语句里不断向上覆盖当前的    <code>parent</code> 对象，通过判断组件（即 parent）的 name 与传入的    componentName 是否一致，直到直到最近的一个组件为止。  </p>  <p>    与 dispatch 不同的是，findComponentUpward    是直接拿到组件的实例，而非通过事件通知组件。比如下面的示例，有组件 A 和组件    B，A 是 B 的父组件，在 B 中获取和调用 A 中的数据和方法：  </p>  <pre><code lang="html" class=""><span>&lt;!-- component-a.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 A    <span>&lt;<span>component-b</span>&gt;</span><span>&lt;/<span>component-b</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> componentB <span>from</span> <span>'./component-b.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'componentA'</span>,    <span>components</span>: &#123; componentB &#125;,    data () &#123;      <span>return</span> &#123;        <span>name</span>: <span>'Aresn'</span>      &#125;    &#125;,    <span>methods</span>: &#123;      sayHello () &#123;        <span>console</span>.log(<span>'Hello, Vue.js'</span>);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="html" class=""><span>&lt;!-- component-b.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 B  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> &#123; findComponentUpward &#125; <span>from</span> <span>'../utils/assist.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'componentB'</span>,    mounted () &#123;      <span>const</span> comA = findComponentUpward(<span>this</span>, <span>'componentA'</span>);            <span>if</span> (comA) &#123;        <span>console</span>.log(comA.name);  <span>// Aresn</span>        comA.sayHello();  <span>// Hello, Vue.js</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    使用起来很简单，只要在需要的地方调用 findComponentUpward    方法就行，第一个参数一般都是传入 this，即当前组件的上下文（实例）。  </p>  <p>    上例的 comA，保险起见，加了一层 <code>if (comA)</code> 来判断是否找到了组件    A，如果没有指定的组件而调用的话，是会报错的。  </p>  <p>    findComponentUpward    只会找到最近的一个组件实例，如果要找到全部符合要求的组件，就需要用到下面的这个方法。  </p>  <h3 data-id="heading-4">向上找到所有的指定组件——findComponentsUpward</h3>  <p>代码如下：</p>  <pre><code lang="js" class=""><span>// assist.js</span><span>// 由一个组件，向上找到所有的指定组件</span><span><span>function</span> <span>findComponentsUpward</span> (<span>context, componentName</span>) </span>&#123;  <span>let</span> parents = [];  <span>const</span> parent = context.$parent;  <span>if</span> (parent) &#123;    <span>if</span> (parent.$options.name === componentName) parents.push(parent);    <span>return</span> parents.concat(findComponentsUpward(parent, componentName));  &#125; <span>else</span> &#123;    <span>return</span> [];  &#125;&#125;<span>export</span> &#123; findComponentsUpward &#125;;</code></pre>  <p>    与 findComponentUpward 不同的是，findComponentsUpward    返回的是一个数组，包含了所有找到的组件实例（注意函数名称中多了一个“s”）。  </p>  <p>    findComponentsUpward    的使用场景较少，一般只用在递归组件里面（后面小节会介绍），因为这个函数是一直向上寻找父级（parent）的，只有递归组件的父级才是自身。事实上，iView    在使用这个方法也都是用在递归组件的场景，比如菜单组件 Menu。由于递归组件在    Vue.js 组件里面并不常用，那自然 findComponentsUpward 也不常用了。  </p>  <h3 data-id="heading-5">向下找到最近的指定组件——findComponentDownward</h3>  <p>代码如下：</p>  <pre><code lang="js" class=""><span>// assist.js</span><span>// 由一个组件，向下找到最近的指定组件</span><span><span>function</span> <span>findComponentDownward</span> (<span>context, componentName</span>) </span>&#123;  <span>const</span> childrens = context.$children;  <span>let</span> children = <span>null</span>;  <span>if</span> (childrens.length) &#123;    <span>for</span> (<span>const</span> child <span>of</span> childrens) &#123;      <span>const</span> name = child.$options.name;      <span>if</span> (name === componentName) &#123;        children = child;        <span>break</span>;      &#125; <span>else</span> &#123;        children = findComponentDownward(child, componentName);        <span>if</span> (children) <span>break</span>;      &#125;    &#125;  &#125;  <span>return</span> children;&#125;<span>export</span> &#123; findComponentDownward &#125;;</code></pre>  <p>    <code>context.$children</code>    得到的是当前组件的全部子组件，所以需要遍历一遍，找到有没有匹配到的组件    <code>name</code>，如果没找到，继续递归找每个 $children 的    $children，直到找到最近的一个为止。  </p>  <p>来看个示例，仍然是 A、B 两个组件，A 是 B 的父组件，在 A 中找到 B：</p>  <pre><code lang="html" class=""><span>&lt;!-- component-b.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 B  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'componentB'</span>,    data () &#123;      <span>return</span> &#123;        <span>name</span>: <span>'Aresn'</span>      &#125;    &#125;,    <span>methods</span>: &#123;      sayHello () &#123;        <span>console</span>.log(<span>'Hello, Vue.js'</span>);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="html" class=""><span>&lt;!-- component-a.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 A    <span>&lt;<span>component-b</span>&gt;</span><span>&lt;/<span>component-b</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> componentB <span>from</span> <span>'./component-b.vue'</span>;  <span>import</span> &#123; findComponentDownward &#125; <span>from</span> <span>'../utils/assist.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'componentA'</span>,    <span>components</span>: &#123; componentB &#125;,    mounted () &#123;      <span>const</span> comB = findComponentDownward(<span>this</span>, <span>'componentB'</span>);      <span>if</span> (comB) &#123;        <span>console</span>.log(comB.name);  <span>// Aresn</span>        comB.sayHello();  <span>// Hello, Vue.js</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    示例中的 A 和 B 是父子关系，因此也可以直接用    <code>ref</code> 来访问，但如果不是父子关系，中间间隔多代，用它就很方便了。  </p>  <h3 data-id="heading-6">向下找到所有指定的组件——findComponentsDownward</h3>  <p>    如果要向下找到所有的指定组件，要用到 findComponentsDownward 函数，代码如下：  </p>  <pre><code lang="js" class=""><span>// assist.js</span><span>// 由一个组件，向下找到所有指定的组件</span><span><span>function</span> <span>findComponentsDownward</span> (<span>context, componentName</span>) </span>&#123;  <span>return</span> context.$children.reduce(<span>(<span>components, child</span>) =&gt;</span> &#123;    <span>if</span> (child.$options.name === componentName) components.push(child);    <span>const</span> foundChilds = findComponentsDownward(child, componentName);    <span>return</span> components.concat(foundChilds);  &#125;, []);&#125;<span>export</span> &#123; findComponentsDownward &#125;;</code></pre>  <p>    这个函数实现的方式有很多，这里巧妙使用    <code>reduce</code>    做累加器，并用递归将找到的组件合并为一个数组并返回，代码量较少，但理解起来稍困难。  </p>  <p>用法与 findComponentDownward 大同小异，就不再写用例了。</p>  <h3 data-id="heading-7">找到指定组件的兄弟组件——findBrothersComponents</h3>  <p>代码如下：</p>  <pre><code lang="js" class=""><span>// assist.js</span><span>// 由一个组件，找到指定组件的兄弟组件</span><span><span>function</span> <span>findBrothersComponents</span> (<span>context, componentName, exceptMe = true</span>) </span>&#123;  <span>let</span> res = context.$parent.$children.filter(<span><span>item</span> =&gt;</span> &#123;    <span>return</span> item.$options.name === componentName;  &#125;);  <span>let</span> index = res.findIndex(<span><span>item</span> =&gt;</span> item._uid === context._uid);  <span>if</span> (exceptMe) res.splice(index, <span>1</span>);  <span>return</span> res;&#125;<span>export</span> &#123; findBrothersComponents &#125;;</code></pre>  <p>    相比其它 4 个函数，findBrothersComponents 多了一个参数    <code>exceptMe</code>，是否把本身除外，默认是    true。寻找兄弟组件的方法，是先获取    <code>context.$parent.$children</code    >，也就是父组件的全部子组件，这里面当前包含了本身，所有也会有第三个参数    exceptMe。Vue.js 在渲染组件时，都会给每个组件加一个内置的属性    <code>_uid</code>，这个 _uid    是不会重复的，借此我们可以从一系列兄弟组件中把自己排除掉。  </p>  <p>    举个例子，组件 A 是组件 B 的父级，在 B 中找到所有在 A    中的兄弟组件（也就是所有在 A 中的 B 组件）：  </p>  <pre><code lang="html" class=""><span>&lt;!-- component-a.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 A    <span>&lt;<span>component-b</span>&gt;</span><span>&lt;/<span>component-b</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> componentB <span>from</span> <span>'./component-b.vue'</span>;    <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'componentA'</span>,    <span>components</span>: &#123; componentB &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="html" class=""><span>&lt;!-- component-b.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 B  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> &#123; findBrothersComponents &#125; <span>from</span> <span>'../utils/assist.js'</span>;    <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'componentB'</span>,    mounted () &#123;      <span>const</span> comsB = findBrothersComponents(<span>this</span>, <span>'componentB'</span>);      <span>console</span>.log(comsB);  <span>// ① []，空数组</span>    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    在 ① 的位置，打印出的内容为空数组，原因是当前 A 中只有一个 B，而    findBrothersComponents 的第三个参数默认是 true，也就是将自己除外。如果在 A    中再写一个 B：  </p>  <pre><code lang="html" class=""><span>&lt;!-- component-a.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    组件 A    <span>&lt;<span>component-b</span>&gt;</span><span>&lt;/<span>component-b</span>&gt;</span>    <span>&lt;<span>component-b</span>&gt;</span><span>&lt;/<span>component-b</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span></code></pre>  <p>    这时就会打印出    <code>[VueComponent]</code    >，有一个组件了，但要注意在控制台会打印两遍，因为在 A 中写了两个 B，而    <code>console.log</code> 是在 B    中定义的，所以两个都会执行到。如果你看懂了这里，那应该明白打印的两遍    <code>[VueComponent]</code>，分别是另一个    <code>&lt;component-b&gt;</code>（如果没有搞懂，要仔细琢磨琢磨哦）。  </p>  <p>如果将 B 中 findBrothersComponents 的第三个参数设置为 false：</p>  <pre><code lang="js" class=""><span>// component-b.vue</span><span>export</span> <span>default</span> &#123;  <span>name</span>: <span>'componentB'</span>,  mounted () &#123;    <span>const</span> comsB = findBrothersComponents(<span>this</span>, <span>'componentB'</span>, <span>false</span>);    <span>console</span>.log(comsB);  &#125;&#125;</code></pre>  <p>    此时就会打印出 <code>[VueComponent, VueComponent]</code>，也就是包含自身了。  </p>  <p>    以上就是 5 个函数的详细介绍，get 到这 5 个，以后就再也不用担心组件通信了。  </p>  <h2 data-id="heading-8">结语</h2>  <p>只有你认真开发过 Vue.js 独立组件，才会明白这 5 个函数的强大之处。</p>  <h2 data-id="heading-9">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://link.juejin.cn?target=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fmodule"        title="http://es6.ruanyifeng.com/#docs/module"        ref="nofollow noopener noreferrer"        >ES6 Module 的语法</a      >    </li>  </ul>  <p>    注：本节部分代码参考    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview%2Fblob%2F2.0%2Fsrc%2Futils%2Fassist.js"      title="https://github.com/iview/iview/blob/2.0/src/utils/assist.js"      ref="nofollow noopener noreferrer"      >iView</a    >。  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-5】实战 1：具有数据校验功能的表单组件——Form</title>
      <link href="/be59c6512284.html"/>
      <url>/be59c6512284.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    在第 3 节和第 4 节中，我们介绍了组件间的两种通信方法：provide / inject 和    dispatch / broadcast，前者是 Vue.js    内置的，主要用于子组件获取父组件（包括跨级）的状态；后者是自行实现的一种混合，用于父子组件（包括跨级）间通过自定义事件通信。本小节则基于这两种通信方法，来实现一个具有数据校验功能的表单组件——Form。  </p>  <h2 data-id="heading-1">Form 组件概览</h2>  <p>    表单类组件在项目中会大量使用，比如输入框（Input）、单选（Radio）、多选（Checkbox）、下拉选择器（Select）等。在使用表单类组件时，也会经常用到数据校验，如果每次都写校验程序来对每一个表单控件校验，会很低效，因此需要一个能够校验基础表单控件的组件，也就是本节要完成的    Form 组件。一般的组件库都提供了这个组件，比如 iView，它能够校验内置的 15    种控件，且支持校验自定义组件，如下图所示：  </p>  <p>    （也可以在线访问本示例体验：<a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Frun.iviewui.com%2FjwrqnFss"      title="https://run.iviewui.com/jwrqnFss"      ref="nofollow noopener noreferrer"      >run.iviewui.com/jwrqnFss</a    >）  </p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/30/166c3b75c37ef9a8~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    Form 组件分为两个部分，一个是外层的    <code>Form</code> 表单域组件，一组表单控件只有一个 Form，而内部包含了多个    <code>FormItem</code> 组件，每一个表单控件都被一个 FormItem    包裹。基本的结构看起来像：  </p>  <pre><code lang="html" class=""><span>&lt;<span>i-form</span>&gt;</span>  <span>&lt;<span>i-form-item</span>&gt;</span>    <span>&lt;<span>i-input</span> <span>v-model</span>=<span>"form.name"</span>&gt;</span><span>&lt;/<span>i-input</span>&gt;</span>  <span>&lt;/<span>i-form-item</span>&gt;</span>  <span>&lt;<span>i-form-item</span>&gt;</span>    <span>&lt;<span>i-input</span> <span>v-model</span>=<span>"form.mail"</span>&gt;</span><span>&lt;/<span>i-input</span>&gt;</span>  <span>&lt;/<span>i-form-item</span>&gt;</span><span>&lt;/<span>i-form</span>&gt;</span></code></pre>  <p>    Form 要用到数据校验，并在对应的 FormItem    中给出校验失败的提示，校验我们会用到一个开源库：<a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fyiminghe%2Fasync-validator"      title="https://github.com/yiminghe/async-validator"      ref="nofollow noopener noreferrer"      >async-validator</a    >，基本主流的组件库都是基于它做的校验。使用它很简单，只需按要求写好一个校验规则就好，比如：  </p>  <pre><code lang="js" class="">[  &#123; <span>required</span>: <span>true</span>, <span>message</span>: <span>'邮箱不能为空'</span>, <span>trigger</span>: <span>'blur'</span> &#125;,  &#123; <span>type</span>: <span>'email'</span>, <span>message</span>: <span>'邮箱格式不正确'</span>, <span>trigger</span>: <span>'blur'</span> &#125;]</code></pre>  <p>    这个代表要校验的数据先判断是否为空（required:    true），如果为空，则提示“邮箱不能为空”，触发校验的事件为失焦（trigger:    'blur'），如果第一条满足要求，再进行第二条的验证，判断是否为邮箱格式（type:    'email'）等等，还支持自定义校验规则。更详细的用法可以参看它的文档。  </p>  <h2 data-id="heading-2">接口设计</h2>  <p>    我们先使用最新的 Vue CLI 3 创建一个空白的项目（如果你还不清楚 Vue CLI 3    的用法，需要先补习一下了，可以阅读文末的扩展阅读 1），并使用    <code>vue-router</code> 插件，同时安装好 <code>async-validator</code> 库。  </p>  <p>    在 <code>src/components</code> 下新建一个    <code>form</code> 文件夹，并初始化两个组件 <code>form.vue</code> 和    <code>form-item.vue</code    >，然后初始化项目，配置路由，创建一个页面能够被访问到。  </p>  <blockquote>    <p>      本节所有代码可以在      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ficarusion%2Fvue-component-book"        title="https://github.com/icarusion/vue-component-book"        ref="nofollow noopener noreferrer"        >github.com/icarusion/v…</a      >      中查看，你可以一边看源码，一边阅读本节；也可以边阅读，边动手实现一遍，遇到问题再参考完整的源码。    </p>  </blockquote>  <p>    第 2 节我们介绍到，编写一个 Vue.js 组件，最重要的是设计好它的接口，一个    Vue.js 组件的接口来自三个部分：props、slots、events。而 Form 和 FormItem    两个组件主要做数据校验，用不到 events。Form 的 slot 就是一系列的    FormItem，FormItem 的 slot 就是具体的表单控件，比如输入框    <code>&lt;i-input&gt;</code> 。那主要设计的就是 props 了。  </p>  <p>在 <code>Form</code> 组件中，定义两个 props：</p>  <ul>    <li>      model：表单控件绑定的数据对象，在校验或重置时会访问该数据对象下对应的表单数据，类型为      Object。    </li>    <li>      rules：表单验证规则，即上面介绍的 async-validator 所使用的校验规则，类型为      Object。    </li>  </ul>  <p>在 <code>FormItem</code> 组件中，也定义两个 props：</p>  <ul>    <li>      label：单个表单组件的标签文本，类似原生的      <code>&lt;label&gt;</code> 元素，类型为 String。    </li>    <li>      prop：对应表单域 Form 组件 model      里的字段，用于在校验或重置时访问表单组件绑定的数据，类型为 String。    </li>  </ul>  <p>定义好 props，就可以写出大概的用例了：</p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>i-form</span> <span>:model</span>=<span>"formValidate"</span> <span>:rules</span>=<span>"ruleValidate"</span>&gt;</span>      <span>&lt;<span>i-form-item</span> <span>label</span>=<span>"用户名"</span> <span>prop</span>=<span>"name"</span>&gt;</span>        <span>&lt;<span>i-input</span> <span>v-model</span>=<span>"formValidate.name"</span>&gt;</span><span>&lt;/<span>i-input</span>&gt;</span>      <span>&lt;/<span>i-form-item</span>&gt;</span>      <span>&lt;<span>i-form-item</span> <span>label</span>=<span>"邮箱"</span> <span>prop</span>=<span>"mail"</span>&gt;</span>        <span>&lt;<span>i-input</span> <span>v-model</span>=<span>"formValidate.mail"</span>&gt;</span><span>&lt;/<span>i-input</span>&gt;</span>      <span>&lt;/<span>i-form-item</span>&gt;</span>    <span>&lt;/<span>i-form</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> iForm <span>from</span> <span>'../components/form/form.vue'</span>;  <span>import</span> iFormItem <span>from</span> <span>'../components/form/form-item.vue'</span>;  <span>import</span> iInput <span>from</span> <span>'../components/input/input.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; iForm, iFormItem, iInput &#125;,    data () &#123;      <span>return</span> &#123;        <span>formValidate</span>: &#123;          <span>name</span>: <span>''</span>,          <span>mail</span>: <span>''</span>        &#125;,        <span>ruleValidate</span>: &#123;          <span>name</span>: [            &#123; <span>required</span>: <span>true</span>, <span>message</span>: <span>'用户名不能为空'</span>, <span>trigger</span>: <span>'blur'</span> &#125;          ],          <span>mail</span>: [            &#123; <span>required</span>: <span>true</span>, <span>message</span>: <span>'邮箱不能为空'</span>, <span>trigger</span>: <span>'blur'</span> &#125;,            &#123; <span>type</span>: <span>'email'</span>, <span>message</span>: <span>'邮箱格式不正确'</span>, <span>trigger</span>: <span>'blur'</span> &#125;          ],        &#125;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>有两点需要注意的是：</p>  <ol>    <li>      这里的 <code>&lt;i-input&gt;</code> 并不是原生的      <code>&lt;input&gt;</code>      输入框，而是一个特制的输入框组件，之后会介讲解的功能和代码；    </li>    <li>      <code>&lt;i-form-item&gt;</code> 的属性      <code>prop</code> 是字符串，所以它前面没有冒号（即不是      <code>:prop="name"</code>）。    </li>  </ol>  <p>    当前的两个组件只是个框框，还没有实现任何功能，不过万事开头难，定义好接口，剩下的就是补全组件的逻辑，而对于使用者，知道了    props、events、slots，就已经能写出上例的使用代码了。  </p>  <p>到此，Form 和 FormItem 的代码如下：</p>  <pre><code lang="html" class=""><span>&lt;!-- form.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>form</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>form</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'iForm'</span>,    <span>props</span>: &#123;      <span>model</span>: &#123;        <span>type</span>: <span>Object</span>      &#125;,      <span>rules</span>: &#123;        <span>type</span>: <span>Object</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="html" class=""><span>&lt;!-- form-item.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>label</span> <span>v-if</span>=<span>"label"</span>&gt;</span>&#123;&#123; label &#125;&#125;<span>&lt;/<span>label</span>&gt;</span>    <span>&lt;<span>div</span>&gt;</span>      <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>    <span>&lt;/<span>div</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'iFormItem'</span>,    <span>props</span>: &#123;      <span>label</span>: &#123;        <span>type</span>: <span>String</span>,        <span>default</span>: <span>''</span>      &#125;,      <span>prop</span>: &#123;        <span>type</span>: <span>String</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <h2 data-id="heading-3">在 Form 中缓存 FormItem 实例</h2>  <p>    <code>Form</code> 组件的核心功能是数据校验，一个 Form 中包含了多个    FormItem，当点击提交按钮时，要逐一对每个 FormItem    内的表单组件校验，而校验是由使用者发起，并通过    <code>Form</code> 来调用每一个    <code>FormItem</code> 的验证方法，再将校验结果汇总后，通过    <code>Form</code> 返回出去。大致的流程如下图所示：  </p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/30/166c3b7f124cb84a~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    因为要在 Form 中逐一调用 FormItem 的验证方法，而 Form 和 FormItem    是独立的，需要预先将 FormItem 的每个实例缓存在 Form 中，这个操作就需要用到第    4 节的组件通信方法。当每个 FormItem 渲染时，将其自身（this）作为参数通过    <code>dispatch</code> 派发到 Form 组件中，然后通过一个数组缓存起来；同理当    FormItem 销毁时，将其从 Form 缓存的数组中移除。相关代码如下：  </p>  <pre><code lang="js" class=""><span>// form-item.vue，部分代码省略</span><span>import</span> Emitter <span>from</span> <span>'../../mixins/emitter.js'</span>;<span>export</span> <span>default</span> &#123;  <span>name</span>: <span>'iFormItem'</span>,  <span>mixins</span>: [ Emitter ],  <span>// 组件渲染时，将实例缓存在 Form 中</span>  mounted () &#123;    <span>// 如果没有传入 prop，则无需校验，也就无需缓存</span>    <span>if</span> (<span>this</span>.prop) &#123;      <span>this</span>.dispatch(<span>'iForm'</span>, <span>'on-form-item-add'</span>, <span>this</span>);    &#125;  &#125;,  <span>// 组件销毁前，将实例从 Form 的缓存中移除</span>  beforeDestroy () &#123;    <span>this</span>.dispatch(<span>'iForm'</span>, <span>'on-form-item-remove'</span>, <span>this</span>);  &#125;&#125;</code></pre>  <p>    注意，Vue.js 的组件渲染顺序是由内而外的，所以 FormItem 要先于 Form 渲染，在    FormItem 的 mounted 触发时，我们向 Form 派发了事件    <code>on-form-item-add</code>，并将当前 FormItem 的实例（this）传递给了    Form，而此时，Form 的 mounted 尚未触发，因为 Form 在最外层，如果在 Form 的    mounted 里监听事件，是不可以的，所以要在其 created 内监听自定义事件，Form 的    created 要先于 FormItem 的 mounted。所以 Form 的相关代码为：  </p>  <pre><code lang="js" class=""><span>// form.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>name</span>: <span>'iForm'</span>,  data () &#123;    <span>return</span> &#123;      <span>fields</span>: []    &#125;;  &#125;,  created () &#123;    <span>this</span>.$on(<span>'on-form-item-add'</span>, (field) =&gt; &#123;      <span>if</span> (field) <span>this</span>.fields.push(field);    &#125;);    <span>this</span>.$on(<span>'on-form-item-remove'</span>, (field) =&gt; &#123;      <span>if</span> (field.prop) <span>this</span>.fields.splice(<span>this</span>.fields.indexOf(field), <span>1</span>);    &#125;);  &#125;&#125;</code></pre>  <p>定义的数据 <code>fields</code> 就是用来缓存所有 FormItem 实例的。</p>  <h2 data-id="heading-4">触发校验</h2>  <p>Form 支持两种事件来触发校验：</p>  <ul>    <li>      <strong>blur</strong>：失去焦点时触发，常见的有输入框失去焦点时触发校验；    </li>    <li>      <strong>change</strong      >：实时输入时触发或选择时触发，常见的有输入框实时输入时触发校验、下拉选择器选择项目时触发校验等。    </li>  </ul>  <p>    以上两个事件，都是有具体的表单组件来触发的，我们先来编写一个简单的输入框组件    <code>i-input</code>。在 <code>components</code> 下新建目录    <code>input</code>，并创建文件 <code>input.vue</code>：  </p>  <pre><code lang="html" class=""><span>&lt;!-- input.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>input</span>         <span>type</span>=<span>"text"</span>         <span>:value</span>=<span>"currentValue"</span>         @<span>input</span>=<span>"handleInput"</span>         @<span>blur</span>=<span>"handleBlur"</span>         /&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> Emitter <span>from</span> <span>'../../mixins/emitter.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'iInput'</span>,    <span>mixins</span>: [ Emitter ],    <span>props</span>: &#123;      <span>value</span>: &#123;        <span>type</span>: <span>String</span>,        <span>default</span>: <span>''</span>      &#125;,    &#125;,    data () &#123;      <span>return</span> &#123;        <span>currentValue</span>: <span>this</span>.value      &#125;    &#125;,    <span>watch</span>: &#123;      value (val) &#123;        <span>this</span>.currentValue = val;      &#125;    &#125;,    <span>methods</span>: &#123;      handleInput (event) &#123;        <span>const</span> value = event.target.value;        <span>this</span>.currentValue = value;        <span>this</span>.$emit(<span>'input'</span>, value);        <span>this</span>.dispatch(<span>'iFormItem'</span>, <span>'on-form-change'</span>, value);      &#125;,      handleBlur () &#123;        <span>this</span>.dispatch(<span>'iFormItem'</span>, <span>'on-form-blur'</span>, <span>this</span>.currentValue);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    Input 组件中，绑定在 <code>&lt;input&gt;</code> 元素上的原生事件    <code>@input</code>，每当输入一个字符，都会调用句柄    <code>handleInput</code>，并通过 <code>dispatch</code> 方法向上级的 FormItem    组件派发自定义事件 <code>on-form-change</code>；同理，绑定的原生事件    <code>@blur</code> 会在 input 失焦时触发，并传递事件    <code>on-form-blur</code>。  </p>  <p>    基础组件有了，接下来要做的，是在 FormItem 中监听来自 Input    组件派发的自定义事件。这里可以在 mounted    中监听，因为你的手速远赶不上组件渲染的速度，不过在 created    中监听也是没任何问题的。相关代码如下：  </p>  <pre><code lang="js" class=""><span>// form-item.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>methods</span>: &#123;    setRules () &#123;      <span>this</span>.$on(<span>'on-form-blur'</span>, <span>this</span>.onFieldBlur);      <span>this</span>.$on(<span>'on-form-change'</span>, <span>this</span>.onFieldChange);    &#125;,  &#125;,  mounted () &#123;    <span>if</span> (<span>this</span>.prop) &#123;      <span>this</span>.dispatch(<span>'iForm'</span>, <span>'on-form-item-add'</span>, <span>this</span>);      <span>this</span>.setRules();    &#125;  &#125;&#125;</code></pre>  <p>    通过调用    <code>setRules</code> 方法，监听表单组件的两个事件，并绑定了句柄函数    <code>onFieldBlur</code> 和 <code>onFieldChange</code>，分别对应 blur 和    change 两种事件类型。当 onFieldBlur 或 onFieldChange 函数触发时，就意味着    FormItem    要对<strong>当前的数据</strong>进行一次校验。当前的数据，指的就是通过表单域    Form 中定义的 props：model，结合当前 FormItem 定义的 props：prop    来确定的数据，可以回顾上文写过的用例。  </p>  <p>    因为 FormItem 中只定义了数据源的某个 key 名称（即属性 prop），要拿到 Form 中    model 里的数据，需要用到第 3 节的通信方法 provide / inject。所以在 Form    中，把整个实例（this）向下提供，并在 FormItem 中注入：  </p>  <pre><code lang="js" class=""><span>// form.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  provide() &#123;    <span>return</span> &#123;      <span>form</span> : <span>this</span>    &#125;;  &#125;&#125;</code></pre>  <pre><code lang="js" class=""><span>// form-item.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>inject</span>: [<span>'form'</span>]&#125;</code></pre>  <p>    准备好这些，接着就是最核心的校验功能了。blur 和 change    事件都会触发校验，它们调用同一个方法，只是参数不同。相关代码如下：  </p>  <pre><code lang="js" class=""><span>// form-item.vue，部分代码省略</span><span>import</span> AsyncValidator <span>from</span> <span>'async-validator'</span>;<span>export</span> <span>default</span> &#123;  <span>inject</span>: [<span>'form'</span>],  <span>props</span>: &#123;    <span>prop</span>: &#123;      <span>type</span>: <span>String</span>    &#125;,  &#125;,  data () &#123;    <span>return</span> &#123;      <span>validateState</span>: <span>''</span>,  <span>// 校验状态</span>      validateMessage: <span>''</span>,  <span>// 校验不通过时的提示信息</span>    &#125;  &#125;,  <span>computed</span>: &#123;    <span>// 从 Form 的 model 中动态得到当前表单组件的数据</span>    fieldValue () &#123;      <span>return</span> <span>this</span>.form.model[<span>this</span>.prop];    &#125;  &#125;,  <span>methods</span>: &#123;    <span>// 从 Form 的 rules 属性中，获取当前 FormItem 的校验规则</span>    getRules () &#123;      <span>let</span> formRules = <span>this</span>.form.rules;      formRules = formRules ? formRules[<span>this</span>.prop] : [];      <span>return</span> [].concat(formRules || []);    &#125;,    <span>// 只支持 blur 和 change，所以过滤出符合要求的 rule 规则</span>    getFilteredRule (trigger) &#123;      <span>const</span> rules = <span>this</span>.getRules();      <span>return</span> rules.filter(<span><span>rule</span> =&gt;</span> !rule.trigger || rule.trigger.indexOf(trigger) !== <span>-1</span>);    &#125;,    <span>/**     * 校验数据     * @param trigger 校验类型     * @param callback 回调函数     */</span>    validate(trigger, callback = <span><span>function</span> (<span></span>) </span>&#123;&#125;) &#123;      <span>let</span> rules = <span>this</span>.getFilteredRule(trigger);      <span>if</span> (!rules || rules.length === <span>0</span>) &#123;        <span>return</span> <span>true</span>;      &#125;      <span>// 设置状态为校验中</span>      <span>this</span>.validateState = <span>'validating'</span>;      <span>// 以下为 async-validator 库的调用方法</span>      <span>let</span> descriptor = &#123;&#125;;      descriptor[<span>this</span>.prop] = rules;      <span>const</span> validator = <span>new</span> AsyncValidator(descriptor);      <span>let</span> model = &#123;&#125;;      model[<span>this</span>.prop] = <span>this</span>.fieldValue;      validator.validate(model, &#123; <span>firstFields</span>: <span>true</span> &#125;, errors =&gt; &#123;        <span>this</span>.validateState = !errors ? <span>'success'</span> : <span>'error'</span>;        <span>this</span>.validateMessage = errors ? errors[<span>0</span>].message : <span>''</span>;        callback(<span>this</span>.validateMessage);      &#125;);    &#125;,    onFieldBlur() &#123;      <span>this</span>.validate(<span>'blur'</span>);    &#125;,    onFieldChange() &#123;      <span>this</span>.validate(<span>'change'</span>);    &#125;  &#125;&#125;</code></pre>  <p>在 FormItem 的 <code>validate()</code> 方法中，最终做了两件事：</p>  <ol>    <li>      设置了当前的校验状态 <code>validateState</code> 和校验不通过提示信息      <code>validateMessage</code>（通过值为空）；    </li>    <li>      将 validateMessage 通过回调 callback 传递给调用者，这里的调用者是      onFieldBlur 和 onFieldChange，它们只传入了第一个参数      <code>trigger</code>，callback      并未传入，因此也不会触发回调，而这个回调主要是给 Form 用的，因为 Form      中可以通过提交按钮一次性校验所有的      FormItem（后文会介绍）这里只是表单组件触发事件时，对当前 FormItem 做校验。    </li>  </ol>  <p>    除了校验，还可以对当前数据进行重置。重置是指将表单组件的数据还原到最初绑定的值，而不是清空，因此需要预先缓存一份初始值。同时我们将校验信息也显示在模板中，并加一些样式。相关代码如下：  </p>  <pre><code lang="html" class=""><span>&lt;!-- form-item.vue，部分代码省略 --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>label</span> <span>v-if</span>=<span>"label"</span> <span>:class</span>=<span>"&#123; 'i-form-item-label-required': isRequired &#125;"</span>&gt;</span>&#123;&#123; label &#125;&#125;<span>&lt;/<span>label</span>&gt;</span>    <span>&lt;<span>div</span>&gt;</span>      <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>      <span>&lt;<span>div</span> <span>v-if</span>=<span>"validateState === 'error'"</span> <span>class</span>=<span>"i-form-item-message"</span>&gt;</span>&#123;&#123; validateMessage &#125;&#125;<span>&lt;/<span>div</span>&gt;</span>    <span>&lt;/<span>div</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>props</span>: &#123;      <span>label</span>: &#123;        <span>type</span>: <span>String</span>,        <span>default</span>: <span>''</span>      &#125;,      <span>prop</span>: &#123;        <span>type</span>: <span>String</span>      &#125;,    &#125;,    data () &#123;      <span>return</span> &#123;        <span>isRequired</span>: <span>false</span>,  <span>// 是否为必填</span>        validateState: <span>''</span>,  <span>// 校验状态</span>        validateMessage: <span>''</span>,  <span>// 校验不通过时的提示信息</span>      &#125;    &#125;,    mounted () &#123;      <span>// 如果没有传入 prop，则无需校验，也就无需缓存</span>      <span>if</span> (<span>this</span>.prop) &#123;        <span>this</span>.dispatch(<span>'iForm'</span>, <span>'on-form-item-add'</span>, <span>this</span>);        <span>// 设置初始值，以便在重置时恢复默认值</span>        <span>this</span>.initialValue = <span>this</span>.fieldValue;        <span>this</span>.setRules();      &#125;    &#125;,    <span>methods</span>: &#123;      setRules () &#123;        <span>let</span> rules = <span>this</span>.getRules();        <span>if</span> (rules.length) &#123;          rules.every(<span>(<span>rule</span>) =&gt;</span> &#123;            <span>// 如果当前校验规则中有必填项，则标记出来</span>            <span>this</span>.isRequired = rule.required;          &#125;);        &#125;        <span>this</span>.$on(<span>'on-form-blur'</span>, <span>this</span>.onFieldBlur);        <span>this</span>.$on(<span>'on-form-change'</span>, <span>this</span>.onFieldChange);      &#125;,      <span>// 从 Form 的 rules 属性中，获取当前 FormItem 的校验规则</span>      getRules () &#123;        <span>let</span> formRules = <span>this</span>.form.rules;        formRules = formRules ? formRules[<span>this</span>.prop] : [];        <span>return</span> [].concat(formRules || []);      &#125;,      <span>// 重置数据</span>      resetField () &#123;        <span>this</span>.validateState = <span>''</span>;        <span>this</span>.validateMessage = <span>''</span>;        <span>this</span>.form.model[<span>this</span>.prop] = <span>this</span>.initialValue;      &#125;,    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span><span>&lt;<span>style</span>&gt;</span><span>  <span>.i-form-item-label-required</span><span>:before</span> &#123;    <span>content</span>: <span>'*'</span>;    <span>color</span>: red;  &#125;  <span>.i-form-item-message</span> &#123;    <span>color</span>: red;  &#125;</span><span>&lt;/<span>style</span>&gt;</span></code></pre>  <p>    至此，FormItem    代码已经完成，不过它只具有单独校验的功能，也就是说，只能对自己的一个表单组件验证，不能对一个表单域里的所有组件一次性全部校验。而实现全部校验和全部重置的功能，要在    Form 中完成。  </p>  <p>    上文已经介绍到，在 <code>Form</code> 组件中，预先缓存了全部的 FormItem    实例，自然也能在 Form    中调用它们。通过点击提交按钮全部校验，或点击重置按钮全部重置数据，只需要在    Form 中，逐一调用缓存的 FormItem 实例中的 <code>validate</code> 或    <code>resetField</code> 方法。相关代码如下：  </p>  <pre><code lang="js" class=""><span>// form.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>fields</span>: []    &#125;;  &#125;,  <span>methods</span>: &#123;    <span>// 公开方法：全部重置数据</span>    resetFields() &#123;      <span>this</span>.fields.forEach(<span><span>field</span> =&gt;</span> &#123;        field.resetField();      &#125;);    &#125;,    <span>// 公开方法：全部校验数据，支持 Promise</span>    validate(callback) &#123;      <span>return</span> <span>new</span> <span>Promise</span>(<span><span>resolve</span> =&gt;</span> &#123;        <span>let</span> valid = <span>true</span>;        <span>let</span> count = <span>0</span>;        <span>this</span>.fields.forEach(<span><span>field</span> =&gt;</span> &#123;          field.validate(<span>''</span>, errors =&gt; &#123;            <span>if</span> (errors) &#123;              valid = <span>false</span>;            &#125;            <span>if</span> (++count === <span>this</span>.fields.length) &#123;              <span>// 全部完成</span>              resolve(valid);              <span>if</span> (<span>typeof</span> callback === <span>'function'</span>) &#123;                callback(valid);              &#125;            &#125;          &#125;);        &#125;);      &#125;);    &#125;  &#125;,&#125;</code></pre>  <p>    虽然说 Vue.js 的 API 只来自 prop、event、slot    这三个部分，但一些场景下，需要通过    <code>ref</code> 来访问这个组件，调用它的一些内置方法，比如上面的    <code>validate</code> 和    <code>resetFields</code> 方法，就需要使用者来主动调用。  </p>  <p>    resetFields 很简单，就是通过循环逐一调用 FormItem 的 resetField    方法来重置数据。validate    稍显复杂，它支持两种使用方法，一种是普通的回调，比如：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>i-form</span> <span>ref</span>=<span>"form"</span>&gt;</span><span>&lt;/<span>i-form</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleSubmit"</span>&gt;</span>提交<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>methods</span>: &#123;      handleSubmit () &#123;        <span>this</span>.$refs.form.validate(<span>(<span>valid</span>) =&gt;</span> &#123;          <span>if</span> (valid) &#123;            <span>window</span>.alert(<span>'提交成功'</span>);          &#125; <span>else</span> &#123;            <span>window</span>.alert(<span>'表单校验失败'</span>);          &#125;        &#125;)      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>同时也支持 Promise，例如：</p>  <pre><code lang="js" class="">handleSubmit () &#123;  <span>const</span> validate = <span>this</span>.$refs.form.validate();    validate.then(<span>(<span>valid</span>) =&gt;</span> &#123;    <span>if</span> (valid) &#123;      <span>window</span>.alert(<span>'提交成功'</span>);    &#125; <span>else</span> &#123;      <span>window</span>.alert(<span>'表单校验失败'</span>);    &#125;  &#125;)&#125;</code></pre>  <p>    在 Form 组件定义的 Promise 中，只调用了 resolve(valid)，没有调用    reject()，因此不能直接使用    <code>.catch()</code> ，不过聪明的你稍作修改，肯定能够支持到！  </p>  <p>完整的用例如下：</p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>h3</span>&gt;</span>具有数据校验功能的表单组件——Form<span>&lt;/<span>h3</span>&gt;</span>    <span>&lt;<span>i-form</span> <span>ref</span>=<span>"form"</span> <span>:model</span>=<span>"formValidate"</span> <span>:rules</span>=<span>"ruleValidate"</span>&gt;</span>      <span>&lt;<span>i-form-item</span> <span>label</span>=<span>"用户名"</span> <span>prop</span>=<span>"name"</span>&gt;</span>        <span>&lt;<span>i-input</span> <span>v-model</span>=<span>"formValidate.name"</span>&gt;</span><span>&lt;/<span>i-input</span>&gt;</span>      <span>&lt;/<span>i-form-item</span>&gt;</span>      <span>&lt;<span>i-form-item</span> <span>label</span>=<span>"邮箱"</span> <span>prop</span>=<span>"mail"</span>&gt;</span>        <span>&lt;<span>i-input</span> <span>v-model</span>=<span>"formValidate.mail"</span>&gt;</span><span>&lt;/<span>i-input</span>&gt;</span>      <span>&lt;/<span>i-form-item</span>&gt;</span>    <span>&lt;/<span>i-form</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleSubmit"</span>&gt;</span>提交<span>&lt;/<span>button</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleReset"</span>&gt;</span>重置<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> iForm <span>from</span> <span>'../components/form/form.vue'</span>;  <span>import</span> iFormItem <span>from</span> <span>'../components/form/form-item.vue'</span>;  <span>import</span> iInput <span>from</span> <span>'../components/input/input.vue'</span>;  <span>export</span> <span>default</span> &#123;    <span>components</span>: &#123; iForm, iFormItem, iInput &#125;,    data () &#123;      <span>return</span> &#123;        <span>formValidate</span>: &#123;          <span>name</span>: <span>''</span>,          <span>mail</span>: <span>''</span>        &#125;,        <span>ruleValidate</span>: &#123;          <span>name</span>: [            &#123; <span>required</span>: <span>true</span>, <span>message</span>: <span>'用户名不能为空'</span>, <span>trigger</span>: <span>'blur'</span> &#125;          ],          <span>mail</span>: [            &#123; <span>required</span>: <span>true</span>, <span>message</span>: <span>'邮箱不能为空'</span>, <span>trigger</span>: <span>'blur'</span> &#125;,            &#123; <span>type</span>: <span>'email'</span>, <span>message</span>: <span>'邮箱格式不正确'</span>, <span>trigger</span>: <span>'blur'</span> &#125;          ],        &#125;      &#125;    &#125;,    <span>methods</span>: &#123;      handleSubmit () &#123;        <span>this</span>.$refs.form.validate(<span>(<span>valid</span>) =&gt;</span> &#123;          <span>if</span> (valid) &#123;            <span>window</span>.alert(<span>'提交成功'</span>);          &#125; <span>else</span> &#123;            <span>window</span>.alert(<span>'表单校验失败'</span>);          &#125;        &#125;)      &#125;,      handleReset () &#123;        <span>this</span>.$refs.form.resetFields();      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>运行效果：</p>  <p></p>  <figure>    <img      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/30/166c3b8a77e382ec~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>完整的示例源码可通过 GitHub 查看：</p>  <p>    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ficarusion%2Fvue-component-book"      title="https://github.com/icarusion/vue-component-book"      ref="nofollow noopener noreferrer"      >github.com/icarusion/v…</a    >  </p>  <blockquote>    <p>项目基于 Vue CLI 3 构建，下载安装依赖后，通过 npm run serve 可访问。</p>  </blockquote>  <h2 data-id="heading-5">结语</h2>  <p>    组件最终的效果看起来有点    “low”，但它实现的功能却不简单。通过这个实战，你或许已经感受到本小册一开始说的，组件写到最后，都是在拼    JavaScript 功底。的确，Vue.js    组件为我们提供了一种新的代码组织形式，但归根到底，是离不开 JS 的。  </p>  <p>    这个实战，你应该对独立组件间的通信用法有进一步的认知了吧，不过，这还不是组件通信的终极方案，下一节，我们就来看看适用于任何场景的组件通信方案。  </p>  <p>    注：本节部分代码参考    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview%2Ftree%2F2.0%2Fsrc%2Fcomponents%2Fform"      title="https://github.com/iview/iview/tree/2.0/src/components/form"      ref="nofollow noopener noreferrer"      >iView</a    >。  </p>  <h2 data-id="heading-6">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://juejin.cn/post/6844903714017247246"        title="https://juejin.cn/post/6844903714017247246"        >一份超级详细的Vue-cli3.0使用教程</a      >    </li>  </ul></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-4】组件的通信 2：派发与广播——自行实现 dispatch 和 broadcast 方法</title>
      <link href="/b18ba3212f76.html"/>
      <url>/b18ba3212f76.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    上一讲的 provide / inject API    主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。然后有两种场景它不能很好的解决：  </p>  <ul>    <li>父组件向子组件（支持跨级）传递数据；</li>    <li>子组件向父组件（支持跨级）传递数据。</li>  </ul>  <p>    这种父子（含跨级）传递数据的通信方式，Vue.js 并没有提供原生的 API    来支持，而是推荐使用大型数据状态管理工具 Vuex，而我们之前已经介绍过 Vuex    的场景与在独立组件（或库）中使用的限制。本小节则介绍一种在父子组件间通信的方法    <code>dispatch</code> 和 <code>broadcast</code>。  </p>  <h2 data-id="heading-1">$on 与 $emit</h2>  <p>    如果您使用过较早的 Vue.js 1.x 版本，肯定对 <em>$dispatch</em> 和    <em>$broadcast</em> 这两个内置的方法很熟悉，不过它们都在 Vue.js 2.x    里废弃了。在正式介绍主角前，我们先看看 <code>$on</code> 与    <code>$emit</code> 这两个 API，因为它们是本节内容的基础。  </p>  <p>    <code>$emit</code>    会在<strong>当前组件</strong>实例上触发自定义事件，并传递一些参数给监听器的回调，一般来说，都是在父级调用这个组件时，使用    <code>@on</code> 的方式来监听自定义事件的，比如在子组件中触发事件：  </p>  <pre><code lang="js" class=""><span>// child.vue，部分代码省略</span><span>export</span> <span>default</span> &#123;  <span>methods</span>: &#123;    handleEmitEvent () &#123;      <span>this</span>.$emit(<span>'test'</span>, <span>'Hello Vue.js'</span>);    &#125;  &#125;&#125;</code></pre>  <p>    在父组件中监听由 <em>child.vue</em> 触发的自定义事件 <strong>test</strong>：  </p>  <pre><code lang="html" class=""><span>&lt;!-- parent.vue，部分代码省略--&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>child-component</span> @<span>test</span>=<span>"handleEvent"</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>methods</span>: &#123;      handleEvent (text) &#123;      <span>console</span>.log(text);  <span>// Hello Vue.js</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    这里看似是在父组件 <em>parent.vue</em> 中绑定的自定义事件    <strong>test</strong> 的处理句柄，然而事件 test    并不是在父组件上触发的，而是在子组件 <em>child.vue</em> 里触发的，只是通过    <code>v-on</code>    在父组件中监听。既然是子组件自己触发的，那它自己也可以监听到，这就要使用    <code>$on</code> 来监听实例上的事件，换言之，组件使用    <code>$emit</code> 在自己实例上触发事件，并用 <code>$on</code> 监听它。  </p>  <p>听起来这种神（sāo）操作有点多此一举，我们不妨先来看个示例：</p>  <p>    （也可通过在线链接    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Frun.iviewui.com%2FggsomfHM"      title="https://run.iviewui.com/ggsomfHM"      ref="nofollow noopener noreferrer"      >run.iviewui.com/ggsomfHM</a    >    直接运行该示例）  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"handleEmitEvent"</span>&gt;</span>触发自定义事件<span>&lt;/<span>button</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>methods</span>: &#123;      handleEmitEvent () &#123;        <span>// 在当前组件上触发自定义事件 test，并传值</span>        <span>this</span>.$emit(<span>'test'</span>, <span>'Hello Vue.js'</span>)      &#125;    &#125;,    mounted () &#123;      <span>// 监听自定义事件 test</span>      <span>this</span>.$on(<span>'test'</span>, (text) =&gt; &#123;        <span>window</span>.alert(text);      &#125;);    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    <code>$on</code> 监听了自己触发的自定义事件    test，因为有时不确定何时会触发事件，一般会在 <code>mounted</code> 或    <code>created</code> 钩子中来监听。  </p>  <p>    仅上面的示例，的确是多此一举的，因为大可在 handleEmitEvent 里直接写    window.alert(text)，没必要绕一圈。  </p>  <p>    之所以多此一举，是因为 handleEmitEvent 是当前组件内的    <code>&lt;button&gt;</code>    调用的，如果这个方法不是它自己调用，而是其它组件调用的，那这个用法就大有可为了。  </p>  <p>    了解了 <code>$on</code> 和    <code>$emit</code> 的用法后，我们再来看两个“过时的” API。  </p>  <h2 data-id="heading-2">Vue.js 1.x 的 $dispatch 与 $broadcast</h2>  <p>    虽然 Vue.js 1.x    已经成为过去时，但为了充分理解本节通信方法的使用场景，还是有必要来了解一点它的历史。  </p>  <p>    在 Vue.js 1.x 中，提供了两个方法：<code>$dispatch</code> 和    <code>$broadcast</code>    ，前者用于向上级派发事件，只要是它的父级（一级或多级以上），都可以在组件内通过    <code>$on</code> （或 events，2.x    已废弃）监听到，后者相反，是由上级向下级广播事件的。  </p>  <p>来看一个简单的示例：</p>  <pre><code lang="html" class=""><span>&lt;!-- 注意：该示例为 Vue.js 1.x 版本 --&gt;</span><span>&lt;!-- 子组件 --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>button</span> @<span>click</span>=<span>"handleDispatch"</span>&gt;</span>派发事件<span>&lt;/<span>button</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span><span>export</span> <span>default</span> &#123;  <span>methods</span>: &#123;    handleDispatch () &#123;      <span>this</span>.$dispatch(<span>'test'</span>, <span>'Hello, Vue.js'</span>);    &#125;  &#125;&#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="html" class=""><span>&lt;!-- 父组件，部分代码省略 --&gt;</span><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>child-component</span>&gt;</span><span>&lt;/<span>child-component</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    mounted () &#123;      <span>this</span>.$on(<span>'test'</span>, (text) =&gt; &#123;        <span>console</span>.log(text);  <span>// Hello, Vue.js</span>      &#125;);    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    $broadcast    类似，只不过方向相反。这两种方法一旦发出事件后，任何组件都是可以接收到的，就近原则，而且会在第一次接收到后停止冒泡，除非返回    true。  </p>  <p>    这两个方法虽然看起来很好用，但是在 Vue.js 2.x 中都废弃了，官方给出的解释是：  </p>  <blockquote>    <p>      因为基于组件树结构的事件流方式有时让人难以理解，并且在组件结构扩展的过程中会变得越来越脆弱。    </p>  </blockquote>  <p>    虽然在业务开发中，它没有 Vuex    这样专门管理状态的插件清晰好用，但对独立组件（库）的开发，绝对是福音。因为独立组件一般层级并不会很复杂，并且剥离了业务，不会变的难以维护。  </p>  <p>    知道了 <em>$dispatch</em> 和 <em>$broadcast</em> 的前世今生，接下来我们就在    Vue.js 2.x 中自行实现这两个方法。  </p>  <h2 data-id="heading-3">自行实现 dispatch 和 broadcast 方法</h2>  <p>    自行实现的 dispatch 和 broadcast 方法，不能保证跟 Vue.js 1.x 的    <em>$dispatch</em> 和    <em>$broadcast</em>    具有完全相同的体验，但基本功能是一样的，都是解决父子组件（含跨级）间的通信问题。  </p>  <p>    通过目前已知的信息，我们要实现的 dispatch 和 broadcast    方法，将具有以下功能：  </p>  <ul>    <li>      在子组件调用 dispatch      方法，向上级指定的组件实例（最近的）上触发自定义事件，并传递数据，且该上级组件已预先通过      <code>$on</code> 监听了这个事件；    </li>    <li>      相反，在父组件调用 broadcast      方法，向下级指定的组件实例（最近的）上触发自定义事件，并传递数据，且该下级组件已预先通过      <code>$on</code> 监听了这个事件。    </li>  </ul>  <p>    实现这对方法的关键点在于，如何正确地向上或向下找到对应的组件实例，并在它上面触发方法。在设计一个新功能（features）时，可以先确定这个功能的    API 是什么，也就是说方法名、参数、使用样例，确定好 API，再来写具体的代码。  </p>  <p>    因为 Vue.js 内置的方法，才是以 <code>$</code> 开头的，比如    <code>$nextTick</code>、<code>$emit</code>    等，为了避免不必要的冲突并遵循规范，这里的 dispatch 和 broadcast    方法名前不加    <code>$</code    >。并且该方法可能在很多组件中都会使用，复用起见，我们封装在混合（mixins）里。那它的使用样例可能是这样的：  </p>  <pre><code lang="js" class=""><span>// 部分代码省略</span><span>import</span> Emitter <span>from</span> <span>'../mixins/emitter.js'</span><span>export</span> <span>default</span> &#123;  <span>mixins</span>: [ Emitter ],  <span>methods</span>: &#123;    handleDispatch () &#123;      <span>this</span>.dispatch();  <span>// ①</span>    &#125;,    handleBroadcast () &#123;      <span>this</span>.broadcast();  <span>// ②</span>    &#125;  &#125;&#125;</code></pre>  <p>    上例中行 ① 和行 ② 的两个方法就是在导入的混合    <strong>emitter.js</strong>    中定义的，这个稍后我们再讲，先来分析这两个方法应该传入什么参数。一般来说，为了跟    Vue.js 1.x 的方法一致，第一个参数应当是自定义事件名，比如    “test”，第二个参数是传递的数据，比如 “Hello,    Vue.js”，但在这里，有什么问题呢？只通过这两个参数，我们没办法知道要在哪个组件上触发事件，因为自行实现的这对方法，与    Vue.js 1.x    的原生方法机理上是有区别的。上文说到，实现这对方法的关键点在于准确地<strong>找到组件实例</strong>。那在寻找组件实例上，我们的“惯用伎俩”就是通过遍历来匹配组件的    <code>name</code> 选项，在独立组件（库）里，每个组件的    <code>name</code> 值应当是唯一的，name    主要用于递归组件，在后面小节会单独介绍。  </p>  <p>先来看下 <strong>emitter.js</strong> 的代码：</p>  <pre><code lang="js" class=""><span><span>function</span> <span>broadcast</span>(<span>componentName, eventName, params</span>) </span>&#123;  <span>this</span>.$children.forEach(<span><span>child</span> =&gt;</span> &#123;    <span>const</span> name = child.$options.name;    <span>if</span> (name === componentName) &#123;      child.$emit.apply(child, [eventName].concat(params));    &#125; <span>else</span> &#123;      broadcast.apply(child, [componentName, eventName].concat([params]));    &#125;  &#125;);&#125;<span>export</span> <span>default</span> &#123;  <span>methods</span>: &#123;    dispatch(componentName, eventName, params) &#123;      <span>let</span> parent = <span>this</span>.$parent || <span>this</span>.$root;      <span>let</span> name = parent.$options.name;      <span>while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;        parent = parent.$parent;        <span>if</span> (parent) &#123;          name = parent.$options.name;        &#125;      &#125;      <span>if</span> (parent) &#123;        parent.$emit.apply(parent, [eventName].concat(params));      &#125;    &#125;,    broadcast(componentName, eventName, params) &#123;      broadcast.call(<span>this</span>, componentName, eventName, params);    &#125;  &#125;&#125;;</code></pre>  <p>    因为是用作 mixins 导入，所以在 methods 里定义的 dispatch 和 broadcast    方法会被混合到组件里，自然就可以用 <code>this.dispatch</code> 和    <code>this.broadcast</code> 来使用。  </p>  <p>    这两个方法都接收了三个参数，第一个是组件的    <code>name</code>    值，用于向上或向下递归遍历来寻找对应的组件，第二个和第三个就是上文分析的自定义事件名称和要传递的数据。  </p>  <p>    可以看到，在 dispatch 里，通过    <em>while</em>    语句，不断向上遍历更新当前组件（即上下文为当前调用该方法的组件）的父组件实例（变量    parent 即为父组件实例），直到匹配到定义的    <code>componentName</code> 与某个上级组件的    <code>name</code> 选项一致时，结束循环，并在找到的组件实例上，调用    <code>$emit</code> 方法来触发自定义事件 <code>eventName</code>。broadcast    方法与之类似，只不过是向下遍历寻找。  </p>  <p>    来看一下具体的使用方法。有 <strong>A.vue</strong> 和    <strong>B.vue</strong> 两个组件，其中 B 是 A 的子组件，中间可能跨多级，在 A    中向 B 通信：  </p>  <pre><code lang="html" class=""><span>&lt;!-- A.vue --&gt;</span><span>&lt;<span>template</span>&gt;</span><span>&lt;<span>button</span> @<span>click</span>=<span>"handleClick"</span>&gt;</span>触发事件<span>&lt;/<span>button</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> Emitter <span>from</span> <span>'../mixins/emitter.js'</span>;    <span>export</span> <span>default</span> &#123;    <span>name</span>: <span>'componentA'</span>,    <span>mixins</span>: [ Emitter ],    <span>methods</span>: &#123;      handleClick () &#123;        <span>this</span>.broadcast(<span>'componentB'</span>, <span>'on-message'</span>, <span>'Hello Vue.js'</span>);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <pre><code lang="js" class=""><span>// B.vue</span><span>export</span> <span>default</span> &#123;  <span>name</span>: <span>'componentB'</span>,  created () &#123;    <span>this</span>.$on(<span>'on-message'</span>, <span>this</span>.showMessage);  &#125;,  <span>methods</span>: &#123;    showMessage (text) &#123;      <span>window</span>.alert(text);    &#125;  &#125;&#125;</code></pre>  <p>    同理，如果是 B 向 A 通信，在 B 中调用 dispatch 方法，在 A 中使用 $on    监听事件即可。  </p>  <p>    以上就是自行实现的 dispatch 和 broadcast 方法，相比 Vue.js 1.x，有以下不同：  </p>  <ul>    <li>需要额外传入组件的 name 作为第一个参数；</li>    <li>无冒泡机制；</li>    <li>      第三个参数传递的数据，只能是一个（较多时可以传入一个对象），而 Vue.js 1.x      可以传入多个参数，当然，你对 emitter.js      稍作修改，也能支持传入多个参数，只是一般场景传入一个对象足以。    </li>  </ul>  <h2 data-id="heading-4">结语</h2>  <p>    Vue.js    的组件通信到此还没完全结束，如果你想“趁热打铁”一口气看完，可以先阅读第 6    节组件的通信 3。亦或按顺序看下一节的实战，来进一步加深理解 provide / inject    和 dispatch / broadcast 这两对通信方法的使用场景。  </p>  <p>    注：本节部分代码参考    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview%2Fblob%2F2.0%2Fsrc%2Fmixins%2Femitter.js"      title="https://github.com/iview/iview/blob/2.0/src/mixins/emitter.js"      ref="nofollow noopener noreferrer"      >iView</a    >。  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-3】组件的通信 1：provide &amp; inject</title>
      <link href="/8c9b36b69ab4.html"/>
      <url>/8c9b36b69ab4.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <p>    上一节中我们说到，<code>ref</code> 和    <code>$parent / $children</code>    在<strong>跨级</strong>通信时是有弊端的。当组件 A 和组件 B    中间隔了数代（甚至不确定具体级别）时，以往会借助 Vuex 或 Bus    这样的解决方案，不得不引入三方库来支持。本小节则介绍一种无依赖的组件通信方法：Vue.js    内置的 provide / inject 接口。  </p>  <h2 data-id="heading-1">什么是 provide / inject</h2>  <p>    <code>provide / inject</code> 是 Vue.js 2.2.0 版本后新增的    API，在文档中这样介绍 ：  </p>  <blockquote>    <p>      <a        target="_blank"        href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fapi%2F%23provide-inject"        title="https://cn.vuejs.org/v2/api/#provide-inject"        ref="nofollow noopener noreferrer"        >cn.vuejs.org/v2/api/#pro…</a      >    </p>    <p>      这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。如果你熟悉      React，这与 React 的上下文特性很相似。    </p>  </blockquote>  <p>并且文档中有如下提示：</p>  <blockquote>    <p>      provide 和 inject      主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。    </p>  </blockquote>  <p>    看不懂上面的介绍没有关系，不过上面的这句提示应该明白，就是说 Vue.js    不建议在业务中使用这对 API，而是在插件 / 组件库（比如 iView，事实上 iView    的很多组件都在用）。<strong      >不过建议归建议，如果你用好了，这个 API 会非常有用。</strong    >  </p>  <p>    我们先来看一下这个 API 怎么用，假设有两个组件： <strong>A.vue</strong> 和    <strong>B.vue</strong>，B 是 A 的子组件。  </p>  <pre><code lang="js" class=""><span>// A.vue</span><span>export</span> <span>default</span> &#123;  <span>provide</span>: &#123;    <span>name</span>: <span>'Aresn'</span>  &#125;&#125;<span>// B.vue</span><span>export</span> <span>default</span> &#123;  <span>inject</span>: [<span>'name'</span>],  mounted () &#123;    <span>console</span>.log(<span>this</span>.name);  <span>// Aresn</span>  &#125;&#125;</code></pre>  <p>    可以看到，在 A.vue 里，我们设置了一个 <strong>provide: name</strong>，值为    Aresn，它的作用就是将    <strong>name</strong> 这个变量提供给它的所有子组件。而在 B.vue 中，通过    <code>inject</code> 注入了从 A 组件中提供的    <strong>name</strong> 变量，那么在组件 B 中，就可以直接通过    <strong      ><a        target="_blank"        href="https://link.juejin.cn?target=http%3A%2F%2Fthis.name"        title="http://this.name"        ref="nofollow noopener noreferrer"        >this.name</a      ></strong    >    访问这个变量了，它的值也是 Aresn。这就是 provide / inject API 最核心的用法。  </p>  <p>需要注意的是：</p>  <blockquote>    <p>      provide 和 inject      绑定并<strong>不是可响应</strong>的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。    </p>  </blockquote>  <p>    所以，上面 A.vue 的 name 如果改变了，B.vue 的    <a      target="_blank"      href="https://link.juejin.cn?target=http%3A%2F%2Fthis.name"      title="http://this.name"      ref="nofollow noopener noreferrer"      >this.name</a    >    是不会改变的，仍然是 Aresn。  </p>  <h2 data-id="heading-2">替代 Vuex</h2>  <p>    我们知道，在做 Vue 大型项目时，可以使用 Vuex 做状态管理，它是一个专为 Vue.js    开发的<strong>状态管理模式</strong>，用于集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。  </p>  <p>    那了解了 provide / inject 的用法，下面来看怎样替代    Vuex。当然，我们的目的并不是为了替代    Vuex，它还是有相当大的用处，这里只是介绍另一种可行性。  </p>  <p>    使用    Vuex，最主要的目的是跨组件通信、全局数据维护、多人协同开发。需求比如有：用户的登录信息维护、通知信息维护等全局的状态和数据。  </p>  <p>    一般在 webpack 中使用 Vue.js，都会有一个入口文件    <strong>main.js</strong>，里面通常导入了 Vue、VueRouter、iView    等库，通常也会导入一个入口组件 <code>app.vue</code> 作为根组件。一个简单的    app.vue 可能只有以下代码：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>router-view</span>&gt;</span><span>&lt;/<span>router-view</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>使用 provide / inject 替代 Vuex，就是在这个 app.vue 文件上做文章。</p>  <p>    我们把 app.vue    理解为一个最外层的根组件，用来存储所有需要的全局数据和状态，甚至是计算属性（computed）、方法（methods）等。因为你的项目中所有的组件（包含路由），它的父组件（或根组件）都是    app.vue，所以我们<strong      >把整个 app.vue 实例通过 <code>provide</code> 对外提供</strong    >。  </p>  <p><em>app.vue：</em></p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    <span>&lt;<span>router-view</span>&gt;</span><span>&lt;/<span>router-view</span>&gt;</span>  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    provide () &#123;      <span>return</span> &#123;        <span>app</span>: <span>this</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    上面，我们把整个 app.vue 的实例 <code>this</code> 对外提供，命名为    <strong>app</strong>（这个名字可以自定义，推荐使用    app，使用这个名字后，子组件不能再使用它作为局部属性）。接下来，任何组件（或路由）只要通过    <code>inject</code> 注入 app.vue 的 app 的话，都可以直接通过    <strong      ><a        target="_blank"        href="https://link.juejin.cn?target=http%3A%2F%2Fthis.app.xxx"        title="http://this.app.xxx"        ref="nofollow noopener noreferrer"        >this.app.xxx</a      ></strong    >    来访问 app.vue 的 <code>data</code>、<code>computed</code>、<code      >methods</code    >    等内容。  </p>  <p>    app.vue    是整个项目第一个被渲染的组件，而且只会渲染一次（即使切换路由，app.vue    也不会被再次渲染），利用这个特性，很适合做一次性全局的状态数据管理，例如，我们将用户的登录信息保存起来：  </p>  <p><em>app.vue，部分代码省略：</em></p>  <pre><code lang="html" class=""><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    provide () &#123;      <span>return</span> &#123;        <span>app</span>: <span>this</span>      &#125;    &#125;,    data () &#123;      <span>return</span> &#123;        <span>userInfo</span>: <span>null</span>      &#125;    &#125;,    <span>methods</span>: &#123;      getUserInfo () &#123;        <span>// 这里通过 ajax 获取用户信息后，赋值给 this.userInfo，以下为伪代码</span>        $.ajax(<span>'/user/info'</span>, (data) =&gt; &#123;          <span>this</span>.userInfo = data;        &#125;);      &#125;    &#125;,    mounted () &#123;      <span>this</span>.getUserInfo();    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    这样，任何页面或组件，只要通过 <code>inject</code> 注入    <code>app</code> 后，就可以直接访问 <code>userInfo</code> 的数据了，比如：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    &#123;&#123; app.userInfo &#125;&#125;  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>inject</span>: [<span>'app'</span>]  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    是不是很简单呢。除了直接使用数据，还可以调用方法。比如在某个页面里，修改了个人资料，这时一开始在    <code>app.vue</code> 里获取的    <code>userInfo</code> 已经不是最新的了，需要重新获取。可以这样使用：  </p>  <p><em>某个页面：</em></p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>div</span>&gt;</span>    &#123;&#123; app.userInfo &#125;&#125;  <span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>inject</span>: [<span>'app'</span>],    <span>methods</span>: &#123;      changeUserInfo () &#123;        <span>// 这里修改完用户数据后，通知 app.vue 更新，以下为伪代码</span>        $.ajax(<span>'/user/update'</span>, () =&gt; &#123;          <span>// 直接通过 this.app 就可以调用 app.vue 里的方法</span>          <span>this</span>.app.getUserInfo();        &#125;)      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    同样非常简单。只要理解了 <code>this.app</code> 是直接获取整个    <code>app.vue</code> 的实例后，使用起来就得心应手了。想一想，配置复杂的 Vuex    的全部功能，现在是不是都可以通过 <code>provide / inject</code> 来实现了呢？  </p>  <h2 data-id="heading-3">进阶技巧</h2>  <p>    如果你的项目足够复杂，或需要多人协同开发时，在    <code>app.vue</code> 里会写非常多的代码，多到结构复杂难以维护。这时可以使用    Vue.js 的混合 <code>mixins</code>，将不同的逻辑分开到不同的 js 文件里。  </p>  <p>比如上面的用户信息，就可以放到混合里：</p>  <p><em>user.js：</em></p>  <pre><code lang="js" class=""><span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>userInfo</span>: <span>null</span>    &#125;  &#125;,  <span>methods</span>: &#123;    getUserInfo () &#123;      <span>// 这里通过 ajax 获取用户信息后，赋值给 this.userInfo，以下为伪代码</span>      $.ajax(<span>'/user/info'</span>, (data) =&gt; &#123;        <span>this</span>.userInfo = data;      &#125;);    &#125;  &#125;,  mounted () &#123;    <span>this</span>.getUserInfo();  &#125;&#125;</code></pre>  <p>然后在 <code>app.vue</code> 中混合：</p>  <p><em>app.vue：</em></p>  <pre><code lang="html" class=""><span>&lt;<span>script</span>&gt;</span><span>  <span>import</span> mixins_user <span>from</span> <span>'../mixins/user.js'</span>;  <span>export</span> <span>default</span> &#123;    <span>mixins</span>: [mixins_user],    data () &#123;      <span>return</span> &#123;      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    这样，跟用户信息相关的逻辑，都可以在    <code>user.js</code> 里维护，或者由某个人来维护，<code>app.vue</code>    也就很容易维护了。  </p>  <h2 data-id="heading-4">独立组件中使用</h2>  <p>    如果你顾忌 Vue.js 文档中所说，provide / inject    不推荐直接在应用程序中使用，那没有关系，仍然使用你熟悉的 Vuex 或 Bus    来管理你的项目就好。我们介绍的这对 API，主要还是在独立组件中发挥作用的。  </p>  <p>    只要一个组件使用了    <code>provide</code> 向下提供数据，那其下所有的子组件都可以通过    <code>inject</code>    来注入，不管中间隔了多少代，而且可以注入多个来自不同父级提供的数据。需要注意的是，一旦注入了某个数据，比如上面示例中的    <code>app</code>，那这个组件中就不能再声明    <code>app</code> 这个数据了，因为它已经被父级占有。  </p>  <p>    独立组件使用 provide / inject    的场景，主要是具有联动关系的组件，比如接下来很快会介绍的第一个实战：具有数据校验功能的表单组件    Form。它其实是两个组件，一个是 Form，一个是 FormItem，FormItem 是 Form    的子组件，它会依赖 Form 组件上的一些特性（props），所以就需要得到父组件    Form，这在 Vue.js 2.2.0 版本以前，是没有 provide / inject 这对 API 的，而    Form 和 FormItem    不一定是父子关系，中间很可能间隔了其它组件，所以不能单纯使用    <code>$parent</code> 来向上获取实例。在 Vue.js 2.2.0    之前，一种比较可行的方案是用计算属性动态获取：  </p>  <pre><code lang="js" class="">computed: &#123;  form () &#123;    <span>let</span> parent = <span>this</span>.$parent;    <span>while</span> (parent.$options.name !== <span>'Form'</span>) &#123;      parent = parent.$parent;    &#125;    <span>return</span> parent;  &#125;&#125;</code></pre>  <p>    每个组件都可以设置    <code>name</code>    选项，作为组件名的标识，利用这个特点，通过向上遍历，直到找到需要的组件。这个方法可行，但相比一个    <code>inject</code> 来说，太费劲了，而且不那么优雅和 native。如果用    inject，可能只需要一行代码：  </p>  <pre><code lang="js" class=""><span>export</span> <span>default</span> &#123;  <span>inject</span>: [<span>'form'</span>]&#125;</code></pre>  <p>不过，这一切的前提是你使用 Vue.js 2.2.0 以上版本。</p>  <h2 data-id="heading-5">结语</h2>  <p>    如果这是你第一次听说 provide / inject 这对    API，一定觉得它太神奇了，至少笔者第一时间知晓时是这样的。它解决了独立组件间通信的问题，用好了还有出乎意料的效果。笔者在开发    <a      target="_blank"      href="https://link.juejin.cn?target=https%3A%2F%2Fdev.iviewui.com"      title="https://dev.iviewui.com"      ref="nofollow noopener noreferrer"      >iView Developer</a    >    时，全站就是使用这种方法来做全局数据的管理的，如果你有机会一个人做一个项目时，不妨试试这种方法。  </p>  <p>    下一节，将介绍另一种组件间通信的方法，不同于 provide / inject 的是，它们不是    Vue.js 内置的 API。  </p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-2】基础：Vue.js 组件的三个 API：prop、event、slot</title>
      <link href="/e656ddb2b6d8.html"/>
      <url>/e656ddb2b6d8.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <blockquote>    <p>      如果您已经对 Vue.js      组件的基础用法了如指掌，可以跳过本小节，不过当做复习稍读一下也无妨。    </p>  </blockquote>  <h2 data-id="heading-1">组件的构成</h2>  <p>    一个再复杂的组件，都是由三部分组成的：prop、event、slot，它们构成了 Vue.js    组件的    API。如果你开发的是一个通用组件，那一定要事先设计好这三部分，因为组件一旦发布，后面再修改    API 就很困难了，使用者都是希望不断新增功能，修复    bug，而不是经常变更接口。如果你阅读别人写的组件，也可以从这三个部分展开，它们可以帮助你快速了解一个组件的所有功能。  </p>  <h3 data-id="heading-2">属性 prop</h3>  <p>    <code>prop</code>    定义了这个组件有哪些可配置的属性，组件的核心功能也都是它来确定的。写通用组件时，props    最好用<strong>对象</strong>的写法，这样可以针对每个属性设置类型、默认值或自定义校验属性的值，这点在组件开发中很重要，然而很多人却忽视，直接使用    props 的数组用法，这样的组件往往是不严谨的。比如我们封装一个按钮组件    <code>&lt;i-button&gt;</code>：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>button</span> <span>:class</span>=<span>"'i-button-size' + size"</span> <span>:disabled</span>=<span>"disabled"</span>&gt;</span><span>&lt;/<span>button</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>// 判断参数是否是其中之一</span>  <span><span>function</span> <span>oneOf</span> (<span>value, validList</span>) </span>&#123;    <span>for</span> (<span>let</span> i = <span>0</span>; i &lt; validList.length; i++) &#123;      <span>if</span> (value === validList[i]) &#123;        <span>return</span> <span>true</span>;      &#125;    &#125;    <span>return</span> <span>false</span>;  &#125;  <span>export</span> <span>default</span> &#123;    <span>props</span>: &#123;      <span>size</span>: &#123;        validator (value) &#123;          <span>return</span> oneOf(value, [<span>'small'</span>, <span>'large'</span>, <span>'default'</span>]);        &#125;,        <span>default</span>: <span>'default'</span>      &#125;,      <span>disabled</span>: &#123;        <span>type</span>: <span>Boolean</span>,        <span>default</span>: <span>false</span>      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>使用组件：</p>  <pre><code lang="html" class=""><span>&lt;<span>i-button</span> <span>size</span>=<span>"large"</span>&gt;</span><span>&lt;/<span>i-button</span>&gt;</span><span>&lt;<span>i-button</span> <span>disabled</span>&gt;</span><span>&lt;/<span>i-button</span>&gt;</span></code></pre>  <p>    组件中定义了两个属性：尺寸 size 和 是否禁用 disabled。其中 size 使用    <code>validator</code> 进行了值的自定义验证，也就是说，从父级传入的    size，它的值必须是指定的    <strong>small、large、default</strong> 中的一个，默认值是    default，如果传入这三个以外的值，都会抛出一条警告。  </p>  <p>    要注意的是，组件里定义的    props，都是<strong>单向数据流</strong>，也就是只能通过父级修改，组件自己不能修改    props 的值，只能修改定义在 data    里的数据，非要修改，也是通过后面介绍的自定义事件通知父级，由父级来修改。  </p>  <p>    在使用组件时，也可以传入一些标准的 html 特性，比如    <strong>id</strong>、<strong>class</strong>：  </p>  <pre><code lang="html" class=""><span>&lt;<span>i-button</span> <span>id</span>=<span>"btn1"</span> <span>class</span>=<span>"btn-submit"</span>&gt;</span><span>&lt;/<span>i-button</span>&gt;</span></code></pre>  <p>    这样的 html 特性，在组件内的    <code>&lt;button&gt;</code> 元素上会继承，并不需要在 props    里再定义一遍。这个特性是默认支持的，如果不期望开启，在组件选项里配置    <code>inheritAttrs: false</code> 就可以禁用了。  </p>  <h3 data-id="heading-3">插槽 slot</h3>  <p>    如果要给上面的按钮组件    <code>&lt;i-button&gt;</code> 添加一些文字内容，就要用到组件的第二个    API：插槽 slot，它可以分发组件的内容，比如在上面的按钮组件中定义一个插槽：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>button</span> <span>:class</span>=<span>"'i-button-size' + size"</span> <span>:disabled</span>=<span>"disabled"</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>button</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span></code></pre>  <p>    这里的    <code>&lt;slot&gt;</code>    节点就是指定的一个插槽的位置，这样在组件内部就可以扩展内容了：  </p>  <pre><code lang="html" class=""><span>&lt;<span>i-button</span>&gt;</span>按钮 1<span>&lt;/<span>i-button</span>&gt;</span><span>&lt;<span>i-button</span>&gt;</span>  <span>&lt;<span>strong</span>&gt;</span>按钮 2<span>&lt;/<span>strong</span>&gt;</span><span>&lt;/<span>i-button</span>&gt;</span></code></pre>  <p>    当需要多个插槽时，会用到具名 slot，比如上面的组件我们再增加一个    slot，用于设置另一个图标组件：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>button</span> <span>:class</span>=<span>"'i-button-size' + size"</span> <span>:disabled</span>=<span>"disabled"</span>&gt;</span>    <span>&lt;<span>slot</span> <span>name</span>=<span>"icon"</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>button</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span></code></pre>  <pre><code lang="html" class=""><span>&lt;<span>i-button</span>&gt;</span>  <span>&lt;<span>i-icon</span> <span>slot</span>=<span>"icon"</span> <span>type</span>=<span>"checkmark"</span>&gt;</span><span>&lt;/<span>i-icon</span>&gt;</span>  按钮 1<span>&lt;/<span>i-button</span>&gt;</span></code></pre>  <p>    这样，父级内定义的内容，就会出现在组件对应的 slot    里，没有写名字的，就是默认的 slot。  </p>  <p>    在组件的    <code>&lt;slot&gt;</code> 里也可以写一些默认的内容，这样在父级没有写任何    slot 时，它们就会出现，比如：  </p>  <pre><code lang="html" class=""><span>&lt;<span>slot</span>&gt;</span>提交<span>&lt;/<span>slot</span>&gt;</span></code></pre>  <h3 data-id="heading-4">自定义事件 event</h3>  <p>    现在我们给组件    <code>&lt;i-button&gt;</code>    加一个点击事件，目前有两种写法，我们先看自定义事件 event（部分代码省略）：  </p>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>button</span> @<span>click</span>=<span>"handleClick"</span>&gt;</span>    <span>&lt;<span>slot</span>&gt;</span><span>&lt;/<span>slot</span>&gt;</span>  <span>&lt;/<span>button</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    <span>methods</span>: &#123;      handleClick (event) &#123;        <span>this</span>.$emit(<span>'on-click'</span>, event);      &#125;    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    通过 <code>$emit</code>，就可以触发自定义的事件    <code>on-click</code> ，在父级通过 <code>@on-click</code> 来监听：  </p>  <pre><code lang="html" class=""><span>&lt;<span>i-button</span> @<span>on-click</span>=<span>"handleClick"</span>&gt;</span><span>&lt;/<span>i-button</span>&gt;</span></code></pre>  <p>    上面的 click 事件，是在组件内部的    <code>&lt;button&gt;</code>    元素上声明的，这里还有另一种方法，直接在父级声明，但为了区分原生事件和自定义事件，要用到事件修饰符    <code>.native</code>，所以上面的示例也可以这样写：  </p>  <pre><code lang="html" class=""><span>&lt;<span>i-button</span> @<span>click.native</span>=<span>"handleClick"</span>&gt;</span><span>&lt;/<span>i-button</span>&gt;</span></code></pre>  <p>    如果不写 <code>.native</code> 修饰符，那上面的    <code>@click</code> 就是<strong>自定义事件</strong> click，而非<strong      >原生事件</strong    >    click，但我们在组件内只触发了 <code>on-click</code> 事件，而不是    <code>click</code>，所以直接写 <code>@click</code> 会监听不到。  </p>  <h2 data-id="heading-5">组件的通信</h2>  <p>一般来说，组件可以有以下几种关系：</p>  <p></p>  <figure>    <img      alt="组件关系"      src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/166864d066bbcf69~tplv-t2oaga2asx-watermark.awebp"      loading="lazy"      class="medium-zoom-image"    />    <figcaption></figcaption>  </figure>  <p></p>  <p>    A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C    是隔代关系（可能隔多代）。组件间经常会通信，Vue.js    内置的通信手段一般有两种：  </p>  <ul>    <li><code>ref</code>：给元素或组件注册引用信息；</li>    <li><code>$parent</code> / <code>$children</code>：访问父 / 子实例。</li>  </ul>  <p>    这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据，比如下面的示例中，用    ref 来访问组件（部分代码省略）：  </p>  <pre><code lang="js" class=""><span>// component-a</span><span>export</span> <span>default</span> &#123;  data () &#123;    <span>return</span> &#123;      <span>title</span>: <span>'Vue.js'</span>    &#125;  &#125;,  <span>methods</span>: &#123;    sayHello () &#123;      <span>window</span>.alert(<span>'Hello'</span>);    &#125;  &#125;&#125;</code></pre>  <pre><code lang="html" class=""><span>&lt;<span>template</span>&gt;</span>  <span>&lt;<span>component-a</span> <span>ref</span>=<span>"comA"</span>&gt;</span><span>&lt;/<span>component-a</span>&gt;</span><span>&lt;/<span>template</span>&gt;</span><span>&lt;<span>script</span>&gt;</span><span>  <span>export</span> <span>default</span> &#123;    mounted () &#123;      <span>const</span> comA = <span>this</span>.$refs.comA;      <span>console</span>.log(comA.title);  <span>// Vue.js</span>      comA.sayHello();  <span>// 弹窗</span>    &#125;  &#125;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>  <p>    <code>$parent</code> 和    <code>$children</code> 类似，也是基于当前上下文访问父组件或全部子组件的。  </p>  <p>    这两种方法的弊端是，无法在<strong>跨级</strong>或<strong>兄弟</strong>间通信，比如下面的结构：  </p>  <pre><code lang="html" class="">// parent.vue<span>&lt;<span>component-a</span>&gt;</span><span>&lt;/<span>component-a</span>&gt;</span><span>&lt;<span>component-b</span>&gt;</span><span>&lt;/<span>component-b</span>&gt;</span><span>&lt;<span>component-b</span>&gt;</span><span>&lt;/<span>component-b</span>&gt;</span></code></pre>  <p>    我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个    component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus    的解决方案，本小册不再做它们的介绍，读者可以自行阅读相关内容。不过，它们都是依赖第三方插件的存在，这在开发独立组件时是不可取的，而在小册的后续章节，会陆续介绍一些黑科技，它们完全不依赖任何三方插件，就可以轻松得到任意的组件实例，或在任意组件间进行通信，且适用于任意场景。  </p>  <h2 data-id="heading-6">结语</h2>  <p>    本小节带您复习了 Vue.js 组件的核心知识点，虽然这并没有完全覆盖 Vue.js 的    API，但对于组件开发来说已经足够了，后续章节也会陆续扩展更多的用法。  </p>  <p>    基于 Vue.js 开发独立组件，并不是新奇的挑战，坦率地讲，它本质上还是    JavaScript。掌握了 Vue.js 组件的这三个 API    后，剩下的便是程序的设计。在组件开发中，最难的环节应当是解耦组件的交互逻辑，尽量把复杂的逻辑分发到不同的子组件中，然后彼此建立联系，在这其中，计算属性（computed）和混合（mixins）是两个重要的技术点，合理利用，就能发挥出    Vue.js 语言的最大特点：把状态（数据）的维护交给 Vue.js    处理，我们只专注在交互上。  </p>  <p>    当您最终读完本小册时，应该会总结出和笔者一样的感悟：Vue.js    组件开发，玩到最后还是在拼 JavaScript 功底。对于每一位使用 Vue.js    的开发者来说，阅读完本小册都可以尝试开发和维护一套属于自己的组件库，并乐在其中，而且你会越发觉得，一个组件或一套组件库，就是融合了前端精髓的产出。  </p>  <h2 data-id="heading-7">扩展阅读</h2>  <ul>    <li>      <a        target="_blank"        href="https://juejin.cn/post/6844903542315040776"        title="https://juejin.cn/post/6844903542315040776"        >Vue 组件通信之 Bus</a      >    </li>    <li>      <a        target="_blank"        href="https://juejin.cn/entry/6844903470219149326"        title="https://juejin.cn/entry/6844903470219149326"        >Vuex 通俗版教程</a      >    </li>  </ul></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【掘金小册·Vue组件精讲-1】开篇：Vue.js 的精髓——组件</title>
      <link href="/3cc96f12a0bf.html"/>
      <url>/3cc96f12a0bf.html</url>
      
        <content type="html"><![CDATA[<div class="markdown-body">  <h2 data-id="heading-1">写在前面</h2>  <p>    Vue.js，无疑是当下最火热的前端框架 <sup><em>Almost</em></sup    >，而 Vue.js 最精髓的，正是它的组件与组件化。写一个 Vue    工程，也就是在写一个个的组件。  </p>  <p>    业务场景是千变万化的，而不变的是 Vue.js 组件开发的核心思想和使用技巧，掌握了    Vue.js    组件的各种开发模式，再复杂的业务场景也可以轻松化解。本小册则着重介绍笔者在 3    年的 Vue.js 开发及两年的    <a      href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fiview%2Fiview"      target="_blank"      rel="nofollow noopener noreferrer"      title="https://github.com/iview/iview"      ref="nofollow noopener noreferrer"      >iView</a    >    开源中积累和沉淀的对 Vue.js 组件的见解和经验。  </p>  <p>    本小册<strong>不会</strong>介绍 Vue.js    的基础用法，因为市面上已经沉淀了大量的相关技术资料，而且 Vue.js    的文档已经足够详细。如果您尚未接触 Vue.js    或正打算开始了解，推荐您先阅读笔者出版的<a      href="https://link.juejin.cn?target=https%3A%2F%2Fitem.jd.com%2F12215519.html"      target="_blank"      rel="nofollow noopener noreferrer"      title="https://item.jd.com/12215519.html"      ref="nofollow noopener noreferrer"      >《Vue.js 实战》</a    >（清华大学出版社）一书，它适合刚接触 Vue.js    的开发者。因此，本小册适合已经了解或使用过 Vue.js 的开发者。  </p>  <p>这一节，我们先笼统地聊聊 Vue.js 组件和组件化以及本小册各章节的梳理。</p>  <h2 data-id="heading-2">组件的分类</h2>  <p>一般来说，Vue.js 组件主要分成三类：</p>  <ol>    <li>      <p>        由        <code>vue-router</code>        产生的每个页面，它本质上也是一个组件（.vue），主要承载当前页面的 HTML        结构，会包含数据获取、数据整理、数据可视化等常规业务。整个文件相对较大，但一般不会有        <code>props</code> 选项和        <code>自定义事件</code        >，因为它作为路由的渲染，不会被复用，因此也不会对外提供接口。      </p>      <p>        在项目开发中，我们写的大部分代码都是这类的组件（页面），协同开发时，每人维护自己的页面，很少有交集。这类组件相对是最好写的，因为主要是还原设计稿，完成需求，不需要太多模块和架构设计上的考虑。      </p>    </li>    <li>      <p>        不包含业务，独立、具体功能的基础组件，比如<strong>日期选择器</strong>、<strong>模态框</strong>等。这类组件作为项目的基础控件，会被大量使用，因此组件的        API 进行过高强度的抽象，可以通过不同配置实现不同的功能。比如笔者开源的        iView，就是包含了 50 多个这样基础组件的 UI 组件库。      </p>      <p>        每个公司都有自己的组件使用规范或组件库，但要开发和维护一套像 iView        这样的组件库，投入的人力和精力还是很重的，所以出于成本考虑，很多项目都会使用已有的开源组件库。      </p>      <p>        独立组件的开发难度要高于第一类组件，因为它的侧重点是 API        的设计、兼容性、性能、以及复杂的功能。这类组件对 JavaScript        的编程能力有一定要求，也会包含非常多的技巧，比如在不依赖 Vuex 和        Bus（因为独立组件，无法依赖其它库）的情况下，各组件间的通信，还会涉及很多脑壳疼的逻辑，比如日期选择器要考虑不同时区、国家的日历习惯，支持多种日期格式。      </p>      <p>        本小册也会重点介绍此类组件的各种开发模式和技巧，对应不同的模式，会带有具体的组件实战。      </p>    </li>    <li>      <p>        业务组件。它不像第二类独立组件只包含某个功能，而是在业务中被多个页面复用的，它与独立组件的区别是，业务组件只在当前项目中会用到，不具有通用性，而且会包含一些业务，比如数据请求；而独立组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框。      </p>      <p>        业务组件更像是介于第一类和第二类之间，在开发上也与独立组件类似，但寄托于项目，你可以使用项目中的技术栈，比如        Vuex、axios、echarts        等，所以它的开发难度相对独立组件要容易点，但也有必要考虑组件的可维护性和复用性。      </p>    </li>  </ol>  <h2 data-id="heading-3">小册的内容</h2>  <p>    因为本小册是围绕 Vue.js 组件展开的，所以第二节会讲解 Vue.js 组件的三个    API：<code>prop</code>、<code>event</code>、<code>slot</code>，当然，如果你已经开发过一些独立组件，完全可以跳过这节内容。  </p>  <p>    3 - 7 小节会介绍组件间通信的一些方法和黑科技，一部分是 Vue.js    内置的，一部分是自行实现的，在实际开发中，会非常实用。同时也利用这些方法完成了两个具体的实战案例：  </p>  <ol>    <li>具有数据校验功能的表单组件 —— Form；</li>    <li>组合多选框组件 —— CheckboxGroup &amp; Checkbox。</li>  </ol>  <p>本小册都会以这种核心科技 + 对应实战的形式展开。</p>  <p>    8 - 10 小节介绍 Vue 的构造器 extend 和手动挂载组件 $mount    的用法及案例。Vue.js 除了我们正常    <code>new Vue()</code> 外，还可以手动挂载的，这 3 节将介绍手动挂载一个 Vue    组件的使用场景。其中涉及到两个案例：  </p>  <ol>    <li>动态渲染 .vue 文件的组件 —— Display；</li>    <li>全局通知组件 —— $Alert。</li>  </ol>  <p>    <strong>Display</strong> 组件用于将    <code>.vue</code> 文件渲染出来，线上的案例是    <a      href="https://link.juejin.cn?target=https%3A%2F%2Frun.iviewui.com%2F"      target="_blank"      rel="nofollow noopener noreferrer"      title="https://run.iviewui.com/"      ref="nofollow noopener noreferrer"      >iView Run</a    >，它不需要你重新编译项目，就可以渲染一个标准的 Vue.js 组件。  </p>  <p>    <strong>$Alert</strong>    是全局的通知组件，它的调用方法不同于常规组件。常规组件使用方法形如：  </p>  <pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">Alert</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"通知内容"</span> <span class="hljs-attr">:duration</span>=<span class="hljs-string">"3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Alert</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">import</span> Alert <span class="hljs-keyword">from</span> <span class="hljs-string">'../components/alert.vue'</span>;        <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;        <span class="hljs-attr">components</span>: &#123; Alert &#125;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>  <p>而 <code>$Alert</code> 的调用更接近 JS 语法：</p>  <pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    <span class="hljs-attr">methods</span>: &#123;        showMessage () &#123;            <span class="hljs-built_in">this</span>.$Alert(&#123;                <span class="hljs-attr">content</span>: <span class="hljs-string">'通知内容'</span>,                <span class="hljs-attr">duration</span>: <span class="hljs-number">3</span>            &#125;);        &#125;    &#125;&#125;</code></pre>  <p>虽然与常规 Vue 组件调用方式不同，但底层仍然由 Vue 组件构成和维护。</p>  <p>    11 - 12 小节介绍 Render 函数与 Functional    Render，并完成一个能够渲染自定义列的 Table 组件。Render 函数也是 Vue.js    组件重要的一部分，只不过在大多数业务中不常使用。本小节会介绍它的使用场景。  </p>  <p>    13 小节介绍<strong>作用域 slot（slot-scope）</strong    >，并基于这种方法同样实现 Table 组件。slot 用的很多，但 slot-scope    在业务中并不常用，但在一些特定场景下，比如组件内部有循环体时，会非常实用。  </p>  <p>14 - 15 小节介绍递归组件，并完成树形控件 —— Tree。</p>  <p>    16 - 19 小节是综合拓展，会着重讲解 Vue.js 容易忽略却很重要的 API，以及对    Vue.js 面试题的详细分析。除此之外，还会总结笔者在两年的 iView    开源经历中的经验，除了技术细节外，还包括开源项目的持续性发展、推广等。  </p>  <h2 data-id="heading-4">结语</h2>  <p>    三年前，我开始接触 Vue.js 框架，当时就被它的轻量、组件化和友好的 API    所吸引。与此同时，我也开源了 iView 项目。三年的磨(cǎi    )砺(kēng)，沉淀了不少关于 Vue.js 组件的经验。  </p>  <p>本小册的内容也许不会让你的技术一夜间突飞猛进，但绝对使你醍醐灌顶。</p>  <p>那么，请准备好一台电脑和一杯咖啡，一起来探索 Vue.js 的精髓吧。</p></div>]]></content>
      
      
      <categories>
          
          <category> 掘金小册·Vue组件精讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> IView </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在NPM上发布一个自己的插件库</title>
      <link href="/ae59ddb3f9dd.html"/>
      <url>/ae59ddb3f9dd.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cn.bing.com/th?id=OHR.ElPanecilloHill_ZH-CN0527709139_1920x1080.jpg&rf=LaDigue_1920x1080.jpg&pid=hp" alt="暮色中的面包山和老城区，厄瓜多尔基多"></p><h3 id="1-一个-npm-的账号"><a href="#1-一个-npm-的账号" class="headerlink" title="1. 一个 npm 的账号"></a>1. 一个 <code>npm</code> 的账号</h3><p>没有的直接去官网注册即可。<a href="https://www.npmjs.com/login">快捷入口</a></p><img src="/ae59ddb3f9dd/1.jpg" class=""><h4 id=""><a href="#" class="headerlink" title=""></a></h4><img src="/ae59ddb3f9dd/2.jpg" class=""><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>记住填写的 <code>Username</code> 和 <code>Password</code>，后续发布的时候需要用到（不会有人记不住吧 🤡，不会吧，不会吧…）。</p><h3 id="2-一个-package-json-文件"><a href="#2-一个-package-json-文件" class="headerlink" title="2. 一个 package.json 文件"></a>2. 一个 <code>package.json</code> 文件</h3><p>新建一个文件夹，然后在终端中打开，执行 <code>npm init</code>，设置基本配置。（这些后续都可以更改，若想直接跳过，可直接执行 <code>npm init -y</code> )</p><blockquote><p>关于这个 <code>package.json</code> 文件，你是否想到了每个 Vue 项目都有一个，是否能直接用，答案当然是：肯定的。我就是直接用一个 Vue 项目来作为插件的开发版，然后在导出的时候做些处理。我的理解是：一个 Vue 的 <code>npm</code> 插件，就是一个又一个的 <i>单文件组件</i>，只不过是通过 <code>npm install</code> 的方式，将其放在了 <code>node_modules</code> 目录下，然后通过正常的 Vue 组件引入方式来引入到项目中。</p></blockquote><h3 id="3-一个用来放-插件-的文件夹"><a href="#3-一个用来放-插件-的文件夹" class="headerlink" title="3. 一个用来放 插件 的文件夹"></a>3. 一个用来放 <code>插件</code> 的文件夹</h3><p>在 Vue 项目的 <code>src</code> 目录下新建一个 <code>plugins</code> 文件夹，这里用来存放要导出的组件。到这一步，其实就能将这个插件发布了，然后通过正常的组件引入方式，就能在项目中正常使用了。不过，这样显得不够高级，接下来来点高级的。</p><h3 id="4-一个可以批量导出组件的-JS-文件"><a href="#4-一个可以批量导出组件的-JS-文件" class="headerlink" title="4. 一个可以批量导出组件的 JS 文件"></a>4. 一个可以批量导出组件的 <code>JS</code> 文件</h3><ul><li><p>直接在 <code>src</code> 目录下，新建一个 <code>index.js</code> 文件，用以批量导出，代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> plugins <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>  <span class="token string">"./plugins"</span> <span class="token comment">/* 文件目录 */</span><span class="token punctuation">,</span>  <span class="token boolean">true</span> <span class="token comment">/* 是否检索子目录 */</span><span class="token punctuation">,</span>  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.vue$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">/* 匹配文件的正则表达式 */</span><span class="token punctuation">)</span><span class="token keyword">let</span> allComponents <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>plugins<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">plugins</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  component<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> component<span class="token punctuation">.</span>default<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  allComponents<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> component<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> ops <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> component<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>allComponents<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> component<span class="token punctuation">.</span>default<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  install<span class="token punctuation">,</span>  <span class="token operator">...</span>allComponents<span class="token punctuation">&#125;</span></code></pre><blockquote><p><strong>require.context</strong>：用以批量引入一个目录下的某类型的文件（三个参数如代码中注释写的那样）。得到的 <code>plugins</code> 是一个特殊类型，它的 <code>.keys()</code> 方法返回一个目录下相匹配文件的 <code>相对路径</code>，（如，<i>plugins</i> 目录下的 <code>test.vue</code>，对应的就是 <code>./test.vue</code>），可以从相对路径中取出组件的名称。而 <code>plugins([相对路径])</code> 返回的就是对应相对路径的组件，即 <code>plugins(&#39;./test.vue&#39;) === test.vue</code>。</p></blockquote><blockquote><p><strong>install</strong>：每个 <code>Vue</code> 插件，都会有的一个内置方法。当使用 <code>Vue.use([componentName])</code> 时，会自动调用内置 <code>install</code> 方法。这一步是将所有的插件都挂载一个 <code>install</code> 方法，以便通过 <code>Vue.use()</code> 的方式引入，而不是一昧地用 <code>import [componentName] from &#39;...&#39;</code>。这里最后导出的时候，还有一个 <code>install</code> 方法，这一步是为了将所有的组件全部引入，也即：最后仅通过 <code>import Plugin from &#39;pluginName&#39;</code> + <code>Vue.use(Plugin)</code>，就能将 <i>plugins</i> 目录下的插件全部引入到 Vue 项目中。</p></blockquote></li></ul><blockquote><p>注：参考了 <code>ElementUI 和 IviewUI</code> 的 <code>index.js</code>，发现他们都是通过 <code>import</code> 的方式一个一个导入和导出，只有在全部导出时，才用到 集体<code>install</code> 的形式，而且每个 <code>Vue</code> 组件的同级目录下都有一个 <code>.js</code> 用以将该 <code>Vue</code> 组件导出，猜测这些可能是为了兼容性考虑，暂时只能想到这么多 😓。</p></blockquote><h3 id="5-发布"><a href="#5-发布" class="headerlink" title="5. 发布"></a>5. 发布</h3><ol><li><p>发布前，最重要的一步就是：配置 <code>package.json</code> 的 <code>&quot;main&quot;: &quot;./src/index.js&quot;</code>(如果不配置，在 Vue 的 main.js 中使用 <code>import Plugin from &#39;pluginName&#39;</code> 会提示找不到依赖)。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  ...  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>配置 <code>.npmignore</code>，将不需要发布的文件给忽略掉，和 <code>.gitignore</code> 同理。</p></li><li><p>切换当前 <code>npm</code> 的镜像源为 <code>https://registry.npmjs.org/</code>（否则，下一步的登录会出错）。</p></li><li><p>在终端中执行 <code>npm adduser</code> &gt;&gt; <code>npm login</code> ，输入开头牢记的 <code>Username</code> 和 <code>Password</code>（你不会忘了吧 🤡）。</p></li><li><p>最后，执行 <code>npm publish</code>（如果没报错，那恭喜你，发布成功了！）。</p></li></ol><blockquote><p><code>taobao</code> 镜像源每隔一段时间会向 <code>npm</code> 进行同步，也可以自己去官网查看 <a href="https://npmmirror.com/">-&gt;here</a>，同步成功后，用 <code>taobao</code> 镜像源就也能下载自己发布的插件啦。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个流程图组件，就叫「flow-chart·1.0」吧</title>
      <link href="/98d80ddf0bcb.html"/>
      <url>/98d80ddf0bcb.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cn.bing.com/th?id=OHR.YorkMinster_ZH-CN3129176050_1920x1080.jpg&rf=LaDigue_1920x1080.jpg&pid=hp%7D" alt="约克大教堂墙上的怪诞雕塑，英格兰北约克郡"></p><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a><center>效果图</center></h4><img src="/98d80ddf0bcb/10.31.gif" class=""><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><center>缺点</center></h4><ul><li><p>只适用于相邻两个阶段之间，只能<code>有一个 “ 两个及以上 ”</code>的流程，先看图说话。</p><img src="/98d80ddf0bcb/10.31-1.gif" class=""><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>step2 里有两个步骤，step3 也有两个步骤，就会导致如上图所示的情况（这也是这个组件暂时没考虑的地方，等后续再优化一下），除了这种情况，其他的展示效果还是蛮好的。</p><img src="/98d80ddf0bcb/10.31-2.gif" class=""><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><img src="/98d80ddf0bcb/10.31-3.gif" class=""><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4></li><li><p>边框线条宽度这块，有时候虽然设置的是一样的值，但是显示时，不是这个高点，就是那个宽点，为了展示出来美观些，我也是做了一些改动。</p></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><center>代码</center></h4><h5 id="template"><a href="#template" class="headerlink" title="template"></a><p>template</p></h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div    <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fc-wrap"</span>    <span class="token operator">:</span>style<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>      <span class="token string-property property">'--fc-default-color'</span><span class="token operator">:</span> color<span class="token punctuation">,</span>      <span class="token string-property property">'--fc-active-color'</span><span class="token operator">:</span> activeColor<span class="token punctuation">,</span>      <span class="token string-property property">'--fc-background-color'</span><span class="token operator">:</span> backgroundColor<span class="token punctuation">,</span>      <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">(</span>height <span class="token operator">?</span> height <span class="token operator">:</span> autoHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>"  <span class="token operator">></span>    <span class="token operator">&lt;</span>div      <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span>"<span class="token punctuation">[</span>        <span class="token string">'fc-item'</span><span class="token punctuation">,</span>        i <span class="token operator">&lt;=</span> activeSteps <span class="token operator">?</span> <span class="token string">'fc-item--active '</span> <span class="token operator">+</span> activeStyle <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        i <span class="token operator">&lt;</span> activeSteps <span class="token operator">?</span> <span class="token string">'fc-item--active-before'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'fc-item--head'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        i <span class="token operator">===</span> contentList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'fc-item--tail'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        v<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'fc-item--multipart'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>"      <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"'flex: ' + 1"</span>      v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(v, i) in contentList"</span>      <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"i"</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fc-part"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(t, n) in v"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"n"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fc-part-inner"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> t<span class="token punctuation">.</span>title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"'description--' + descriptionLocation"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> t<span class="token punctuation">.</span>description <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h5 id="script"><a href="#script" class="headerlink" title="script"></a><p>script</p></h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">contentList</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* 流程列表，传参类型        [          [            &#123; title: 'step1-1', description: 'this is step1-1' &#125;,            &#123; title: 'step1-2', description: 'this is step1-2' &#125;,          ],          [            &#123; title: 'step2', description: 'this is step2' &#125;,          ],          [            &#123; title: 'step3', description: 'this is step3' &#125;,          ],          [            &#123; title: 'step4', description: 'this is step4' &#125;,            &#123; title: 'step4-1', description: 'this is step4-1' &#125;          ]        ]      */</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token function">validator</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">step</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> step<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">/* 当前进度 */</span>    <span class="token literal-property property">activeSteps</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">activeStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>      <span class="token function">validator</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'center'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">descriptionLocation</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'in'</span><span class="token punctuation">,</span>      <span class="token function">validator</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'out'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'#ccc'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">activeColor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'#67c23a'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'#fff'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">autoHeight</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 根据子流程最大步骤数量自适应高度 */</span>    <span class="token function">initHeight</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>contentList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>autoHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoHeight<span class="token punctuation">,</span> item<span class="token punctuation">.</span>length<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>autoHeight <span class="token operator">*=</span> <span class="token number">70</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="style"><a href="#style" class="headerlink" title="style"></a><p>style</p></h5><pre class="language-scss" data-language="scss"><code class="language-scss">&lt;style lang=<span class="token string">"scss"</span> scoped><span class="token property"><span class="token variable">$line-width</span></span><span class="token punctuation">:</span> 1.5px<span class="token punctuation">;</span><span class="token property"><span class="token variable">$border-width</span></span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span><span class="token selector">.fc-wrap </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token selector">.fc-item </span><span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token selector">.fc-part </span><span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">transition</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>      <span class="token selector"><span class="token parent important">&amp;</span>::before </span><span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector"><span class="token parent important">&amp;</span>::after </span><span class="token punctuation">&#123;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector"><span class="token parent important">&amp;</span>::before,      <span class="token parent important">&amp;</span>::after </span><span class="token punctuation">&#123;</span>        <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$line-width</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">-</span> 1px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-default-color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.fc-part-inner </span><span class="token punctuation">&#123;</span>      <span class="token property">transition</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.fc-wrap .fc-item--head .fc-part::before,.fc-wrap .fc-item--tail .fc-part::after </span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.fc-wrap .fc-part-inner </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token variable">$border-width</span> solid <span class="token function">var</span><span class="token punctuation">(</span>--fc-default-color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-default-color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token selector">.title </span><span class="token punctuation">&#123;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.description--out </span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> -1.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 多个环节时 */</span><span class="token selector">.fc-wrap .fc-item--multipart </span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token selector"><span class="token parent important">&amp;</span>.fc-item--head::before,  <span class="token parent important">&amp;</span>.fc-item--tail::after </span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector"><span class="token parent important">&amp;</span>::before,  <span class="token parent important">&amp;</span>::after </span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$line-width</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-default-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector"><span class="token parent important">&amp;</span>::before </span><span class="token punctuation">&#123;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector"><span class="token parent important">&amp;</span>::after </span><span class="token punctuation">&#123;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.fc-part:first-child </span><span class="token punctuation">&#123;</span>    <span class="token selector"><span class="token parent important">&amp;</span>::before,    <span class="token parent important">&amp;</span>::after </span><span class="token punctuation">&#123;</span>      <span class="token property">top</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">-</span> 1px<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">border-top</span><span class="token punctuation">:</span> 999px solid <span class="token function">var</span><span class="token punctuation">(</span>--fc-background-color<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--fc-default-color<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>      <span class="token property">z-index</span><span class="token punctuation">:</span> 999<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.fc-part:last-child::before,  .fc-part:last-child::after </span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--fc-default-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 999px solid <span class="token function">var</span><span class="token punctuation">(</span>--fc-background-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 999<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* active */</span><span class="token selector">.fc-wrap .fc-item--active-before </span><span class="token punctuation">&#123;</span>  <span class="token selector">.fc-part::before,  .fc-part::after,  <span class="token parent important">&amp;</span>.fc-item--multipart::before,  <span class="token parent important">&amp;</span>.fc-item--multipart::after </span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector"><span class="token parent important">&amp;</span>.fc-item--multipart </span><span class="token punctuation">&#123;</span>    <span class="token selector">.fc-part:first-child::before,    .fc-part:first-child::after </span><span class="token punctuation">&#123;</span>      <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.fc-part:last-child::before,    .fc-part:last-child::after </span><span class="token punctuation">&#123;</span>      <span class="token property">border-top-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.fc-wrap .fc-item--active </span><span class="token punctuation">&#123;</span>  <span class="token selector"><span class="token parent important">&amp;</span>.left </span><span class="token punctuation">&#123;</span>    <span class="token selector">.fc-part::before,    <span class="token parent important">&amp;</span>.fc-item--multipart::before </span><span class="token punctuation">&#123;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector"><span class="token parent important">&amp;</span>.fc-item--multipart </span><span class="token punctuation">&#123;</span>      <span class="token selector">.fc-part:first-child::before </span><span class="token punctuation">&#123;</span>        <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.fc-part:last-child::before </span><span class="token punctuation">&#123;</span>        <span class="token property">border-top-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector"><span class="token parent important">&amp;</span>.center,  <span class="token parent important">&amp;</span>.right </span><span class="token punctuation">&#123;</span>    <span class="token selector">.fc-part::before,    .fc-part::after,    <span class="token parent important">&amp;</span>.fc-item--multipart::before,    <span class="token parent important">&amp;</span>.fc-item--multipart::after </span><span class="token punctuation">&#123;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector"><span class="token parent important">&amp;</span>.fc-item--multipart </span><span class="token punctuation">&#123;</span>      <span class="token selector">.fc-part:first-child::before,      .fc-part:first-child::after </span><span class="token punctuation">&#123;</span>        <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.fc-part:last-child::before,      .fc-part:last-child::after </span><span class="token punctuation">&#123;</span>        <span class="token property">border-top-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector"><span class="token parent important">&amp;</span>.right + .fc-item </span><span class="token punctuation">&#123;</span>    <span class="token selector">.fc-part::before,    <span class="token parent important">&amp;</span>.fc-item--multipart::before </span><span class="token punctuation">&#123;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector"><span class="token parent important">&amp;</span>.fc-item--multipart </span><span class="token punctuation">&#123;</span>      <span class="token selector">.fc-part:first-child::before </span><span class="token punctuation">&#123;</span>        <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.fc-part:last-child::before </span><span class="token punctuation">&#123;</span>        <span class="token property">border-top-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.fc-part-inner </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fc-active-color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/style></code></pre><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a><center>实现思路</center></h4><p>样式的实现，几乎都是通过动态设置不同的<code>Class</code>来对样式进行操作和变换，也算是对自己<code>CSS</code>功底的考验。唯一用到<code>js</code>的部分就是，获取当前流程中子流程最多的步骤数，然后自适应流程图的高度。<br>讲讲这个组件功能实现中，自我感觉最巧妙的部分：<code>当子流程有多个步骤时，如何绘制将子流程连接起来的线条？</code></p><ul><li><p>每个流程前后的线段是用它们各自的<code>::before</code>、<code>::after</code>伪类实现；</p></li><li><p>而连接子流程的线段同样也是用最外层父元素的<code>::before</code>、<code>::after</code>伪类实现；</p></li><li><p>关键点在于，父元素的伪类高度如何刚好与最上面的步骤和最下面的步骤刚好连接在一起？</p></li><li><p>最开始是想通过<code>js</code>实现，但会很麻烦，仔细想想过后，其实只要把多余的部分掩盖掉，就能在视觉上呈现出两条线段连接在一起的效果；</p><img src="/98d80ddf0bcb/10.31-5.png" class=""><h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4></li><li><p>然后我调整了子流程中，首尾两个步骤的伪类样式：</p><ul><li><p>头部步骤：</p><ul><li><p><code>::before</code>、<code>::after</code>:</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span> 无限大（这里我给的是 999px<span class="token punctuation">)</span> solid 背景色<span class="token punctuation">;</span><span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid 线条颜色<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>尾部步骤：</p><ul><li><p><code>::before</code>、<code>::after</code>:</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid 线条颜色<span class="token property">border-bottom</span><span class="token punctuation">:</span> 999px solid 背景色</code></pre></li></ul></li><li><p>效果如图（若背景色为红色），设置<code>height</code>+<code>border-top/bottom</code>同样也能实现。</p><img src="/98d80ddf0bcb/10.31-6.png" class=""><h4 id="-5"><a href="#-5" class="headerlink" title=""></a></h4></li><li><p>最后，给父元素设置<code>overflow: hidden</code>，PERFECT！</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 手写组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭配el-cascader实现一个级联选择日期组件</title>
      <link href="/5c8211979535.html"/>
      <url>/5c8211979535.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cn.bing.com/th?id=OHR.Whakarewarewa_ZH-CN4957778498_1920x1080.jpg&rf=LaDigue_1920x1080.jpg&pid=hp" alt="华卡雷瓦雷瓦森林的红木纪念树林，新西兰北岛"></p><p>事情是这样的：经理觉得日期范围选择组件（使用的是 <code>&lt;el-date-picker type=&quot;daterange&quot; /&gt;</code>），如果时间跨度太大，不便于操作，让我优化一下。思考良久之后，我提出方案：做成一个级联下拉框的形式，经理说：可以。开搞！</p><p>组件整体是基于 <code>el-cascader</code>，然后进行改造，思路如下：</p><ul><li>将开始日期和结束日期拆分成两个 <code>el-cascader</code>;</li><li>为了防止页面加载过多 DOM 节点，使用了 <code>cascader</code> 的 <em>lazyload</em>;</li><li>首次展开面板时，显示最近 10 年的年份（对于本项目，10 年足够了），亦或是在年份的最下面添加一个 <em>加载更多</em> 的按钮（等有时间，下次尝试一下）；</li><li>每个年份都有 12 个月，这是固定不变的，重点在于一些特殊月（二月：你们看我干嘛），获取某一个月的天数；</li></ul><h4 id="template"><a href="#template" class="headerlink" title="template"></a><center>template</center></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"date-picker-wrap"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>cascader      <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"['start-date', showPanel ? 'is-focus' : '']"</span>      <span class="token operator">:</span>size<span class="token operator">=</span><span class="token string">"size"</span>      placeholder<span class="token operator">=</span><span class="token string">"开始日期"</span>      <span class="token operator">:</span>options<span class="token operator">=</span><span class="token string">"options"</span>      separator<span class="token operator">=</span><span class="token string">"-"</span>      popper<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"select-date"</span>      clearable      @visible<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"isShow => (showPanel = isShow)"</span>      <span class="token operator">:</span>props<span class="token operator">=</span><span class="token string">"cascaderProp"</span>      @change<span class="token operator">=</span><span class="token string">"handlerSelectDate"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"startTime"</span>    <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>cascader<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>cascader      <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"['end-date', showPanel ? 'is-focus' : '']"</span>      <span class="token operator">:</span>size<span class="token operator">=</span><span class="token string">"size"</span>      placeholder<span class="token operator">=</span><span class="token string">"结束日期"</span>      <span class="token operator">:</span>options<span class="token operator">=</span><span class="token string">"options"</span>      separator<span class="token operator">=</span><span class="token string">"-"</span>      popper<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"select-date"</span>      clearable      @visible<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"isShow => (showPanel = isShow)"</span>      <span class="token operator">:</span>props<span class="token operator">=</span><span class="token string">"cascaderProp"</span>      @change<span class="token operator">=</span><span class="token string">"handlerSelectDate"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"endTime"</span>    <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>cascader<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><blockquote><p>这里我通过 <code>@visible-change</code> 事件监听弹出层的打开和关闭状态，两个级联框“背靠背”实在是太难看了，于是就通过一个类来修改了 <code>focus</code> 和 <code>hover</code> 事件，让它俩合二为一，美观加倍！</p></blockquote><h4 id="script"><a href="#script" class="headerlink" title="script"></a><center>script</center></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'date-picker'</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'small'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">showPanel</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token literal-property property">startTime</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">endTime</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">cascaderProp</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function-variable function">lazyLoad</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> level <span class="token punctuation">&#125;</span> <span class="token operator">=</span> node          <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* 懒加载年份 */</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* 懒加载月份 */</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadMonth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* 懒加载天 */</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadDay</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handlerSelectDate</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startTime<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$dayjs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startTime<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD 00:00:00'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$dayjs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>endTime<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD 23:59:59'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'update:updateTime'</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">loadYear</span> <span class="token punctuation">(</span>end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start <span class="token operator">=</span> end <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> yearlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> end<span class="token punctuation">;</span> i <span class="token operator">></span> start<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        yearlist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">label</span><span class="token operator">:</span> i<span class="token punctuation">,</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> i        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> yearlist    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">loadMonth</span> <span class="token punctuation">(</span><span class="token parameter">year</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> monthlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        monthlist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">label</span><span class="token operator">:</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> year <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> monthlist    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">loadDay</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> daylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">let</span> maxdays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxdays<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        daylist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">label</span><span class="token operator">:</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> val <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token literal-property property">leaf</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> daylist    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">init</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> year<span class="token punctuation">;</span> i <span class="token operator">></span> year <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">label</span><span class="token operator">:</span> i<span class="token punctuation">,</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> i        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'加载更多...'</span><span class="token punctuation">,</span>        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">getCurrentDate</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD 23:59:59'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="style-·-scss"><a href="#style-·-scss" class="headerlink" title="style · scss"></a><center>style · scss</center></h4><pre class="language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.date-picker-wrap </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token selector"><span class="token parent important">&amp;</span>::before </span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"-"</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">&#123;</span>    <span class="token selector">.el-cascader ::v-deep .el-input__inner </span><span class="token punctuation">&#123;</span>      <span class="token property">border-color</span><span class="token punctuation">:</span> #c0c4cc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">::v-deep </span><span class="token punctuation">&#123;</span>    <span class="token selector">.el-cascader </span><span class="token punctuation">&#123;</span>      <span class="token selector">.el-input__inner </span><span class="token punctuation">&#123;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.el-cascader.is-focus .el-input__inner </span><span class="token punctuation">&#123;</span>      <span class="token property">border-color</span><span class="token punctuation">:</span> #409eff<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.el-cascader.start-date </span><span class="token punctuation">&#123;</span>      <span class="token selector">.el-input__inner </span><span class="token punctuation">&#123;</span>        <span class="token property">border-right</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.el-cascader.end-date </span><span class="token punctuation">&#123;</span>      <span class="token selector">.el-input__inner </span><span class="token punctuation">&#123;</span>        <span class="token property">border-left</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>最后由于宽度太宽了，需要修改宽度，由于弹出层是在 <code>body</code> 下，需要将修改宽度的代码在 <code>main.js</code> 中引入：</p></blockquote><pre class="language-scss" data-language="scss"><code class="language-scss"><span class="token comment">/* 自定义日期选择组件弹出层的宽度 */</span><span class="token selector">.el-popper.el-cascader__dropdown.select-date </span><span class="token punctuation">&#123;</span>  <span class="token selector">.el-scrollbar.el-cascader-menu </span><span class="token punctuation">&#123;</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="在父组件中引入"><a href="#在父组件中引入" class="headerlink" title="在父组件中引入"></a><center>在父组件中引入</center></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>ElCascaderDatePicker @update<span class="token operator">:</span>time<span class="token operator">=</span><span class="token string">"times => (timeRange = times)"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> ElCascaderDatePicker <span class="token keyword">from</span> <span class="token string">'el-cascader-date-picker.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ElCascaderDatePicker  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">timeRange</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a><center>效果展示</center></h4><img src="/5c8211979535/7.gif" class="" title="This is an test image"><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>最后，当我兴高采烈地找到经理，准备邀功时，经理：能不能做成之前其他页面那样，拆成两个框。我：可以！（辛辛苦苦搞了俩小时，等于白干…）</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ElementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/80e2baefa741.html"/>
      <url>/80e2baefa741.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cn.bing.com/th?id=OHR.TheNationaDay_ZH-CN5381900085_1920x1080.jpg&rf=LaDigue_1920x1080.jpg&pid=hp"></p><p>捣鼓了一晚上, 终于把博客给搭起来了: Hello World!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
